
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008114  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080082dc  080082dc  000182dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008514  08008514  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08008514  08008514  00018514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800851c  0800851c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008520  08008520  00018520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08008524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001354  20000020  08008540  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001374  08008540  00021374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d22  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a5b  00000000  00000000  00035d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  000397d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  0003ab60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028288  00000000  00000000  0003bd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017903  00000000  00000000  00064008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed911  00000000  00000000  0007b90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016921c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005178  00000000  00000000  00169270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000020 	.word	0x20000020
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080082c4 	.word	0x080082c4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000024 	.word	0x20000024
 8000204:	080082c4 	.word	0x080082c4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b96e 	b.w	8000d38 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468c      	mov	ip, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 8083 	bne.w	8000b8a <__udivmoddi4+0x116>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d947      	bls.n	8000b1a <__udivmoddi4+0xa6>
 8000a8a:	fab2 f282 	clz	r2, r2
 8000a8e:	b142      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a90:	f1c2 0020 	rsb	r0, r2, #32
 8000a94:	fa24 f000 	lsr.w	r0, r4, r0
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	4097      	lsls	r7, r2
 8000a9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000aa0:	4094      	lsls	r4, r2
 8000aa2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aa6:	0c23      	lsrs	r3, r4, #16
 8000aa8:	fbbc f6f8 	udiv	r6, ip, r8
 8000aac:	fa1f fe87 	uxth.w	lr, r7
 8000ab0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ab4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab8:	fb06 f10e 	mul.w	r1, r6, lr
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d909      	bls.n	8000ad4 <__udivmoddi4+0x60>
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ac6:	f080 8119 	bcs.w	8000cfc <__udivmoddi4+0x288>
 8000aca:	4299      	cmp	r1, r3
 8000acc:	f240 8116 	bls.w	8000cfc <__udivmoddi4+0x288>
 8000ad0:	3e02      	subs	r6, #2
 8000ad2:	443b      	add	r3, r7
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000adc:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	45a6      	cmp	lr, r4
 8000aea:	d909      	bls.n	8000b00 <__udivmoddi4+0x8c>
 8000aec:	193c      	adds	r4, r7, r4
 8000aee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af2:	f080 8105 	bcs.w	8000d00 <__udivmoddi4+0x28c>
 8000af6:	45a6      	cmp	lr, r4
 8000af8:	f240 8102 	bls.w	8000d00 <__udivmoddi4+0x28c>
 8000afc:	3802      	subs	r0, #2
 8000afe:	443c      	add	r4, r7
 8000b00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b04:	eba4 040e 	sub.w	r4, r4, lr
 8000b08:	2600      	movs	r6, #0
 8000b0a:	b11d      	cbz	r5, 8000b14 <__udivmoddi4+0xa0>
 8000b0c:	40d4      	lsrs	r4, r2
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e9c5 4300 	strd	r4, r3, [r5]
 8000b14:	4631      	mov	r1, r6
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	b902      	cbnz	r2, 8000b1e <__udivmoddi4+0xaa>
 8000b1c:	deff      	udf	#255	; 0xff
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d150      	bne.n	8000bc8 <__udivmoddi4+0x154>
 8000b26:	1bcb      	subs	r3, r1, r7
 8000b28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b2c:	fa1f f887 	uxth.w	r8, r7
 8000b30:	2601      	movs	r6, #1
 8000b32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b36:	0c21      	lsrs	r1, r4, #16
 8000b38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b40:	fb08 f30c 	mul.w	r3, r8, ip
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0xe4>
 8000b48:	1879      	adds	r1, r7, r1
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0xe2>
 8000b50:	428b      	cmp	r3, r1
 8000b52:	f200 80e9 	bhi.w	8000d28 <__udivmoddi4+0x2b4>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1ac9      	subs	r1, r1, r3
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x10c>
 8000b70:	193c      	adds	r4, r7, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x10a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80d9 	bhi.w	8000d30 <__udivmoddi4+0x2bc>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e7bf      	b.n	8000b0a <__udivmoddi4+0x96>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0x12e>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	f000 80b1 	beq.w	8000cf6 <__udivmoddi4+0x282>
 8000b94:	2600      	movs	r6, #0
 8000b96:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	4631      	mov	r1, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	fab3 f683 	clz	r6, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d14a      	bne.n	8000c40 <__udivmoddi4+0x1cc>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d302      	bcc.n	8000bb4 <__udivmoddi4+0x140>
 8000bae:	4282      	cmp	r2, r0
 8000bb0:	f200 80b8 	bhi.w	8000d24 <__udivmoddi4+0x2b0>
 8000bb4:	1a84      	subs	r4, r0, r2
 8000bb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000bba:	2001      	movs	r0, #1
 8000bbc:	468c      	mov	ip, r1
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	d0a8      	beq.n	8000b14 <__udivmoddi4+0xa0>
 8000bc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000bc8:	f1c2 0320 	rsb	r3, r2, #32
 8000bcc:	fa20 f603 	lsr.w	r6, r0, r3
 8000bd0:	4097      	lsls	r7, r2
 8000bd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000bd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bda:	40d9      	lsrs	r1, r3
 8000bdc:	4330      	orrs	r0, r6
 8000bde:	0c03      	lsrs	r3, r0, #16
 8000be0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000be4:	fa1f f887 	uxth.w	r8, r7
 8000be8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f108 	mul.w	r1, r6, r8
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x19c>
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c02:	f080 808d 	bcs.w	8000d20 <__udivmoddi4+0x2ac>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 808a 	bls.w	8000d20 <__udivmoddi4+0x2ac>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	443b      	add	r3, r7
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b281      	uxth	r1, r0
 8000c14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c20:	fb00 f308 	mul.w	r3, r0, r8
 8000c24:	428b      	cmp	r3, r1
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x1c4>
 8000c28:	1879      	adds	r1, r7, r1
 8000c2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c2e:	d273      	bcs.n	8000d18 <__udivmoddi4+0x2a4>
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d971      	bls.n	8000d18 <__udivmoddi4+0x2a4>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4439      	add	r1, r7
 8000c38:	1acb      	subs	r3, r1, r3
 8000c3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c3e:	e778      	b.n	8000b32 <__udivmoddi4+0xbe>
 8000c40:	f1c6 0c20 	rsb	ip, r6, #32
 8000c44:	fa03 f406 	lsl.w	r4, r3, r6
 8000c48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c4c:	431c      	orrs	r4, r3
 8000c4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c52:	fa01 f306 	lsl.w	r3, r1, r6
 8000c56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	0c3b      	lsrs	r3, r7, #16
 8000c62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c66:	fa1f f884 	uxth.w	r8, r4
 8000c6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c72:	fb09 fa08 	mul.w	sl, r9, r8
 8000c76:	458a      	cmp	sl, r1
 8000c78:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x220>
 8000c82:	1861      	adds	r1, r4, r1
 8000c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c88:	d248      	bcs.n	8000d1c <__udivmoddi4+0x2a8>
 8000c8a:	458a      	cmp	sl, r1
 8000c8c:	d946      	bls.n	8000d1c <__udivmoddi4+0x2a8>
 8000c8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c92:	4421      	add	r1, r4
 8000c94:	eba1 010a 	sub.w	r1, r1, sl
 8000c98:	b2bf      	uxth	r7, r7
 8000c9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ca6:	fb00 f808 	mul.w	r8, r0, r8
 8000caa:	45b8      	cmp	r8, r7
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x24a>
 8000cae:	19e7      	adds	r7, r4, r7
 8000cb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cb4:	d22e      	bcs.n	8000d14 <__udivmoddi4+0x2a0>
 8000cb6:	45b8      	cmp	r8, r7
 8000cb8:	d92c      	bls.n	8000d14 <__udivmoddi4+0x2a0>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4427      	add	r7, r4
 8000cbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cc2:	eba7 0708 	sub.w	r7, r7, r8
 8000cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cca:	454f      	cmp	r7, r9
 8000ccc:	46c6      	mov	lr, r8
 8000cce:	4649      	mov	r1, r9
 8000cd0:	d31a      	bcc.n	8000d08 <__udivmoddi4+0x294>
 8000cd2:	d017      	beq.n	8000d04 <__udivmoddi4+0x290>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x27a>
 8000cd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000cda:	eb67 0701 	sbc.w	r7, r7, r1
 8000cde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ce2:	40f2      	lsrs	r2, r6
 8000ce4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ce8:	40f7      	lsrs	r7, r6
 8000cea:	e9c5 2700 	strd	r2, r7, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	462e      	mov	r6, r5
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	e70b      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0x60>
 8000d00:	4618      	mov	r0, r3
 8000d02:	e6fd      	b.n	8000b00 <__udivmoddi4+0x8c>
 8000d04:	4543      	cmp	r3, r8
 8000d06:	d2e5      	bcs.n	8000cd4 <__udivmoddi4+0x260>
 8000d08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d10:	3801      	subs	r0, #1
 8000d12:	e7df      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d14:	4608      	mov	r0, r1
 8000d16:	e7d2      	b.n	8000cbe <__udivmoddi4+0x24a>
 8000d18:	4660      	mov	r0, ip
 8000d1a:	e78d      	b.n	8000c38 <__udivmoddi4+0x1c4>
 8000d1c:	4681      	mov	r9, r0
 8000d1e:	e7b9      	b.n	8000c94 <__udivmoddi4+0x220>
 8000d20:	4666      	mov	r6, ip
 8000d22:	e775      	b.n	8000c10 <__udivmoddi4+0x19c>
 8000d24:	4630      	mov	r0, r6
 8000d26:	e74a      	b.n	8000bbe <__udivmoddi4+0x14a>
 8000d28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d2c:	4439      	add	r1, r7
 8000d2e:	e713      	b.n	8000b58 <__udivmoddi4+0xe4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	e724      	b.n	8000b80 <__udivmoddi4+0x10c>
 8000d36:	bf00      	nop

08000d38 <__aeabi_idiv0>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <Flash_Erase>:
//     				===== FLASH_Write =====
//             		:사용자가 지정된 주소의 flash에 지정한 데이타를 저장한다.
//------------------------------------------------------------------------------

void Flash_Erase(uint32_t Address)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  
  uint32_t PageError;
  
  HAL_FLASH_Unlock();
 8000d44:	f003 fffc 	bl	8004d40 <HAL_FLASH_Unlock>
  
  static FLASH_EraseInitTypeDef EraseinitStruct;

  EraseinitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000d48:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <Flash_Erase+0xa8>)
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	611a      	str	r2, [r3, #16]
  
  EraseinitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <Flash_Erase+0xa8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

  EraseinitStruct.Sector = Address;//FLASH_USER_START_ADDR;
 8000d54:	4a23      	ldr	r2, [pc, #140]	; (8000de4 <Flash_Erase+0xa8>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6093      	str	r3, [r2, #8]
  
  EraseinitStruct.NbSectors = 1;//(FLASH_USER_END_ADDR - FLASH_USER_START_ADDR) / FLASH_PAGE_SIZE;
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <Flash_Erase+0xa8>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	60da      	str	r2, [r3, #12]
    
  //HAL_FLASHEx_Erase(&EraseinitStruct, &PageError); 
  if(HAL_FLASHEx_Erase(&EraseinitStruct, &PageError) != HAL_OK)
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	4619      	mov	r1, r3
 8000d66:	481f      	ldr	r0, [pc, #124]	; (8000de4 <Flash_Erase+0xa8>)
 8000d68:	f004 f968 	bl	800503c <HAL_FLASHEx_Erase>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d002      	beq.n	8000d78 <Flash_Erase+0x3c>
  { 
    uint32_t errorcode = HAL_FLASH_GetError();
 8000d72:	f004 f817 	bl	8004da4 <HAL_FLASH_GetError>
 8000d76:	60f8      	str	r0, [r7, #12]
    //return HAL_ERROR;
  }
  
  /* Clear cache for flash */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <Flash_Erase+0xac>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <Flash_Erase+0xac>)
 8000d7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d82:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <Flash_Erase+0xac>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <Flash_Erase+0xac>)
 8000d8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d8e:	6013      	str	r3, [r2, #0]

  __HAL_FLASH_DATA_CACHE_RESET();
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <Flash_Erase+0xac>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <Flash_Erase+0xac>)
 8000d96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <Flash_Erase+0xac>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <Flash_Erase+0xac>)
 8000da2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000da6:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <Flash_Erase+0xac>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <Flash_Erase+0xac>)
 8000dae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <Flash_Erase+0xac>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <Flash_Erase+0xac>)
 8000dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dbe:	6013      	str	r3, [r2, #0]

  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <Flash_Erase+0xac>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <Flash_Erase+0xac>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dca:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <Flash_Erase+0xac>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <Flash_Erase+0xac>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
  
  /* Lock flash control register */
  HAL_FLASH_Lock();
 8000dd8:	f003 ffd4 	bl	8004d84 <HAL_FLASH_Lock>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000003c 	.word	0x2000003c
 8000de8:	40023c00 	.word	0x40023c00

08000dec <Flash_Write>:

void Flash_Write(unsigned int Address, unsigned long long Data)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_FLASH_Unlock();
 8000df8:	f003 ffa2 	bl	8004d40 <HAL_FLASH_Unlock>
  
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data); 
 8000dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e00:	68f9      	ldr	r1, [r7, #12]
 8000e02:	2002      	movs	r0, #2
 8000e04:	f003 ff48 	bl	8004c98 <HAL_FLASH_Program>
  
  HAL_FLASH_Lock();
 8000e08:	f003 ffbc 	bl	8004d84 <HAL_FLASH_Lock>
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <Flash_Read>:
//------------------------------------------------------------------------------
//     				===== FLASH_Read =====
//             		:사용자가 지정된 주소의 데이타를 읽어봐 반환한다.
//------------------------------------------------------------------------------
int Flash_Read(uint32_t Address)
{   
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    return (*(__IO uint32_t*)Address);						// Return data from data register
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	0000      	movs	r0, r0
	...

08000e30 <Get_Motor_RPM>:
#include "PID_form.h"

void Get_Motor_RPM(MOTOR* dst, TIM_TypeDef* TIMx)
{
 8000e30:	b5b0      	push	{r4, r5, r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
      dst->Encoder_Raw = TIMx->CNT;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	461a      	mov	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	605a      	str	r2, [r3, #4]
      
      dst->nowEn= dst->Encoder_Raw;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	e9c1 2304 	strd	r2, r3, [r1, #16]

      dst->Endif = -dst->nowEn + dst->pastEn;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000e60:	1a84      	subs	r4, r0, r2
 8000e62:	eb61 0503 	sbc.w	r5, r1, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	e9c3 4508 	strd	r4, r5, [r3, #32]


      dst->pastEn = dst->nowEn;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	e9c1 2306 	strd	r2, r3, [r1, #24]

      dst->RPM = (60.0 * dst->Endif) / (SAMPLING_TIMER6*PPR);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f7ff fb4f 	bl	8000524 <__aeabi_l2d>
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <Get_Motor_RPM+0x140>)
 8000e8c:	f7ff fb78 	bl	8000580 <__aeabi_dmul>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	a331      	add	r3, pc, #196	; (adr r3, 8000f60 <Get_Motor_RPM+0x130>)
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	f7ff fc99 	bl	80007d4 <__aeabi_ddiv>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fd7b 	bl	80009a4 <__aeabi_d2f>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	631a      	str	r2, [r3, #48]	; 0x30

      dst->Degree += dst->Endif / ((PPR) / 360.0);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fb09 	bl	80004d0 <__aeabi_f2d>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	460d      	mov	r5, r1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff fb2a 	bl	8000524 <__aeabi_l2d>
 8000ed0:	a325      	add	r3, pc, #148	; (adr r3, 8000f68 <Get_Motor_RPM+0x138>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f7ff fc7d 	bl	80007d4 <__aeabi_ddiv>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4620      	mov	r0, r4
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	f7ff f997 	bl	8000214 <__adddf3>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4610      	mov	r0, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	f7ff fd59 	bl	80009a4 <__aeabi_d2f>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	63da      	str	r2, [r3, #60]	; 0x3c


      if(dst->nowEn > 60000)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000efe:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000f02:	f04f 0100 	mov.w	r1, #0
 8000f06:	4290      	cmp	r0, r2
 8000f08:	eb71 0303 	sbcs.w	r3, r1, r3
 8000f0c:	da0b      	bge.n	8000f26 <Get_Motor_RPM+0xf6>
      {
    	  TIMx->CNT=5000;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
    	  dst->pastEn = 5000;
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e9c1 2306 	strd	r2, r3, [r1, #24]
      else if(dst->nowEn < 5000)
      {
    	  TIMx->CNT=60000;
    	  dst->pastEn = 60000;
      }  
}
 8000f24:	e015      	b.n	8000f52 <Get_Motor_RPM+0x122>
      else if(dst->nowEn < 5000)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f2c:	f241 3087 	movw	r0, #4999	; 0x1387
 8000f30:	f04f 0100 	mov.w	r1, #0
 8000f34:	4290      	cmp	r0, r2
 8000f36:	eb71 0303 	sbcs.w	r3, r1, r3
 8000f3a:	db0a      	blt.n	8000f52 <Get_Motor_RPM+0x122>
    	  TIMx->CNT=60000;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
    	  dst->pastEn = 60000;
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	f3af 8000 	nop.w
 8000f60:	47ae147b 	.word	0x47ae147b
 8000f64:	40447ae1 	.word	0x40447ae1
 8000f68:	16c16c17 	.word	0x16c16c17
 8000f6c:	4036c16c 	.word	0x4036c16c
 8000f70:	404e0000 	.word	0x404e0000

08000f74 <MotorData_Init>:
    	  TIMx->CNT=60000;
    	  dst->pastEn = 60000;
      }
}

void MotorData_Init(MOTOR* dst, TIM_TypeDef* TIMx){
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
	TIMx->CNT=5000;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
	dst->Degree=0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	63da      	str	r2, [r3, #60]	; 0x3c
	dst->RPM =0 ;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PID_Control>:

void PID_Control(PID* dst, float target, float input)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b085      	sub	sp, #20
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fae:	edc7 0a01 	vstr	s1, [r7, #4]
   dst->nowValue = input;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	601a      	str	r2, [r3, #0]
   dst->target = target;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	611a      	str	r2, [r3, #16]
   dst->nowError =  dst->nowValue -dst->target ;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	ed93 7a00 	vldr	s14, [r3]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	edc3 7a02 	vstr	s15, [r3, #8]
        
        dst->nowError_int = (int)dst->nowError;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fde:	ee17 2a90 	vmov	r2, s15
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	615a      	str	r2, [r3, #20]
//        
//        
//   dst->errorSum = temp;
        
        
        dst->errorSum += dst->nowError;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	edc3 7a06 	vstr	s15, [r3, #24]

   dst->errorDiff = dst->nowError - dst->pastError;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	edd3 7a03 	vldr	s15, [r3, #12]
 8001008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	edc3 7a08 	vstr	s15, [r3, #32]
        
        
   if(dst->errorSumLimit != 0)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	edd3 7a07 	vldr	s15, [r3, #28]
 8001018:	eef5 7a40 	vcmp.f32	s15, #0.0
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d024      	beq.n	800106c <PID_Control+0xca>
   {
      if(dst->errorSum > dst->errorSumLimit)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	ed93 7a06 	vldr	s14, [r3, #24]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	edd3 7a07 	vldr	s15, [r3, #28]
 800102e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001036:	dd04      	ble.n	8001042 <PID_Control+0xa0>
         dst->errorSum = dst->errorSumLimit;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	69da      	ldr	r2, [r3, #28]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	619a      	str	r2, [r3, #24]
 8001040:	e014      	b.n	800106c <PID_Control+0xca>
      else if(dst->errorSum < -dst->errorSumLimit)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	ed93 7a06 	vldr	s14, [r3, #24]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	edd3 7a07 	vldr	s15, [r3, #28]
 800104e:	eef1 7a67 	vneg.f32	s15, s15
 8001052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105a:	d507      	bpl.n	800106c <PID_Control+0xca>
         dst->errorSum = -dst->errorSumLimit;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001062:	eef1 7a67 	vneg.f32	s15, s15
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	edc3 7a06 	vstr	s15, [r3, #24]
   }
        
       
   dst->nowOutput = 
         dst->kP * dst->nowError +
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	edd3 7a02 	vldr	s15, [r3, #8]
 8001078:	ee27 7a27 	vmul.f32	s14, s14, s15
         dst->kI * dst->errorSum +
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	edd3 7a06 	vldr	s15, [r3, #24]
 8001088:	ee66 7aa7 	vmul.f32	s15, s13, s15
         dst->kP * dst->nowError +
 800108c:	ee37 7a27 	vadd.f32	s14, s14, s15
         dst->kD * dst->errorDiff;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	edd3 7a08 	vldr	s15, [r3, #32]
 800109c:	ee66 7aa7 	vmul.f32	s15, s13, s15
         dst->kI * dst->errorSum +
 80010a0:	ee77 7a27 	vadd.f32	s15, s14, s15
   dst->nowOutput = 
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        
        
        
        
   if(dst->underOfPoint == 0) return;   // Escape Error
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80010b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	d048      	beq.n	800114c <PID_Control+0x1aa>
        
   dst->nowOutput /= dst->underOfPoint;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80010c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
   dst->pastError = dst->nowError;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	60da      	str	r2, [r3, #12]
   
   if(dst->outputLimit != 0)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80010de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e6:	d024      	beq.n	8001132 <PID_Control+0x190>
   {
      if(dst->nowOutput > dst->outputLimit) dst->nowOutput = dst->outputLimit;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80010f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fc:	dd04      	ble.n	8001108 <PID_Control+0x166>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
 8001106:	e014      	b.n	8001132 <PID_Control+0x190>
      else if(dst->nowOutput < -dst->outputLimit) dst->nowOutput = -dst->outputLimit;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001114:	eef1 7a67 	vneg.f32	s15, s15
 8001118:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	d507      	bpl.n	8001132 <PID_Control+0x190>
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001128:	eef1 7a67 	vneg.f32	s15, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
   }

   if(dst->nowError == 0)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	edd3 7a02 	vldr	s15, [r3, #8]
 8001138:	eef5 7a40 	vcmp.f32	s15, #0.0
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	d105      	bne.n	800114e <PID_Control+0x1ac>
   {
	   dst->errorSum = 0;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
 800114a:	e000      	b.n	800114e <PID_Control+0x1ac>
   if(dst->underOfPoint == 0) return;   // Escape Error
 800114c:	bf00      	nop
   }
}
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <PID_Control_FL>:


void PID_Control_FL(PID* dst, float target, float input)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	ed87 0a02 	vstr	s0, [r7, #8]
 8001164:	edc7 0a01 	vstr	s1, [r7, #4]
	dst->nowValue = input;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	601a      	str	r2, [r3, #0]
	dst->target = target;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	611a      	str	r2, [r3, #16]
	dst->nowError =  dst->nowValue -dst->target ;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	ed93 7a00 	vldr	s14, [r3]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edc3 7a02 	vstr	s15, [r3, #8]
        
        dst->nowError_int = (int)dst->nowError;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001194:	ee17 2a90 	vmov	r2, s15
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	615a      	str	r2, [r3, #20]
        
        
        dst->error_Array[dst->error_Array_Cnt] = dst->nowError;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	6892      	ldr	r2, [r2, #8]
 80011a4:	68f9      	ldr	r1, [r7, #12]
 80011a6:	3310      	adds	r3, #16
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	601a      	str	r2, [r3, #0]
        
        dst->error_Array_Cnt++;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	669a      	str	r2, [r3, #104]	; 0x68
        
        if(dst->error_Array_Cnt == ERROR_ARRAY_NUM)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011bc:	2b0a      	cmp	r3, #10
 80011be:	d102      	bne.n	80011c6 <PID_Control_FL+0x6e>
        {
          dst->error_Array_Cnt = 0;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2200      	movs	r2, #0
 80011c4:	669a      	str	r2, [r3, #104]	; 0x68
        }
        
        float temp=0;
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
        
        for(int i=0;i<ERROR_ARRAY_NUM;i++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	e00f      	b.n	80011f2 <PID_Control_FL+0x9a>
        {
          temp += dst->error_Array[i];
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	3310      	adds	r3, #16
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	edd3 7a00 	vldr	s15, [r3]
 80011e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e8:	edc7 7a05 	vstr	s15, [r7, #20]
        for(int i=0;i<ERROR_ARRAY_NUM;i++)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	3301      	adds	r3, #1
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	2b09      	cmp	r3, #9
 80011f6:	ddec      	ble.n	80011d2 <PID_Control_FL+0x7a>
        }
        
        
	dst->errorSum = temp;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	619a      	str	r2, [r3, #24]
        
        
	dst->errorDiff = dst->nowError - dst->pastError;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	ed93 7a02 	vldr	s14, [r3, #8]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	edd3 7a03 	vldr	s15, [r3, #12]
 800120a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	edc3 7a08 	vstr	s15, [r3, #32]
        
        
	if(dst->errorSumLimit != 0)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	edd3 7a07 	vldr	s15, [r3, #28]
 800121a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	d024      	beq.n	800126e <PID_Control_FL+0x116>
	{
		if(dst->errorSum > dst->errorSumLimit)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	ed93 7a06 	vldr	s14, [r3, #24]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	dd04      	ble.n	8001244 <PID_Control_FL+0xec>
			dst->errorSum = dst->errorSumLimit;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	69da      	ldr	r2, [r3, #28]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	619a      	str	r2, [r3, #24]
 8001242:	e014      	b.n	800126e <PID_Control_FL+0x116>
		else if(dst->errorSum < -dst->errorSumLimit)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	ed93 7a06 	vldr	s14, [r3, #24]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001250:	eef1 7a67 	vneg.f32	s15, s15
 8001254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	d507      	bpl.n	800126e <PID_Control_FL+0x116>
			dst->errorSum = -dst->errorSumLimit;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	edd3 7a07 	vldr	s15, [r3, #28]
 8001264:	eef1 7a67 	vneg.f32	s15, s15
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	edc3 7a06 	vstr	s15, [r3, #24]
	}
        
       
	dst->nowOutput = 
			dst->kP * dst->nowError +
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	edd3 7a02 	vldr	s15, [r3, #8]
 800127a:	ee27 7a27 	vmul.f32	s14, s14, s15
			dst->kI * dst->errorSum +
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	edd3 7a06 	vldr	s15, [r3, #24]
 800128a:	ee66 7aa7 	vmul.f32	s15, s13, s15
			dst->kP * dst->nowError +
 800128e:	ee37 7a27 	vadd.f32	s14, s14, s15
			dst->kD * dst->errorDiff;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	edd3 7a08 	vldr	s15, [r3, #32]
 800129e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			dst->kI * dst->errorSum +
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
	dst->nowOutput = 
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        
        
        
        
	if(dst->underOfPoint == 0) return;	// Escape Error
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80012b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d048      	beq.n	800134e <PID_Control_FL+0x1f6>
        
	dst->nowOutput /= dst->underOfPoint;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80012c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	dst->pastError = dst->nowError;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	60da      	str	r2, [r3, #12]
	
	if(dst->outputLimit != 0)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80012e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e8:	d024      	beq.n	8001334 <PID_Control_FL+0x1dc>
	{
		if(dst->nowOutput > dst->outputLimit) dst->nowOutput = dst->outputLimit;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80012f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	dd04      	ble.n	800130a <PID_Control_FL+0x1b2>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	625a      	str	r2, [r3, #36]	; 0x24
 8001308:	e014      	b.n	8001334 <PID_Control_FL+0x1dc>
		else if(dst->nowOutput < -dst->outputLimit) dst->nowOutput = -dst->outputLimit;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001316:	eef1 7a67 	vneg.f32	s15, s15
 800131a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	d507      	bpl.n	8001334 <PID_Control_FL+0x1dc>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800132a:	eef1 7a67 	vneg.f32	s15, s15
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	}

	if(dst->nowError == 0)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	edd3 7a02 	vldr	s15, [r3, #8]
 800133a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	d105      	bne.n	8001350 <PID_Control_FL+0x1f8>
	{
		dst->errorSum = 0;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
 800134c:	e000      	b.n	8001350 <PID_Control_FL+0x1f8>
	if(dst->underOfPoint == 0) return;	// Escape Error
 800134e:	bf00      	nop
	}
}
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001362:	463b      	mov	r3, r7
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800136e:	4b36      	ldr	r3, [pc, #216]	; (8001448 <MX_ADC1_Init+0xec>)
 8001370:	4a36      	ldr	r2, [pc, #216]	; (800144c <MX_ADC1_Init+0xf0>)
 8001372:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <MX_ADC1_Init+0xec>)
 8001376:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800137a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800137c:	4b32      	ldr	r3, [pc, #200]	; (8001448 <MX_ADC1_Init+0xec>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001382:	4b31      	ldr	r3, [pc, #196]	; (8001448 <MX_ADC1_Init+0xec>)
 8001384:	2201      	movs	r2, #1
 8001386:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001388:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <MX_ADC1_Init+0xec>)
 800138a:	2201      	movs	r2, #1
 800138c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <MX_ADC1_Init+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001396:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <MX_ADC1_Init+0xec>)
 8001398:	2200      	movs	r2, #0
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <MX_ADC1_Init+0xec>)
 800139e:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <MX_ADC1_Init+0xf4>)
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <MX_ADC1_Init+0xec>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <MX_ADC1_Init+0xec>)
 80013aa:	2204      	movs	r2, #4
 80013ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <MX_ADC1_Init+0xec>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <MX_ADC1_Init+0xec>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013bc:	4822      	ldr	r0, [pc, #136]	; (8001448 <MX_ADC1_Init+0xec>)
 80013be:	f002 fbd1 	bl	8003b64 <HAL_ADC_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013c8:	f001 fabe 	bl	8002948 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013cc:	2302      	movs	r3, #2
 80013ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80013d4:	2306      	movs	r3, #6
 80013d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d8:	463b      	mov	r3, r7
 80013da:	4619      	mov	r1, r3
 80013dc:	481a      	ldr	r0, [pc, #104]	; (8001448 <MX_ADC1_Init+0xec>)
 80013de:	f002 fd29 	bl	8003e34 <HAL_ADC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013e8:	f001 faae 	bl	8002948 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013ec:	2303      	movs	r3, #3
 80013ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	4813      	ldr	r0, [pc, #76]	; (8001448 <MX_ADC1_Init+0xec>)
 80013fa:	f002 fd1b 	bl	8003e34 <HAL_ADC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001404:	f001 faa0 	bl	8002948 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800140c:	2303      	movs	r3, #3
 800140e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <MX_ADC1_Init+0xec>)
 800141a:	f002 fd0b 	bl	8003e34 <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001424:	f001 fa90 	bl	8002948 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8001428:	2304      	movs	r3, #4
 800142a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_ADC1_Init+0xec>)
 8001432:	f002 fcff 	bl	8003e34 <HAL_ADC_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800143c:	f001 fa84 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000358 	.word	0x20000358
 800144c:	40012000 	.word	0x40012000
 8001450:	0f000001 	.word	0x0f000001

08001454 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800145a:	463b      	mov	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001466:	4b21      	ldr	r3, [pc, #132]	; (80014ec <MX_ADC2_Init+0x98>)
 8001468:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <MX_ADC2_Init+0x9c>)
 800146a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <MX_ADC2_Init+0x98>)
 800146e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001472:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <MX_ADC2_Init+0x98>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_ADC2_Init+0x98>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_ADC2_Init+0x98>)
 8001482:	2201      	movs	r2, #1
 8001484:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <MX_ADC2_Init+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_ADC2_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_ADC2_Init+0x98>)
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <MX_ADC2_Init+0xa0>)
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_ADC2_Init+0x98>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_ADC2_Init+0x98>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_ADC2_Init+0x98>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_ADC2_Init+0x98>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_ADC2_Init+0x98>)
 80014b6:	f002 fb55 	bl	8003b64 <HAL_ADC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80014c0:	f001 fa42 	bl	8002948 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014c4:	2304      	movs	r3, #4
 80014c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_ADC2_Init+0x98>)
 80014d6:	f002 fcad 	bl	8003e34 <HAL_ADC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80014e0:	f001 fa32 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000310 	.word	0x20000310
 80014f0:	40012100 	.word	0x40012100
 80014f4:	0f000001 	.word	0x0f000001

080014f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a46      	ldr	r2, [pc, #280]	; (8001630 <HAL_ADC_MspInit+0x138>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d158      	bne.n	80015cc <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	4b45      	ldr	r3, [pc, #276]	; (8001634 <HAL_ADC_MspInit+0x13c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a44      	ldr	r2, [pc, #272]	; (8001634 <HAL_ADC_MspInit+0x13c>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b42      	ldr	r3, [pc, #264]	; (8001634 <HAL_ADC_MspInit+0x13c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	4b3e      	ldr	r3, [pc, #248]	; (8001634 <HAL_ADC_MspInit+0x13c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a3d      	ldr	r2, [pc, #244]	; (8001634 <HAL_ADC_MspInit+0x13c>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <HAL_ADC_MspInit+0x13c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001552:	230f      	movs	r3, #15
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001556:	2303      	movs	r3, #3
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4619      	mov	r1, r3
 8001564:	4834      	ldr	r0, [pc, #208]	; (8001638 <HAL_ADC_MspInit+0x140>)
 8001566:	f003 fe8b 	bl	8005280 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800156a:	4b34      	ldr	r3, [pc, #208]	; (800163c <HAL_ADC_MspInit+0x144>)
 800156c:	4a34      	ldr	r2, [pc, #208]	; (8001640 <HAL_ADC_MspInit+0x148>)
 800156e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001570:	4b32      	ldr	r3, [pc, #200]	; (800163c <HAL_ADC_MspInit+0x144>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001576:	4b31      	ldr	r3, [pc, #196]	; (800163c <HAL_ADC_MspInit+0x144>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <HAL_ADC_MspInit+0x144>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <HAL_ADC_MspInit+0x144>)
 8001584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001588:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800158a:	4b2c      	ldr	r3, [pc, #176]	; (800163c <HAL_ADC_MspInit+0x144>)
 800158c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001590:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <HAL_ADC_MspInit+0x144>)
 8001594:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001598:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_ADC_MspInit+0x144>)
 800159c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <HAL_ADC_MspInit+0x144>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_ADC_MspInit+0x144>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015ae:	4823      	ldr	r0, [pc, #140]	; (800163c <HAL_ADC_MspInit+0x144>)
 80015b0:	f003 f802 	bl	80045b8 <HAL_DMA_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80015ba:	f001 f9c5 	bl	8002948 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a1e      	ldr	r2, [pc, #120]	; (800163c <HAL_ADC_MspInit+0x144>)
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_ADC_MspInit+0x144>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80015ca:	e02c      	b.n	8001626 <HAL_ADC_MspInit+0x12e>
  else if(adcHandle->Instance==ADC2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <HAL_ADC_MspInit+0x14c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d127      	bne.n	8001626 <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_ADC_MspInit+0x13c>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <HAL_ADC_MspInit+0x13c>)
 80015e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e4:	6453      	str	r3, [r2, #68]	; 0x44
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_ADC_MspInit+0x13c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_ADC_MspInit+0x13c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_ADC_MspInit+0x13c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_ADC_MspInit+0x13c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800160e:	2330      	movs	r3, #48	; 0x30
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001612:	2303      	movs	r3, #3
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <HAL_ADC_MspInit+0x140>)
 8001622:	f003 fe2d 	bl	8005280 <HAL_GPIO_Init>
}
 8001626:	bf00      	nop
 8001628:	3730      	adds	r7, #48	; 0x30
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40012000 	.word	0x40012000
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000
 800163c:	200003a0 	.word	0x200003a0
 8001640:	40026410 	.word	0x40026410
 8001644:	40012100 	.word	0x40012100

08001648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <__NVIC_GetPriorityGrouping+0x18>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0307 	and.w	r3, r3, #7
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db0b      	blt.n	800168e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	4907      	ldr	r1, [pc, #28]	; (800169c <__NVIC_EnableIRQ+0x38>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	2001      	movs	r0, #1
 8001686:	fa00 f202 	lsl.w	r2, r0, r2
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e100 	.word	0xe000e100

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001768:	4907      	ldr	r1, [pc, #28]	; (8001788 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4013      	ands	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	40023800 	.word	0x40023800

0800178c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8001790:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001794:	f7ff ffe2 	bl	800175c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001798:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800179c:	f7ff ffde 	bl	800175c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017a0:	f7ff ff52 	bl	8001648 <__NVIC_GetPriorityGrouping>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ffa2 	bl	80016f4 <NVIC_EncodePriority>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4619      	mov	r1, r3
 80017b4:	200c      	movs	r0, #12
 80017b6:	f7ff ff73 	bl	80016a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017ba:	200c      	movs	r0, #12
 80017bc:	f7ff ff52 	bl	8001664 <__NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	2038      	movs	r0, #56	; 0x38
 80017c6:	f002 fec0 	bl	800454a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017ca:	2038      	movs	r0, #56	; 0x38
 80017cc:	f002 fed9 	bl	8004582 <HAL_NVIC_EnableIRQ>

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b3d      	ldr	r3, [pc, #244]	; (80018e4 <MX_GPIO_Init+0x110>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a3c      	ldr	r2, [pc, #240]	; (80018e4 <MX_GPIO_Init+0x110>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <MX_GPIO_Init+0x110>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <MX_GPIO_Init+0x110>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a35      	ldr	r2, [pc, #212]	; (80018e4 <MX_GPIO_Init+0x110>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <MX_GPIO_Init+0x110>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <MX_GPIO_Init+0x110>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a2e      	ldr	r2, [pc, #184]	; (80018e4 <MX_GPIO_Init+0x110>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b2c      	ldr	r3, [pc, #176]	; (80018e4 <MX_GPIO_Init+0x110>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <MX_GPIO_Init+0x110>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a27      	ldr	r2, [pc, #156]	; (80018e4 <MX_GPIO_Init+0x110>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <MX_GPIO_Init+0x110>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Module_LED_GPIO_Port, Module_LED_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2104      	movs	r1, #4
 800185e:	4822      	ldr	r0, [pc, #136]	; (80018e8 <MX_GPIO_Init+0x114>)
 8001860:	f003 fea2 	bl	80055a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2108      	movs	r1, #8
 8001868:	4820      	ldr	r0, [pc, #128]	; (80018ec <MX_GPIO_Init+0x118>)
 800186a:	f003 fe9d 	bl	80055a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LeadSwitch_FL1_Pin|LeadSwitch_FL0_Pin|LeadSwitch_FL2_Pin;
 800186e:	f246 0308 	movw	r3, #24584	; 0x6008
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	481b      	ldr	r0, [pc, #108]	; (80018f0 <MX_GPIO_Init+0x11c>)
 8001884:	f003 fcfc 	bl	8005280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LeadSwitch_FL3_Pin;
 8001888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeadSwitch_FL3_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4813      	ldr	r0, [pc, #76]	; (80018ec <MX_GPIO_Init+0x118>)
 800189e:	f003 fcef 	bl	8005280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Module_LED_Pin;
 80018a2:	2304      	movs	r3, #4
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Module_LED_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <MX_GPIO_Init+0x114>)
 80018ba:	f003 fce1 	bl	8005280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018be:	2308      	movs	r3, #8
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_GPIO_Init+0x118>)
 80018d6:	f003 fcd3 	bl	8005280 <HAL_GPIO_Init>

}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020c00 	.word	0x40020c00
 80018ec:	40020400 	.word	0x40020400
 80018f0:	40020800 	.word	0x40020800

080018f4 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80018fe:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <LL_DMA_EnableStream+0x3c>)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	4413      	add	r3, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4908      	ldr	r1, [pc, #32]	; (8001930 <LL_DMA_EnableStream+0x3c>)
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	440a      	add	r2, r1
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	4611      	mov	r1, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	440a      	add	r2, r1
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6013      	str	r3, [r2, #0]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	080084dc 	.word	0x080084dc

08001934 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <LL_DMA_SetDataLength+0x44>)
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	4413      	add	r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4413      	add	r3, r2
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0c1b      	lsrs	r3, r3, #16
 8001952:	041b      	lsls	r3, r3, #16
 8001954:	4908      	ldr	r1, [pc, #32]	; (8001978 <LL_DMA_SetDataLength+0x44>)
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	440a      	add	r2, r1
 800195a:	7812      	ldrb	r2, [r2, #0]
 800195c:	4611      	mov	r1, r2
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	440a      	add	r2, r1
 8001962:	4611      	mov	r1, r2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	080084dc 	.word	0x080084dc

0800197c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <LL_DMA_SetMemoryAddress+0x2c>)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	4413      	add	r3, r2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4413      	add	r3, r2
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	080084dc 	.word	0x080084dc

080019ac <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80019b8:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <LL_DMA_SetPeriphAddress+0x2c>)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	4413      	add	r3, r2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4413      	add	r3, r2
 80019c6:	461a      	mov	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6093      	str	r3, [r2, #8]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	080084dc 	.word	0x080084dc

080019dc <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	330c      	adds	r3, #12
 80019e8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	e853 3f00 	ldrex	r3, [r3]
 80019f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f043 0310 	orr.w	r3, r3, #16
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	330c      	adds	r3, #12
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	61ba      	str	r2, [r7, #24]
 8001a02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a04:	6979      	ldr	r1, [r7, #20]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	e841 2300 	strex	r3, r2, [r1]
 8001a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1e7      	bne.n	80019e4 <LL_USART_EnableIT_IDLE+0x8>
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b089      	sub	sp, #36	; 0x24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3314      	adds	r3, #20
 8001a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	e853 3f00 	ldrex	r3, [r3]
 8001a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3314      	adds	r3, #20
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	61ba      	str	r2, [r7, #24]
 8001a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a4a:	6979      	ldr	r1, [r7, #20]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	e841 2300 	strex	r3, r2, [r1]
 8001a52:	613b      	str	r3, [r7, #16]
   return(result);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1e7      	bne.n	8001a2a <LL_USART_EnableDMAReq_RX+0x8>
}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	3724      	adds	r7, #36	; 0x24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a6e:	f002 f807 	bl	8003a80 <HAL_Init>

  /* USER CODE BEGIN Init */
  //initSerialLine(&serialLine, 1, (uint8_t*)&fc, sizeof(fc), USART3);
  initSerialLine(&serialLine, 2, (uint8_t*)&tc, sizeof(tc), USART3);
 8001a72:	4b41      	ldr	r3, [pc, #260]	; (8001b78 <main+0x110>)
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2330      	movs	r3, #48	; 0x30
 8001a78:	4a40      	ldr	r2, [pc, #256]	; (8001b7c <main+0x114>)
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	4840      	ldr	r0, [pc, #256]	; (8001b80 <main+0x118>)
 8001a7e:	f006 f8a7 	bl	8007bd0 <initSerialLine>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a82:	f000 f89d 	bl	8001bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a86:	f7ff fea5 	bl	80017d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001a8a:	f001 f8f7 	bl	8002c7c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a8e:	f001 f94d 	bl	8002d2c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a92:	f001 f99f 	bl	8002dd4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a96:	f001 fa17 	bl	8002ec8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001a9a:	f001 fa69 	bl	8002f70 <MX_TIM6_Init>
  MX_DMA_Init();
 8001a9e:	f7ff fe75 	bl	800178c <MX_DMA_Init>
  MX_TIM8_Init();
 8001aa2:	f001 fad1 	bl	8003048 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001aa6:	f001 ff17 	bl	80038d8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001aaa:	f7ff fc57 	bl	800135c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001aae:	f7ff fcd1 	bl	8001454 <MX_ADC2_Init>
  MX_TIM7_Init();
 8001ab2:	f001 fa93 	bl	8002fdc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_1, rxBuffer);
 8001ab6:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <main+0x11c>)
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2101      	movs	r1, #1
 8001abc:	4832      	ldr	r0, [pc, #200]	; (8001b88 <main+0x120>)
 8001abe:	f7ff ff5d 	bl	800197c <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_1, &USART3->DR);
 8001ac2:	4a32      	ldr	r2, [pc, #200]	; (8001b8c <main+0x124>)
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4830      	ldr	r0, [pc, #192]	; (8001b88 <main+0x120>)
 8001ac8:	f7ff ff70 	bl	80019ac <LL_DMA_SetPeriphAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_1, RX_BUFFER_SIZE);
 8001acc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	482d      	ldr	r0, [pc, #180]	; (8001b88 <main+0x120>)
 8001ad4:	f7ff ff2e 	bl	8001934 <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	482b      	ldr	r0, [pc, #172]	; (8001b88 <main+0x120>)
 8001adc:	f7ff ff0a 	bl	80018f4 <LL_DMA_EnableStream>
  LL_USART_EnableDMAReq_RX(USART3);
 8001ae0:	4825      	ldr	r0, [pc, #148]	; (8001b78 <main+0x110>)
 8001ae2:	f7ff ff9e 	bl	8001a22 <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableIT_IDLE(USART3);
 8001ae6:	4824      	ldr	r0, [pc, #144]	; (8001b78 <main+0x110>)
 8001ae8:	f7ff ff78 	bl	80019dc <LL_USART_EnableIT_IDLE>


  HAL_TIM_Base_Start_IT(&htim6);
 8001aec:	4828      	ldr	r0, [pc, #160]	; (8001b90 <main+0x128>)
 8001aee:	f004 fb63 	bl	80061b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7); //1ms
 8001af2:	4828      	ldr	r0, [pc, #160]	; (8001b94 <main+0x12c>)
 8001af4:	f004 fb60 	bl	80061b8 <HAL_TIM_Base_Start_IT>

//  HAL_ADCEx_Calibration_Start(&hadc1, 10);
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)current_buffer, 2);
 8001af8:	2202      	movs	r2, #2
 8001afa:	4927      	ldr	r1, [pc, #156]	; (8001b98 <main+0x130>)
 8001afc:	4827      	ldr	r0, [pc, #156]	; (8001b9c <main+0x134>)
 8001afe:	f002 f875 	bl	8003bec <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, 2);
 8001b02:	2202      	movs	r2, #2
 8001b04:	4926      	ldr	r1, [pc, #152]	; (8001ba0 <main+0x138>)
 8001b06:	4827      	ldr	r0, [pc, #156]	; (8001ba4 <main+0x13c>)
 8001b08:	f002 f870 	bl	8003bec <HAL_ADC_Start_DMA>




  //Flipper0 --> Flipper Back
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);			//PA7
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	4826      	ldr	r0, [pc, #152]	; (8001ba8 <main+0x140>)
 8001b10:	f004 fc12 	bl	8006338 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);	//PA15 PB9
 8001b14:	213c      	movs	r1, #60	; 0x3c
 8001b16:	4825      	ldr	r0, [pc, #148]	; (8001bac <main+0x144>)
 8001b18:	f004 fd7c 	bl	8006614 <HAL_TIM_Encoder_Start>

  //Flipper1
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);			//PA6
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4822      	ldr	r0, [pc, #136]	; (8001ba8 <main+0x140>)
 8001b20:	f004 fc0a 	bl	8006338 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);	//PA8 PA9
 8001b24:	213c      	movs	r1, #60	; 0x3c
 8001b26:	4822      	ldr	r0, [pc, #136]	; (8001bb0 <main+0x148>)
 8001b28:	f004 fd74 	bl	8006614 <HAL_TIM_Encoder_Start>

  //Flipper2
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);			//PB0
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	481e      	ldr	r0, [pc, #120]	; (8001ba8 <main+0x140>)
 8001b30:	f004 fc02 	bl	8006338 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//PB6 PB7
 8001b34:	213c      	movs	r1, #60	; 0x3c
 8001b36:	481f      	ldr	r0, [pc, #124]	; (8001bb4 <main+0x14c>)
 8001b38:	f004 fd6c 	bl	8006614 <HAL_TIM_Encoder_Start>

  //Flipper4
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);			//PB1
 8001b3c:	210c      	movs	r1, #12
 8001b3e:	481a      	ldr	r0, [pc, #104]	; (8001ba8 <main+0x140>)
 8001b40:	f004 fbfa 	bl	8006338 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);	//PC6 PC7
 8001b44:	213c      	movs	r1, #60	; 0x3c
 8001b46:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <main+0x150>)
 8001b48:	f004 fd64 	bl	8006614 <HAL_TIM_Encoder_Start>


//  HAL_TIM_Base_Start_IT(&htim4);


  motorInit();
 8001b4c:	f000 f98c 	bl	8001e68 <motorInit>
  pidInit();
 8001b50:	f000 f9b4 	bl	8001ebc <pidInit>

  TIM3->CCR1 = 500;
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <main+0x154>)
 8001b56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b5a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 500;
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <main+0x154>)
 8001b5e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b62:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 500;
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <main+0x154>)
 8001b66:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->CCR4 = 500;
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <main+0x154>)
 8001b6e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <main+0x10c>
 8001b76:	bf00      	nop
 8001b78:	40004800 	.word	0x40004800
 8001b7c:	200009d0 	.word	0x200009d0
 8001b80:	200005a4 	.word	0x200005a4
 8001b84:	20000d58 	.word	0x20000d58
 8001b88:	40026000 	.word	0x40026000
 8001b8c:	40004804 	.word	0x40004804
 8001b90:	20001230 	.word	0x20001230
 8001b94:	20001308 	.word	0x20001308
 8001b98:	200010e4 	.word	0x200010e4
 8001b9c:	20000310 	.word	0x20000310
 8001ba0:	20000d50 	.word	0x20000d50
 8001ba4:	20000358 	.word	0x20000358
 8001ba8:	200011e8 	.word	0x200011e8
 8001bac:	200012c0 	.word	0x200012c0
 8001bb0:	20001278 	.word	0x20001278
 8001bb4:	200011a0 	.word	0x200011a0
 8001bb8:	20001158 	.word	0x20001158
 8001bbc:	40000400 	.word	0x40000400

08001bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b094      	sub	sp, #80	; 0x50
 8001bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	2234      	movs	r2, #52	; 0x34
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f006 fb70 	bl	80082b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <SystemClock_Config+0xdc>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	4a2b      	ldr	r2, [pc, #172]	; (8001c9c <SystemClock_Config+0xdc>)
 8001bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf4:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <SystemClock_Config+0xdc>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c00:	2300      	movs	r3, #0
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <SystemClock_Config+0xe0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <SystemClock_Config+0xe0>)
 8001c0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <SystemClock_Config+0xe0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c20:	2301      	movs	r3, #1
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c24:	2310      	movs	r3, #16
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c30:	2308      	movs	r3, #8
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001c34:	23b4      	movs	r3, #180	; 0xb4
 8001c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c40:	2302      	movs	r3, #2
 8001c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 ffc7 	bl	8005bdc <HAL_RCC_OscConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c54:	f000 fe78 	bl	8002948 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c58:	f003 fcda 	bl	8005610 <HAL_PWREx_EnableOverDrive>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c62:	f000 fe71 	bl	8002948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c66:	230f      	movs	r3, #15
 8001c68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c7e:	f107 0308 	add.w	r3, r7, #8
 8001c82:	2105      	movs	r1, #5
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fd13 	bl	80056b0 <HAL_RCC_ClockConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c90:	f000 fe5a 	bl	8002948 <Error_Handler>
  }
}
 8001c94:	bf00      	nop
 8001c96:	3750      	adds	r7, #80	; 0x50
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40007000 	.word	0x40007000

08001ca4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6)    //1ms
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a55      	ldr	r2, [pc, #340]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	f040 8089 	bne.w	8001dca <HAL_TIM_PeriodElapsedCallback+0x126>
	{
		tim6_cnt++;
 8001cb8:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	4a53      	ldr	r2, [pc, #332]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001cc0:	6013      	str	r3, [r2, #0]
//		setRPM(&motor_BASE_R, Target);
//		Get_Motor_RPM_BASE(&motor_BASE_R, TIM3);
//		PID_Control(&pidVel_BASE_R, motor_BASE_R.TargetRPM, motor_BASE_R.RPM);
//		setDuty(&motor_BASE_R, pidVel_BASE_R.nowOutput);

		switch(MODE)
 8001cc2:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d850      	bhi.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0xc8>
 8001cca:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001d03 	.word	0x08001d03
 8001cd8:	08001d6d 	.word	0x08001d6d
 8001cdc:	08001d47 	.word	0x08001d47
		{
		case MODE_PWM:
		{
			TIM3->CCR1 = FL_Duty[0];
 8001ce0:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b4c      	ldr	r3, [pc, #304]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001ce6:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = FL_Duty[1];
 8001ce8:	4b4a      	ldr	r3, [pc, #296]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	4b4a      	ldr	r3, [pc, #296]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = FL_Duty[2];
 8001cf0:	4b48      	ldr	r3, [pc, #288]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	4b48      	ldr	r3, [pc, #288]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001cf6:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3->CCR4 = FL_Duty[3];
 8001cf8:	4b46      	ldr	r3, [pc, #280]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	4b46      	ldr	r3, [pc, #280]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40

			break;
 8001d00:	e034      	b.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0xc8>
		}
		case MODE_MOTOR_INIT:
		{
			TIM3->CCR1 = 500;
 8001d02:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001d04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 500;
 8001d0a:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001d0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = 500;
 8001d12:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001d14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d18:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3->CCR4 = 500;
 8001d1a:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001d1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40

			MotorData_Init(&motor_FL0, TIM2);
 8001d22:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d26:	483d      	ldr	r0, [pc, #244]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001d28:	f7ff f924 	bl	8000f74 <MotorData_Init>
			MotorData_Init(&motor_FL1, TIM1);
 8001d2c:	493c      	ldr	r1, [pc, #240]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001d2e:	483d      	ldr	r0, [pc, #244]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001d30:	f7ff f920 	bl	8000f74 <MotorData_Init>
			MotorData_Init(&motor_FL2, TIM4);
 8001d34:	493c      	ldr	r1, [pc, #240]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001d36:	483d      	ldr	r0, [pc, #244]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001d38:	f7ff f91c 	bl	8000f74 <MotorData_Init>
			MotorData_Init(&motor_FL3, TIM8);
 8001d3c:	493c      	ldr	r1, [pc, #240]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001d3e:	483d      	ldr	r0, [pc, #244]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001d40:	f7ff f918 	bl	8000f74 <MotorData_Init>

			break;
 8001d44:	e012      	b.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0xc8>

			break;
		}
		case MODE_FLASH:
		{
			if(Flash_Flag == 1)
 8001d46:	4b3c      	ldr	r3, [pc, #240]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_TIM_PeriodElapsedCallback+0xba>
			{
				Set_FlashData();
 8001d4e:	f000 fa57 	bl	8002200 <Set_FlashData>
				Write_FlashData();
 8001d52:	f000 fd69 	bl	8002828 <Write_FlashData>
				Flash_Flag = 0;
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
			}
			else if(Flash_Flag == 2)
			{
				Read_FlashData();
			}
			break;
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_PeriodElapsedCallback+0xc6>
			else if(Flash_Flag == 2)
 8001d5e:	4b36      	ldr	r3, [pc, #216]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d101      	bne.n	8001d6a <HAL_TIM_PeriodElapsedCallback+0xc6>
				Read_FlashData();
 8001d66:	f000 f9d5 	bl	8002114 <Read_FlashData>
			break;
 8001d6a:	bf00      	nop
		}
		}


		if(test==0)
 8001d6c:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d121      	bne.n	8001db8 <HAL_TIM_PeriodElapsedCallback+0x114>
		{
			Get_Motor_RPM(&motor_FL2, TIM2);
 8001d74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d78:	482c      	ldr	r0, [pc, #176]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001d7a:	f7ff f859 	bl	8000e30 <Get_Motor_RPM>
			RPM_filter(motor_FL2.RPM);
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001d80:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001d84:	eeb0 0a67 	vmov.f32	s0, s15
 8001d88:	f000 f97e 	bl	8002088 <RPM_filter>
			PID_Control(&pidVel_FL2, pidPos_FL2.nowOutput, motor_FL2.realRPM);
 8001d8c:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001d8e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001d94:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001d98:	eef0 0a47 	vmov.f32	s1, s14
 8001d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001da0:	4828      	ldr	r0, [pc, #160]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001da2:	f7ff f8fe 	bl	8000fa2 <PID_Control>
			setDuty(&motor_FL2, pidVel_FL2.nowOutput);
 8001da6:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001da8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001dac:	eeb0 0a67 	vmov.f32	s0, s15
 8001db0:	481e      	ldr	r0, [pc, #120]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001db2:	f000 f8f3 	bl	8001f9c <setDuty>
 8001db6:	e008      	b.n	8001dca <HAL_TIM_PeriodElapsedCallback+0x126>
		}

		else if(test == 1)
 8001db8:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d104      	bne.n	8001dca <HAL_TIM_PeriodElapsedCallback+0x126>
		{

			Get_Motor_RPM(&motor_FL2, TIM2);
 8001dc0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dc4:	4819      	ldr	r0, [pc, #100]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001dc6:	f7ff f833 	bl	8000e30 <Get_Motor_RPM>
		}


	}

	if (htim->Instance == TIM7)    //10ms
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d115      	bne.n	8001e00 <HAL_TIM_PeriodElapsedCallback+0x15c>
	{
		tim7_cnt++;
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001ddc:	6013      	str	r3, [r2, #0]
		if(test==0)
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10c      	bne.n	8001e00 <HAL_TIM_PeriodElapsedCallback+0x15c>
		{
			PID_Control_FL(&pidPos_FL2, Target_Pos_FL, motor_FL2.Degree);
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001dee:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001df2:	eef0 0a47 	vmov.f32	s1, s14
 8001df6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfa:	4811      	ldr	r0, [pc, #68]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001dfc:	f7ff f9ac 	bl	8001158 <PID_Control_FL>
		}

	}
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40001000 	.word	0x40001000
 8001e0c:	20000054 	.word	0x20000054
 8001e10:	20000050 	.word	0x20000050
 8001e14:	20000000 	.word	0x20000000
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	20000f98 	.word	0x20000f98
 8001e20:	40010000 	.word	0x40010000
 8001e24:	20000a00 	.word	0x20000a00
 8001e28:	40000800 	.word	0x40000800
 8001e2c:	200004c8 	.word	0x200004c8
 8001e30:	40010400 	.word	0x40010400
 8001e34:	20000400 	.word	0x20000400
 8001e38:	2000008c 	.word	0x2000008c
 8001e3c:	20000088 	.word	0x20000088
 8001e40:	20000b48 	.word	0x20000b48
 8001e44:	20000bb4 	.word	0x20000bb4
 8001e48:	40001400 	.word	0x40001400
 8001e4c:	20000058 	.word	0x20000058
 8001e50:	20000830 	.word	0x20000830

08001e54 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
//	if(hadc->Instance == hadc2.Instance)
//	{
////		HAL_ADC_Start_DMA(&hadc2, (uint32_t *)current_buffer, 2);
//		cnt_adc2++;
//	}
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <motorInit>:

//-----------------------------------------------------------------------------------------------------------

void motorInit(){
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
	motor_FL0.MotorNum = 0;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <motorInit+0x38>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
	motor_FL1.MotorNum = 1;
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <motorInit+0x3c>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
	motor_FL2.MotorNum = 2;
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <motorInit+0x40>)
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	601a      	str	r2, [r3, #0]
	motor_FL3.MotorNum = 3;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <motorInit+0x44>)
 8001e80:	2203      	movs	r2, #3
 8001e82:	601a      	str	r2, [r3, #0]

	motor_BASE_L.MotorNum = 4;
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <motorInit+0x48>)
 8001e86:	2204      	movs	r2, #4
 8001e88:	601a      	str	r2, [r3, #0]
	motor_BASE_R.MotorNum = 5;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <motorInit+0x4c>)
 8001e8c:	2205      	movs	r2, #5
 8001e8e:	601a      	str	r2, [r3, #0]
	motor_BASE_R.maxRPM = 50;
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <motorInit+0x4c>)
 8001e92:	4a09      	ldr	r2, [pc, #36]	; (8001eb8 <motorInit+0x50>)
 8001e94:	64da      	str	r2, [r3, #76]	; 0x4c

}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	20000f98 	.word	0x20000f98
 8001ea4:	20000a00 	.word	0x20000a00
 8001ea8:	200004c8 	.word	0x200004c8
 8001eac:	20000400 	.word	0x20000400
 8001eb0:	20000c20 	.word	0x20000c20
 8001eb4:	20000978 	.word	0x20000978
 8001eb8:	42480000 	.word	0x42480000

08001ebc <pidInit>:

void pidInit(){
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
	pidVel_BASE_R.underOfPoint=200;
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <pidInit+0xa8>)
 8001ec2:	4a29      	ldr	r2, [pc, #164]	; (8001f68 <pidInit+0xac>)
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
	pidVel_BASE_R.outputLimit=200;
 8001ec6:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <pidInit+0xa8>)
 8001ec8:	4a27      	ldr	r2, [pc, #156]	; (8001f68 <pidInit+0xac>)
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
	pidVel_BASE_R.errorSumLimit=1000;
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <pidInit+0xa8>)
 8001ece:	4a27      	ldr	r2, [pc, #156]	; (8001f6c <pidInit+0xb0>)
 8001ed0:	61da      	str	r2, [r3, #28]
	pidVel_BASE_R.kP=10000;
 8001ed2:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <pidInit+0xa8>)
 8001ed4:	4a26      	ldr	r2, [pc, #152]	; (8001f70 <pidInit+0xb4>)
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34
	pidVel_BASE_R.kI=10;
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <pidInit+0xa8>)
 8001eda:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <pidInit+0xb8>)
 8001edc:	639a      	str	r2, [r3, #56]	; 0x38
	pidVel_BASE_R.kD=0;
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <pidInit+0xa8>)
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	63da      	str	r2, [r3, #60]	; 0x3c

	pidVel_BASE_L.underOfPoint=200;
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <pidInit+0xbc>)
 8001ee8:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <pidInit+0xac>)
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
	pidVel_BASE_L.outputLimit=200;
 8001eec:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <pidInit+0xbc>)
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <pidInit+0xac>)
 8001ef0:	62da      	str	r2, [r3, #44]	; 0x2c
	pidVel_BASE_L.errorSumLimit=1000;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <pidInit+0xbc>)
 8001ef4:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <pidInit+0xb0>)
 8001ef6:	61da      	str	r2, [r3, #28]
	pidVel_BASE_L.kP=10000;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <pidInit+0xbc>)
 8001efa:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <pidInit+0xb4>)
 8001efc:	635a      	str	r2, [r3, #52]	; 0x34
	pidVel_BASE_L.kI=10;
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <pidInit+0xbc>)
 8001f00:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <pidInit+0xb8>)
 8001f02:	639a      	str	r2, [r3, #56]	; 0x38
	pidVel_BASE_L.kD=0;
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <pidInit+0xbc>)
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c

	pidVel_FL2.underOfPoint=100;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <pidInit+0xc0>)
 8001f0e:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <pidInit+0xc4>)
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
	pidVel_FL2.outputLimit=200;
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <pidInit+0xc0>)
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <pidInit+0xac>)
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c
	pidVel_FL2.errorSumLimit=3000;
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <pidInit+0xc0>)
 8001f1a:	4a1a      	ldr	r2, [pc, #104]	; (8001f84 <pidInit+0xc8>)
 8001f1c:	61da      	str	r2, [r3, #28]
	pidVel_FL2.kP=200;
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <pidInit+0xc0>)
 8001f20:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <pidInit+0xac>)
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34
	pidVel_FL2.kI=10;
 8001f24:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <pidInit+0xc0>)
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <pidInit+0xb8>)
 8001f28:	639a      	str	r2, [r3, #56]	; 0x38
	pidVel_FL2.kD=0;
 8001f2a:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <pidInit+0xc0>)
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	63da      	str	r2, [r3, #60]	; 0x3c

	pidPos_FL2.underOfPoint=10000;
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <pidInit+0xcc>)
 8001f34:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <pidInit+0xb4>)
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
	pidPos_FL2.outputLimit=20;
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <pidInit+0xcc>)
 8001f3a:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <pidInit+0xd0>)
 8001f3c:	62da      	str	r2, [r3, #44]	; 0x2c
	pidPos_FL2.errorSumLimit=5000;
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <pidInit+0xcc>)
 8001f40:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <pidInit+0xd4>)
 8001f42:	61da      	str	r2, [r3, #28]
	pidPos_FL2.kP=-2000;
 8001f44:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <pidInit+0xcc>)
 8001f46:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <pidInit+0xd8>)
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34
	pidPos_FL2.kI=-3;
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <pidInit+0xcc>)
 8001f4c:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <pidInit+0xdc>)
 8001f4e:	639a      	str	r2, [r3, #56]	; 0x38
	pidPos_FL2.kD=0;
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <pidInit+0xcc>)
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000c78 	.word	0x20000c78
 8001f68:	43480000 	.word	0x43480000
 8001f6c:	447a0000 	.word	0x447a0000
 8001f70:	461c4000 	.word	0x461c4000
 8001f74:	41200000 	.word	0x41200000
 8001f78:	20000ff0 	.word	0x20000ff0
 8001f7c:	20000bb4 	.word	0x20000bb4
 8001f80:	42c80000 	.word	0x42c80000
 8001f84:	453b8000 	.word	0x453b8000
 8001f88:	20000b48 	.word	0x20000b48
 8001f8c:	41a00000 	.word	0x41a00000
 8001f90:	459c4000 	.word	0x459c4000
 8001f94:	c4fa0000 	.word	0xc4fa0000
 8001f98:	c0400000 	.word	0xc0400000

08001f9c <setDuty>:

void setDuty(MOTOR* motor, float Target_Duty){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	ed87 0a00 	vstr	s0, [r7]

	switch(motor->MotorNum){
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d861      	bhi.n	8002074 <setDuty+0xd8>
 8001fb0:	a201      	add	r2, pc, #4	; (adr r2, 8001fb8 <setDuty+0x1c>)
 8001fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb6:	bf00      	nop
 8001fb8:	08001fd1 	.word	0x08001fd1
 8001fbc:	08001fe3 	.word	0x08001fe3
 8001fc0:	08001ff5 	.word	0x08001ff5
 8001fc4:	08002023 	.word	0x08002023
 8001fc8:	08002035 	.word	0x08002035
 8001fcc:	08002047 	.word	0x08002047
	case 0:
	{
		TIM4->CCR1 = Target_Duty;
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <setDuty+0xe4>)
 8001fd2:	edd7 7a00 	vldr	s15, [r7]
 8001fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fda:	ee17 2a90 	vmov	r2, s15
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001fe0:	e048      	b.n	8002074 <setDuty+0xd8>
	}
	case 1:
	{
		TIM4->CCR1 = Target_Duty;
 8001fe2:	4b27      	ldr	r3, [pc, #156]	; (8002080 <setDuty+0xe4>)
 8001fe4:	edd7 7a00 	vldr	s15, [r7]
 8001fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fec:	ee17 2a90 	vmov	r2, s15
 8001ff0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001ff2:	e03f      	b.n	8002074 <setDuty+0xd8>
	}
	case 2:
	{
		Target_Duty *= -1;
 8001ff4:	edd7 7a00 	vldr	s15, [r7]
 8001ff8:	eef1 7a67 	vneg.f32	s15, s15
 8001ffc:	edc7 7a00 	vstr	s15, [r7]
		Target_Duty += 500;
 8002000:	edd7 7a00 	vldr	s15, [r7]
 8002004:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002084 <setDuty+0xe8>
 8002008:	ee77 7a87 	vadd.f32	s15, s15, s14
 800200c:	edc7 7a00 	vstr	s15, [r7]
		TIM4->CCR3 = Target_Duty;
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <setDuty+0xe4>)
 8002012:	edd7 7a00 	vldr	s15, [r7]
 8002016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201a:	ee17 2a90 	vmov	r2, s15
 800201e:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8002020:	e028      	b.n	8002074 <setDuty+0xd8>
	}
	case 3:
	{
		TIM4->CCR1 = Target_Duty;
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <setDuty+0xe4>)
 8002024:	edd7 7a00 	vldr	s15, [r7]
 8002028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800202c:	ee17 2a90 	vmov	r2, s15
 8002030:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002032:	e01f      	b.n	8002074 <setDuty+0xd8>
	}
	case 4:
	{
		TIM4->CCR1 = Target_Duty;
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <setDuty+0xe4>)
 8002036:	edd7 7a00 	vldr	s15, [r7]
 800203a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800203e:	ee17 2a90 	vmov	r2, s15
 8002042:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002044:	e016      	b.n	8002074 <setDuty+0xd8>
	}
	case 5:
	{
		Target_Duty *= -1;
 8002046:	edd7 7a00 	vldr	s15, [r7]
 800204a:	eef1 7a67 	vneg.f32	s15, s15
 800204e:	edc7 7a00 	vstr	s15, [r7]
		Target_Duty += 500;
 8002052:	edd7 7a00 	vldr	s15, [r7]
 8002056:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002084 <setDuty+0xe8>
 800205a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800205e:	edc7 7a00 	vstr	s15, [r7]
		TIM4->CCR1 = Target_Duty;
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <setDuty+0xe4>)
 8002064:	edd7 7a00 	vldr	s15, [r7]
 8002068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800206c:	ee17 2a90 	vmov	r2, s15
 8002070:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002072:	bf00      	nop
	}
	}
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	40000800 	.word	0x40000800
 8002084:	43fa0000 	.word	0x43fa0000

08002088 <RPM_filter>:

void setRPM(MOTOR* motor, float Target_RPM){
	motor->TargetRPM = Target_RPM;
}

void RPM_filter(float rpm){
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	ed87 0a01 	vstr	s0, [r7, #4]

	float sum=0;
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]

	rpm_temp[rpm_filter_cnt] = rpm;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <RPM_filter+0x80>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1b      	ldr	r2, [pc, #108]	; (800210c <RPM_filter+0x84>)
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	601a      	str	r2, [r3, #0]
	rpm_filter_cnt++;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <RPM_filter+0x80>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	4a16      	ldr	r2, [pc, #88]	; (8002108 <RPM_filter+0x80>)
 80020ae:	6013      	str	r3, [r2, #0]

	if(rpm_filter_cnt == RPM_FILTER_SIZE)
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <RPM_filter+0x80>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b0a      	cmp	r3, #10
 80020b6:	d120      	bne.n	80020fa <RPM_filter+0x72>
	{
		for(int i=0;i<10;i++)
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	e00e      	b.n	80020dc <RPM_filter+0x54>
		{
			sum += rpm_temp[i];
 80020be:	4a13      	ldr	r2, [pc, #76]	; (800210c <RPM_filter+0x84>)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80020ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d2:	edc7 7a03 	vstr	s15, [r7, #12]
		for(int i=0;i<10;i++)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3301      	adds	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b09      	cmp	r3, #9
 80020e0:	dded      	ble.n	80020be <RPM_filter+0x36>
		}
		motor_FL2.realRPM = sum/RPM_FILTER_SIZE;
 80020e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80020e6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80020ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <RPM_filter+0x88>)
 80020f0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		rpm_filter_cnt=0;
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <RPM_filter+0x80>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
	}
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000084 	.word	0x20000084
 800210c:	2000005c 	.word	0x2000005c
 8002110:	200004c8 	.word	0x200004c8

08002114 <Read_FlashData>:
	LS_FL[2] = HAL_GPIO_ReadPin(LeadSwitch_FL2_GPIO_Port, LeadSwitch_FL2_Pin);
	LS_FL[3] = HAL_GPIO_ReadPin(LeadSwitch_FL3_GPIO_Port, LeadSwitch_FL3_Pin);
}

void Read_FlashData()
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
  int ByteCnt=0;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  for(int i=0;i<FL_FLASH_SIZE;i++)
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	e012      	b.n	800214a <Read_FlashData+0x36>
  {
	  Flash_Read_Data_FL0[i] = Flash_Read(Init_Add + ByteCnt);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800212a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fe70 	bl	8000e14 <Flash_Read>
 8002134:	4602      	mov	r2, r0
 8002136:	492e      	ldr	r1, [pc, #184]	; (80021f0 <Read_FlashData+0xdc>)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  ByteCnt += 4;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3304      	adds	r3, #4
 8002142:	617b      	str	r3, [r7, #20]
  for(int i=0;i<FL_FLASH_SIZE;i++)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	3301      	adds	r3, #1
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b13      	cmp	r3, #19
 800214e:	dde9      	ble.n	8002124 <Read_FlashData+0x10>
  }

  for(int i=0;i<FL_FLASH_SIZE;i++)
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e012      	b.n	800217c <Read_FlashData+0x68>
  {
	  Flash_Read_Data_FL1[i] = Flash_Read(Init_Add + ByteCnt);
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800215c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fe57 	bl	8000e14 <Flash_Read>
 8002166:	4602      	mov	r2, r0
 8002168:	4922      	ldr	r1, [pc, #136]	; (80021f4 <Read_FlashData+0xe0>)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  ByteCnt += 4;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3304      	adds	r3, #4
 8002174:	617b      	str	r3, [r7, #20]
  for(int i=0;i<FL_FLASH_SIZE;i++)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3301      	adds	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b13      	cmp	r3, #19
 8002180:	dde9      	ble.n	8002156 <Read_FlashData+0x42>
  }

  for(int i=0;i<FL_FLASH_SIZE;i++)
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	e012      	b.n	80021ae <Read_FlashData+0x9a>
  {
	  Flash_Read_Data_FL2[i] = Flash_Read(Init_Add + ByteCnt);
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800218e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fe3e 	bl	8000e14 <Flash_Read>
 8002198:	4602      	mov	r2, r0
 800219a:	4917      	ldr	r1, [pc, #92]	; (80021f8 <Read_FlashData+0xe4>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  ByteCnt += 4;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3304      	adds	r3, #4
 80021a6:	617b      	str	r3, [r7, #20]
  for(int i=0;i<FL_FLASH_SIZE;i++)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	3301      	adds	r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b13      	cmp	r3, #19
 80021b2:	dde9      	ble.n	8002188 <Read_FlashData+0x74>
  }

  for(int i=0;i<FL_FLASH_SIZE;i++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	e012      	b.n	80021e0 <Read_FlashData+0xcc>
  {
	  Flash_Read_Data_FL3[i] = Flash_Read(Init_Add + ByteCnt);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80021c0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fe25 	bl	8000e14 <Flash_Read>
 80021ca:	4602      	mov	r2, r0
 80021cc:	490b      	ldr	r1, [pc, #44]	; (80021fc <Read_FlashData+0xe8>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  ByteCnt += 4;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	3304      	adds	r3, #4
 80021d8:	617b      	str	r3, [r7, #20]
  for(int i=0;i<FL_FLASH_SIZE;i++)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3301      	adds	r3, #1
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b13      	cmp	r3, #19
 80021e4:	dde9      	ble.n	80021ba <Read_FlashData+0xa6>
  }
}
 80021e6:	bf00      	nop
 80021e8:	bf00      	nop
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000090 	.word	0x20000090
 80021f4:	200000e0 	.word	0x200000e0
 80021f8:	20000130 	.word	0x20000130
 80021fc:	20000180 	.word	0x20000180

08002200 <Set_FlashData>:

void Set_FlashData()
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  Flash_Write_Data_FL0[0] = pidPos_FL0.kP* (-1);
 8002204:	4bbf      	ldr	r3, [pc, #764]	; (8002504 <Set_FlashData+0x304>)
 8002206:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800220a:	eef1 7a67 	vneg.f32	s15, s15
 800220e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002212:	ee17 2a90 	vmov	r2, s15
 8002216:	4bbc      	ldr	r3, [pc, #752]	; (8002508 <Set_FlashData+0x308>)
 8002218:	601a      	str	r2, [r3, #0]
  Flash_Write_Data_FL0[1] = pidPos_FL0.kI* (-1);
 800221a:	4bba      	ldr	r3, [pc, #744]	; (8002504 <Set_FlashData+0x304>)
 800221c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002220:	eef1 7a67 	vneg.f32	s15, s15
 8002224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002228:	ee17 2a90 	vmov	r2, s15
 800222c:	4bb6      	ldr	r3, [pc, #728]	; (8002508 <Set_FlashData+0x308>)
 800222e:	605a      	str	r2, [r3, #4]
  Flash_Write_Data_FL0[2] = pidPos_FL0.kD* (-1);
 8002230:	4bb4      	ldr	r3, [pc, #720]	; (8002504 <Set_FlashData+0x304>)
 8002232:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002236:	eef1 7a67 	vneg.f32	s15, s15
 800223a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800223e:	ee17 2a90 	vmov	r2, s15
 8002242:	4bb1      	ldr	r3, [pc, #708]	; (8002508 <Set_FlashData+0x308>)
 8002244:	609a      	str	r2, [r3, #8]
  Flash_Write_Data_FL0[3] = pidPos_FL0.errorSumLimit;
 8002246:	4baf      	ldr	r3, [pc, #700]	; (8002504 <Set_FlashData+0x304>)
 8002248:	edd3 7a07 	vldr	s15, [r3, #28]
 800224c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002250:	ee17 2a90 	vmov	r2, s15
 8002254:	4bac      	ldr	r3, [pc, #688]	; (8002508 <Set_FlashData+0x308>)
 8002256:	60da      	str	r2, [r3, #12]
  Flash_Write_Data_FL0[4] = pidPos_FL0.outputLimit;
 8002258:	4baa      	ldr	r3, [pc, #680]	; (8002504 <Set_FlashData+0x304>)
 800225a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800225e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002262:	ee17 2a90 	vmov	r2, s15
 8002266:	4ba8      	ldr	r3, [pc, #672]	; (8002508 <Set_FlashData+0x308>)
 8002268:	611a      	str	r2, [r3, #16]
  Flash_Write_Data_FL0[5] = pidPos_FL0.underOfPoint;
 800226a:	4ba6      	ldr	r3, [pc, #664]	; (8002504 <Set_FlashData+0x304>)
 800226c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002274:	ee17 2a90 	vmov	r2, s15
 8002278:	4ba3      	ldr	r3, [pc, #652]	; (8002508 <Set_FlashData+0x308>)
 800227a:	615a      	str	r2, [r3, #20]

  Flash_Write_Data_FL0[6] = pidVel_FL0.kP;
 800227c:	4ba3      	ldr	r3, [pc, #652]	; (800250c <Set_FlashData+0x30c>)
 800227e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002286:	ee17 2a90 	vmov	r2, s15
 800228a:	4b9f      	ldr	r3, [pc, #636]	; (8002508 <Set_FlashData+0x308>)
 800228c:	619a      	str	r2, [r3, #24]
  Flash_Write_Data_FL0[7] = pidVel_FL0.kI;
 800228e:	4b9f      	ldr	r3, [pc, #636]	; (800250c <Set_FlashData+0x30c>)
 8002290:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002298:	ee17 2a90 	vmov	r2, s15
 800229c:	4b9a      	ldr	r3, [pc, #616]	; (8002508 <Set_FlashData+0x308>)
 800229e:	61da      	str	r2, [r3, #28]
  Flash_Write_Data_FL0[8] = pidVel_FL0.kD;
 80022a0:	4b9a      	ldr	r3, [pc, #616]	; (800250c <Set_FlashData+0x30c>)
 80022a2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80022a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022aa:	ee17 2a90 	vmov	r2, s15
 80022ae:	4b96      	ldr	r3, [pc, #600]	; (8002508 <Set_FlashData+0x308>)
 80022b0:	621a      	str	r2, [r3, #32]
  Flash_Write_Data_FL0[9] = pidVel_FL0.errorSumLimit;
 80022b2:	4b96      	ldr	r3, [pc, #600]	; (800250c <Set_FlashData+0x30c>)
 80022b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80022b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022bc:	ee17 2a90 	vmov	r2, s15
 80022c0:	4b91      	ldr	r3, [pc, #580]	; (8002508 <Set_FlashData+0x308>)
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24
  Flash_Write_Data_FL0[10] = pidVel_FL0.outputLimit;
 80022c4:	4b91      	ldr	r3, [pc, #580]	; (800250c <Set_FlashData+0x30c>)
 80022c6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80022ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ce:	ee17 2a90 	vmov	r2, s15
 80022d2:	4b8d      	ldr	r3, [pc, #564]	; (8002508 <Set_FlashData+0x308>)
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28
  Flash_Write_Data_FL0[11] = pidVel_FL0.underOfPoint;
 80022d6:	4b8d      	ldr	r3, [pc, #564]	; (800250c <Set_FlashData+0x30c>)
 80022d8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80022dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022e0:	ee17 2a90 	vmov	r2, s15
 80022e4:	4b88      	ldr	r3, [pc, #544]	; (8002508 <Set_FlashData+0x308>)
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c

  Flash_Write_Data_FL0[12] = pidCur_FL0.kP;
 80022e8:	4b89      	ldr	r3, [pc, #548]	; (8002510 <Set_FlashData+0x310>)
 80022ea:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80022ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022f2:	ee17 2a90 	vmov	r2, s15
 80022f6:	4b84      	ldr	r3, [pc, #528]	; (8002508 <Set_FlashData+0x308>)
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
  Flash_Write_Data_FL0[13] = pidCur_FL0.kI;
 80022fa:	4b85      	ldr	r3, [pc, #532]	; (8002510 <Set_FlashData+0x310>)
 80022fc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002304:	ee17 2a90 	vmov	r2, s15
 8002308:	4b7f      	ldr	r3, [pc, #508]	; (8002508 <Set_FlashData+0x308>)
 800230a:	635a      	str	r2, [r3, #52]	; 0x34
  Flash_Write_Data_FL0[14] = pidCur_FL0.kD;
 800230c:	4b80      	ldr	r3, [pc, #512]	; (8002510 <Set_FlashData+0x310>)
 800230e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002316:	ee17 2a90 	vmov	r2, s15
 800231a:	4b7b      	ldr	r3, [pc, #492]	; (8002508 <Set_FlashData+0x308>)
 800231c:	639a      	str	r2, [r3, #56]	; 0x38
  Flash_Write_Data_FL0[15] = pidCur_FL0.errorSumLimit;
 800231e:	4b7c      	ldr	r3, [pc, #496]	; (8002510 <Set_FlashData+0x310>)
 8002320:	edd3 7a07 	vldr	s15, [r3, #28]
 8002324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002328:	ee17 2a90 	vmov	r2, s15
 800232c:	4b76      	ldr	r3, [pc, #472]	; (8002508 <Set_FlashData+0x308>)
 800232e:	63da      	str	r2, [r3, #60]	; 0x3c
  Flash_Write_Data_FL0[16] = pidCur_FL0.outputLimit;
 8002330:	4b77      	ldr	r3, [pc, #476]	; (8002510 <Set_FlashData+0x310>)
 8002332:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800233a:	ee17 2a90 	vmov	r2, s15
 800233e:	4b72      	ldr	r3, [pc, #456]	; (8002508 <Set_FlashData+0x308>)
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
  Flash_Write_Data_FL0[17] = pidCur_FL0.underOfPoint;
 8002342:	4b73      	ldr	r3, [pc, #460]	; (8002510 <Set_FlashData+0x310>)
 8002344:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800234c:	ee17 2a90 	vmov	r2, s15
 8002350:	4b6d      	ldr	r3, [pc, #436]	; (8002508 <Set_FlashData+0x308>)
 8002352:	645a      	str	r2, [r3, #68]	; 0x44

  Flash_Write_Data_FL0[18] = pidPos_FL0.outputLimit;	//maxRPM
 8002354:	4b6b      	ldr	r3, [pc, #428]	; (8002504 <Set_FlashData+0x304>)
 8002356:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800235a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235e:	ee17 2a90 	vmov	r2, s15
 8002362:	4b69      	ldr	r3, [pc, #420]	; (8002508 <Set_FlashData+0x308>)
 8002364:	649a      	str	r2, [r3, #72]	; 0x48
  Flash_Write_Data_FL0[19] = pidVel_FL0.outputLimit;	//maxCUR
 8002366:	4b69      	ldr	r3, [pc, #420]	; (800250c <Set_FlashData+0x30c>)
 8002368:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800236c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002370:	ee17 2a90 	vmov	r2, s15
 8002374:	4b64      	ldr	r3, [pc, #400]	; (8002508 <Set_FlashData+0x308>)
 8002376:	64da      	str	r2, [r3, #76]	; 0x4c

//-------------------------------------------------------------------
  Flash_Write_Data_FL1[0] = pidPos_FL1.kP* (-1);
 8002378:	4b66      	ldr	r3, [pc, #408]	; (8002514 <Set_FlashData+0x314>)
 800237a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800237e:	eef1 7a67 	vneg.f32	s15, s15
 8002382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002386:	ee17 2a90 	vmov	r2, s15
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <Set_FlashData+0x318>)
 800238c:	601a      	str	r2, [r3, #0]
  Flash_Write_Data_FL1[1] = pidPos_FL1.kI* (-1);
 800238e:	4b61      	ldr	r3, [pc, #388]	; (8002514 <Set_FlashData+0x314>)
 8002390:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002394:	eef1 7a67 	vneg.f32	s15, s15
 8002398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800239c:	ee17 2a90 	vmov	r2, s15
 80023a0:	4b5d      	ldr	r3, [pc, #372]	; (8002518 <Set_FlashData+0x318>)
 80023a2:	605a      	str	r2, [r3, #4]
  Flash_Write_Data_FL1[2] = pidPos_FL1.kD* (-1);
 80023a4:	4b5b      	ldr	r3, [pc, #364]	; (8002514 <Set_FlashData+0x314>)
 80023a6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80023aa:	eef1 7a67 	vneg.f32	s15, s15
 80023ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023b2:	ee17 2a90 	vmov	r2, s15
 80023b6:	4b58      	ldr	r3, [pc, #352]	; (8002518 <Set_FlashData+0x318>)
 80023b8:	609a      	str	r2, [r3, #8]
  Flash_Write_Data_FL1[3] = pidPos_FL1.errorSumLimit;
 80023ba:	4b56      	ldr	r3, [pc, #344]	; (8002514 <Set_FlashData+0x314>)
 80023bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80023c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c4:	ee17 2a90 	vmov	r2, s15
 80023c8:	4b53      	ldr	r3, [pc, #332]	; (8002518 <Set_FlashData+0x318>)
 80023ca:	60da      	str	r2, [r3, #12]
  Flash_Write_Data_FL1[4] = pidPos_FL1.outputLimit;
 80023cc:	4b51      	ldr	r3, [pc, #324]	; (8002514 <Set_FlashData+0x314>)
 80023ce:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80023d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d6:	ee17 2a90 	vmov	r2, s15
 80023da:	4b4f      	ldr	r3, [pc, #316]	; (8002518 <Set_FlashData+0x318>)
 80023dc:	611a      	str	r2, [r3, #16]
  Flash_Write_Data_FL1[5] = pidPos_FL1.underOfPoint;
 80023de:	4b4d      	ldr	r3, [pc, #308]	; (8002514 <Set_FlashData+0x314>)
 80023e0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80023e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e8:	ee17 2a90 	vmov	r2, s15
 80023ec:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <Set_FlashData+0x318>)
 80023ee:	615a      	str	r2, [r3, #20]

  Flash_Write_Data_FL1[6] = pidVel_FL1.kP;
 80023f0:	4b4a      	ldr	r3, [pc, #296]	; (800251c <Set_FlashData+0x31c>)
 80023f2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80023f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023fa:	ee17 2a90 	vmov	r2, s15
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <Set_FlashData+0x318>)
 8002400:	619a      	str	r2, [r3, #24]
  Flash_Write_Data_FL1[7] = pidVel_FL1.kI;
 8002402:	4b46      	ldr	r3, [pc, #280]	; (800251c <Set_FlashData+0x31c>)
 8002404:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800240c:	ee17 2a90 	vmov	r2, s15
 8002410:	4b41      	ldr	r3, [pc, #260]	; (8002518 <Set_FlashData+0x318>)
 8002412:	61da      	str	r2, [r3, #28]
  Flash_Write_Data_FL1[8] = pidVel_FL1.kD;
 8002414:	4b41      	ldr	r3, [pc, #260]	; (800251c <Set_FlashData+0x31c>)
 8002416:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800241a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800241e:	ee17 2a90 	vmov	r2, s15
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <Set_FlashData+0x318>)
 8002424:	621a      	str	r2, [r3, #32]
  Flash_Write_Data_FL1[9] = pidVel_FL1.errorSumLimit;
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <Set_FlashData+0x31c>)
 8002428:	edd3 7a07 	vldr	s15, [r3, #28]
 800242c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002430:	ee17 2a90 	vmov	r2, s15
 8002434:	4b38      	ldr	r3, [pc, #224]	; (8002518 <Set_FlashData+0x318>)
 8002436:	625a      	str	r2, [r3, #36]	; 0x24
  Flash_Write_Data_FL1[10] = pidVel_FL1.outputLimit;
 8002438:	4b38      	ldr	r3, [pc, #224]	; (800251c <Set_FlashData+0x31c>)
 800243a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800243e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002442:	ee17 2a90 	vmov	r2, s15
 8002446:	4b34      	ldr	r3, [pc, #208]	; (8002518 <Set_FlashData+0x318>)
 8002448:	629a      	str	r2, [r3, #40]	; 0x28
  Flash_Write_Data_FL1[11] = pidVel_FL1.underOfPoint;
 800244a:	4b34      	ldr	r3, [pc, #208]	; (800251c <Set_FlashData+0x31c>)
 800244c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002454:	ee17 2a90 	vmov	r2, s15
 8002458:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <Set_FlashData+0x318>)
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c

  Flash_Write_Data_FL1[12] = pidCur_FL1.kP;
 800245c:	4b30      	ldr	r3, [pc, #192]	; (8002520 <Set_FlashData+0x320>)
 800245e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002466:	ee17 2a90 	vmov	r2, s15
 800246a:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <Set_FlashData+0x318>)
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
  Flash_Write_Data_FL1[13] = pidCur_FL1.kI;
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <Set_FlashData+0x320>)
 8002470:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002478:	ee17 2a90 	vmov	r2, s15
 800247c:	4b26      	ldr	r3, [pc, #152]	; (8002518 <Set_FlashData+0x318>)
 800247e:	635a      	str	r2, [r3, #52]	; 0x34
  Flash_Write_Data_FL1[14] = pidCur_FL1.kD;
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <Set_FlashData+0x320>)
 8002482:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800248a:	ee17 2a90 	vmov	r2, s15
 800248e:	4b22      	ldr	r3, [pc, #136]	; (8002518 <Set_FlashData+0x318>)
 8002490:	639a      	str	r2, [r3, #56]	; 0x38
  Flash_Write_Data_FL1[15] = pidCur_FL1.errorSumLimit;
 8002492:	4b23      	ldr	r3, [pc, #140]	; (8002520 <Set_FlashData+0x320>)
 8002494:	edd3 7a07 	vldr	s15, [r3, #28]
 8002498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800249c:	ee17 2a90 	vmov	r2, s15
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <Set_FlashData+0x318>)
 80024a2:	63da      	str	r2, [r3, #60]	; 0x3c
  Flash_Write_Data_FL1[16] = pidCur_FL1.outputLimit;
 80024a4:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <Set_FlashData+0x320>)
 80024a6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80024aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ae:	ee17 2a90 	vmov	r2, s15
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <Set_FlashData+0x318>)
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
  Flash_Write_Data_FL1[17] = pidCur_FL1.underOfPoint;
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <Set_FlashData+0x320>)
 80024b8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80024bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c0:	ee17 2a90 	vmov	r2, s15
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <Set_FlashData+0x318>)
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44

  Flash_Write_Data_FL1[18] = pidPos_FL1.outputLimit;	//maxRPM
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <Set_FlashData+0x314>)
 80024ca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80024ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024d2:	ee17 2a90 	vmov	r2, s15
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <Set_FlashData+0x318>)
 80024d8:	649a      	str	r2, [r3, #72]	; 0x48
  Flash_Write_Data_FL1[19] = pidVel_FL1.outputLimit;	//maxCUR
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <Set_FlashData+0x31c>)
 80024dc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80024e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e4:	ee17 2a90 	vmov	r2, s15
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <Set_FlashData+0x318>)
 80024ea:	64da      	str	r2, [r3, #76]	; 0x4c

  //-------------------------------------------------------------------
  Flash_Write_Data_FL2[0] = pidPos_FL2.kP* (-1);
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <Set_FlashData+0x324>)
 80024ee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80024f2:	eef1 7a67 	vneg.f32	s15, s15
 80024f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024fa:	ee17 2a90 	vmov	r2, s15
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <Set_FlashData+0x328>)
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e013      	b.n	800252c <Set_FlashData+0x32c>
 8002504:	200008a0 	.word	0x200008a0
 8002508:	200001d0 	.word	0x200001d0
 800250c:	20000ce4 	.word	0x20000ce4
 8002510:	20000ac4 	.word	0x20000ac4
 8002514:	20000834 	.word	0x20000834
 8002518:	20000220 	.word	0x20000220
 800251c:	2000090c 	.word	0x2000090c
 8002520:	20000458 	.word	0x20000458
 8002524:	20000b48 	.word	0x20000b48
 8002528:	20000270 	.word	0x20000270
  Flash_Write_Data_FL2[1] = pidPos_FL2.kI* (-1);
 800252c:	4bb6      	ldr	r3, [pc, #728]	; (8002808 <Set_FlashData+0x608>)
 800252e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002532:	eef1 7a67 	vneg.f32	s15, s15
 8002536:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800253a:	ee17 2a90 	vmov	r2, s15
 800253e:	4bb3      	ldr	r3, [pc, #716]	; (800280c <Set_FlashData+0x60c>)
 8002540:	605a      	str	r2, [r3, #4]
  Flash_Write_Data_FL2[2] = pidPos_FL2.kD* (-1);
 8002542:	4bb1      	ldr	r3, [pc, #708]	; (8002808 <Set_FlashData+0x608>)
 8002544:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002548:	eef1 7a67 	vneg.f32	s15, s15
 800254c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002550:	ee17 2a90 	vmov	r2, s15
 8002554:	4bad      	ldr	r3, [pc, #692]	; (800280c <Set_FlashData+0x60c>)
 8002556:	609a      	str	r2, [r3, #8]
  Flash_Write_Data_FL2[3] = pidPos_FL2.errorSumLimit;
 8002558:	4bab      	ldr	r3, [pc, #684]	; (8002808 <Set_FlashData+0x608>)
 800255a:	edd3 7a07 	vldr	s15, [r3, #28]
 800255e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002562:	ee17 2a90 	vmov	r2, s15
 8002566:	4ba9      	ldr	r3, [pc, #676]	; (800280c <Set_FlashData+0x60c>)
 8002568:	60da      	str	r2, [r3, #12]
  Flash_Write_Data_FL2[4] = pidPos_FL2.outputLimit;
 800256a:	4ba7      	ldr	r3, [pc, #668]	; (8002808 <Set_FlashData+0x608>)
 800256c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002574:	ee17 2a90 	vmov	r2, s15
 8002578:	4ba4      	ldr	r3, [pc, #656]	; (800280c <Set_FlashData+0x60c>)
 800257a:	611a      	str	r2, [r3, #16]
  Flash_Write_Data_FL2[5] = pidPos_FL2.underOfPoint;
 800257c:	4ba2      	ldr	r3, [pc, #648]	; (8002808 <Set_FlashData+0x608>)
 800257e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002586:	ee17 2a90 	vmov	r2, s15
 800258a:	4ba0      	ldr	r3, [pc, #640]	; (800280c <Set_FlashData+0x60c>)
 800258c:	615a      	str	r2, [r3, #20]

  Flash_Write_Data_FL2[6] = pidVel_FL2.kP;
 800258e:	4ba0      	ldr	r3, [pc, #640]	; (8002810 <Set_FlashData+0x610>)
 8002590:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002598:	ee17 2a90 	vmov	r2, s15
 800259c:	4b9b      	ldr	r3, [pc, #620]	; (800280c <Set_FlashData+0x60c>)
 800259e:	619a      	str	r2, [r3, #24]
  Flash_Write_Data_FL2[7] = pidVel_FL2.kI;
 80025a0:	4b9b      	ldr	r3, [pc, #620]	; (8002810 <Set_FlashData+0x610>)
 80025a2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80025a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025aa:	ee17 2a90 	vmov	r2, s15
 80025ae:	4b97      	ldr	r3, [pc, #604]	; (800280c <Set_FlashData+0x60c>)
 80025b0:	61da      	str	r2, [r3, #28]
  Flash_Write_Data_FL2[8] = pidVel_FL2.kD;
 80025b2:	4b97      	ldr	r3, [pc, #604]	; (8002810 <Set_FlashData+0x610>)
 80025b4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80025b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025bc:	ee17 2a90 	vmov	r2, s15
 80025c0:	4b92      	ldr	r3, [pc, #584]	; (800280c <Set_FlashData+0x60c>)
 80025c2:	621a      	str	r2, [r3, #32]
  Flash_Write_Data_FL2[9] = pidVel_FL2.errorSumLimit;
 80025c4:	4b92      	ldr	r3, [pc, #584]	; (8002810 <Set_FlashData+0x610>)
 80025c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80025ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ce:	ee17 2a90 	vmov	r2, s15
 80025d2:	4b8e      	ldr	r3, [pc, #568]	; (800280c <Set_FlashData+0x60c>)
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
  Flash_Write_Data_FL2[10] = pidVel_FL2.outputLimit;
 80025d6:	4b8e      	ldr	r3, [pc, #568]	; (8002810 <Set_FlashData+0x610>)
 80025d8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80025dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e0:	ee17 2a90 	vmov	r2, s15
 80025e4:	4b89      	ldr	r3, [pc, #548]	; (800280c <Set_FlashData+0x60c>)
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
  Flash_Write_Data_FL2[11] = pidVel_FL2.underOfPoint;
 80025e8:	4b89      	ldr	r3, [pc, #548]	; (8002810 <Set_FlashData+0x610>)
 80025ea:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80025ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025f2:	ee17 2a90 	vmov	r2, s15
 80025f6:	4b85      	ldr	r3, [pc, #532]	; (800280c <Set_FlashData+0x60c>)
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c

  Flash_Write_Data_FL2[12] = pidCur_FL2.kP;
 80025fa:	4b86      	ldr	r3, [pc, #536]	; (8002814 <Set_FlashData+0x614>)
 80025fc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002604:	ee17 2a90 	vmov	r2, s15
 8002608:	4b80      	ldr	r3, [pc, #512]	; (800280c <Set_FlashData+0x60c>)
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
  Flash_Write_Data_FL2[13] = pidCur_FL2.kI;
 800260c:	4b81      	ldr	r3, [pc, #516]	; (8002814 <Set_FlashData+0x614>)
 800260e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002616:	ee17 2a90 	vmov	r2, s15
 800261a:	4b7c      	ldr	r3, [pc, #496]	; (800280c <Set_FlashData+0x60c>)
 800261c:	635a      	str	r2, [r3, #52]	; 0x34
  Flash_Write_Data_FL2[14] = pidCur_FL2.kD;
 800261e:	4b7d      	ldr	r3, [pc, #500]	; (8002814 <Set_FlashData+0x614>)
 8002620:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002628:	ee17 2a90 	vmov	r2, s15
 800262c:	4b77      	ldr	r3, [pc, #476]	; (800280c <Set_FlashData+0x60c>)
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
  Flash_Write_Data_FL2[15] = pidCur_FL2.errorSumLimit;
 8002630:	4b78      	ldr	r3, [pc, #480]	; (8002814 <Set_FlashData+0x614>)
 8002632:	edd3 7a07 	vldr	s15, [r3, #28]
 8002636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800263a:	ee17 2a90 	vmov	r2, s15
 800263e:	4b73      	ldr	r3, [pc, #460]	; (800280c <Set_FlashData+0x60c>)
 8002640:	63da      	str	r2, [r3, #60]	; 0x3c
  Flash_Write_Data_FL2[16] = pidCur_FL2.outputLimit;
 8002642:	4b74      	ldr	r3, [pc, #464]	; (8002814 <Set_FlashData+0x614>)
 8002644:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800264c:	ee17 2a90 	vmov	r2, s15
 8002650:	4b6e      	ldr	r3, [pc, #440]	; (800280c <Set_FlashData+0x60c>)
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
  Flash_Write_Data_FL2[17] = pidCur_FL2.underOfPoint;
 8002654:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <Set_FlashData+0x614>)
 8002656:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800265a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800265e:	ee17 2a90 	vmov	r2, s15
 8002662:	4b6a      	ldr	r3, [pc, #424]	; (800280c <Set_FlashData+0x60c>)
 8002664:	645a      	str	r2, [r3, #68]	; 0x44

  Flash_Write_Data_FL2[18] = pidPos_FL2.outputLimit;	//maxRPM
 8002666:	4b68      	ldr	r3, [pc, #416]	; (8002808 <Set_FlashData+0x608>)
 8002668:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800266c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002670:	ee17 2a90 	vmov	r2, s15
 8002674:	4b65      	ldr	r3, [pc, #404]	; (800280c <Set_FlashData+0x60c>)
 8002676:	649a      	str	r2, [r3, #72]	; 0x48
  Flash_Write_Data_FL2[19] = pidVel_FL2.outputLimit;	//maxCUR
 8002678:	4b65      	ldr	r3, [pc, #404]	; (8002810 <Set_FlashData+0x610>)
 800267a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800267e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002682:	ee17 2a90 	vmov	r2, s15
 8002686:	4b61      	ldr	r3, [pc, #388]	; (800280c <Set_FlashData+0x60c>)
 8002688:	64da      	str	r2, [r3, #76]	; 0x4c

  //-------------------------------------------------------------------
  Flash_Write_Data_FL3[0] = pidPos_FL3.kP* (-1);
 800268a:	4b63      	ldr	r3, [pc, #396]	; (8002818 <Set_FlashData+0x618>)
 800268c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002690:	eef1 7a67 	vneg.f32	s15, s15
 8002694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002698:	ee17 2a90 	vmov	r2, s15
 800269c:	4b5f      	ldr	r3, [pc, #380]	; (800281c <Set_FlashData+0x61c>)
 800269e:	601a      	str	r2, [r3, #0]
  Flash_Write_Data_FL3[1] = pidPos_FL3.kI* (-1);
 80026a0:	4b5d      	ldr	r3, [pc, #372]	; (8002818 <Set_FlashData+0x618>)
 80026a2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80026a6:	eef1 7a67 	vneg.f32	s15, s15
 80026aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ae:	ee17 2a90 	vmov	r2, s15
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <Set_FlashData+0x61c>)
 80026b4:	605a      	str	r2, [r3, #4]
  Flash_Write_Data_FL3[2] = pidPos_FL3.kD* (-1);
 80026b6:	4b58      	ldr	r3, [pc, #352]	; (8002818 <Set_FlashData+0x618>)
 80026b8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80026bc:	eef1 7a67 	vneg.f32	s15, s15
 80026c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026c4:	ee17 2a90 	vmov	r2, s15
 80026c8:	4b54      	ldr	r3, [pc, #336]	; (800281c <Set_FlashData+0x61c>)
 80026ca:	609a      	str	r2, [r3, #8]
  Flash_Write_Data_FL3[3] = pidPos_FL3.errorSumLimit;
 80026cc:	4b52      	ldr	r3, [pc, #328]	; (8002818 <Set_FlashData+0x618>)
 80026ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80026d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026d6:	ee17 2a90 	vmov	r2, s15
 80026da:	4b50      	ldr	r3, [pc, #320]	; (800281c <Set_FlashData+0x61c>)
 80026dc:	60da      	str	r2, [r3, #12]
  Flash_Write_Data_FL3[4] = pidPos_FL3.outputLimit;
 80026de:	4b4e      	ldr	r3, [pc, #312]	; (8002818 <Set_FlashData+0x618>)
 80026e0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80026e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e8:	ee17 2a90 	vmov	r2, s15
 80026ec:	4b4b      	ldr	r3, [pc, #300]	; (800281c <Set_FlashData+0x61c>)
 80026ee:	611a      	str	r2, [r3, #16]
  Flash_Write_Data_FL3[5] = pidPos_FL3.underOfPoint;
 80026f0:	4b49      	ldr	r3, [pc, #292]	; (8002818 <Set_FlashData+0x618>)
 80026f2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80026f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026fa:	ee17 2a90 	vmov	r2, s15
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <Set_FlashData+0x61c>)
 8002700:	615a      	str	r2, [r3, #20]

  Flash_Write_Data_FL3[6] = pidVel_FL3.kP;
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <Set_FlashData+0x620>)
 8002704:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800270c:	ee17 2a90 	vmov	r2, s15
 8002710:	4b42      	ldr	r3, [pc, #264]	; (800281c <Set_FlashData+0x61c>)
 8002712:	619a      	str	r2, [r3, #24]
  Flash_Write_Data_FL3[7] = pidVel_FL3.kI;
 8002714:	4b42      	ldr	r3, [pc, #264]	; (8002820 <Set_FlashData+0x620>)
 8002716:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800271a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800271e:	ee17 2a90 	vmov	r2, s15
 8002722:	4b3e      	ldr	r3, [pc, #248]	; (800281c <Set_FlashData+0x61c>)
 8002724:	61da      	str	r2, [r3, #28]
  Flash_Write_Data_FL3[8] = pidVel_FL3.kD;
 8002726:	4b3e      	ldr	r3, [pc, #248]	; (8002820 <Set_FlashData+0x620>)
 8002728:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800272c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002730:	ee17 2a90 	vmov	r2, s15
 8002734:	4b39      	ldr	r3, [pc, #228]	; (800281c <Set_FlashData+0x61c>)
 8002736:	621a      	str	r2, [r3, #32]
  Flash_Write_Data_FL3[9] = pidVel_FL3.errorSumLimit;
 8002738:	4b39      	ldr	r3, [pc, #228]	; (8002820 <Set_FlashData+0x620>)
 800273a:	edd3 7a07 	vldr	s15, [r3, #28]
 800273e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002742:	ee17 2a90 	vmov	r2, s15
 8002746:	4b35      	ldr	r3, [pc, #212]	; (800281c <Set_FlashData+0x61c>)
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
  Flash_Write_Data_FL3[10] = pidVel_FL3.outputLimit;
 800274a:	4b35      	ldr	r3, [pc, #212]	; (8002820 <Set_FlashData+0x620>)
 800274c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002754:	ee17 2a90 	vmov	r2, s15
 8002758:	4b30      	ldr	r3, [pc, #192]	; (800281c <Set_FlashData+0x61c>)
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
  Flash_Write_Data_FL3[11] = pidVel_FL3.underOfPoint;
 800275c:	4b30      	ldr	r3, [pc, #192]	; (8002820 <Set_FlashData+0x620>)
 800275e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002766:	ee17 2a90 	vmov	r2, s15
 800276a:	4b2c      	ldr	r3, [pc, #176]	; (800281c <Set_FlashData+0x61c>)
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c

  Flash_Write_Data_FL3[12] = pidCur_FL3.kP;
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <Set_FlashData+0x624>)
 8002770:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002778:	ee17 2a90 	vmov	r2, s15
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <Set_FlashData+0x61c>)
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
  Flash_Write_Data_FL3[13] = pidCur_FL3.kI;
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <Set_FlashData+0x624>)
 8002782:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800278a:	ee17 2a90 	vmov	r2, s15
 800278e:	4b23      	ldr	r3, [pc, #140]	; (800281c <Set_FlashData+0x61c>)
 8002790:	635a      	str	r2, [r3, #52]	; 0x34
  Flash_Write_Data_FL3[14] = pidCur_FL3.kD;
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <Set_FlashData+0x624>)
 8002794:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800279c:	ee17 2a90 	vmov	r2, s15
 80027a0:	4b1e      	ldr	r3, [pc, #120]	; (800281c <Set_FlashData+0x61c>)
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38
  Flash_Write_Data_FL3[15] = pidCur_FL3.errorSumLimit;
 80027a4:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <Set_FlashData+0x624>)
 80027a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80027aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ae:	ee17 2a90 	vmov	r2, s15
 80027b2:	4b1a      	ldr	r3, [pc, #104]	; (800281c <Set_FlashData+0x61c>)
 80027b4:	63da      	str	r2, [r3, #60]	; 0x3c
  Flash_Write_Data_FL3[16] = pidCur_FL3.outputLimit;
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <Set_FlashData+0x624>)
 80027b8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80027bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027c0:	ee17 2a90 	vmov	r2, s15
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <Set_FlashData+0x61c>)
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
  Flash_Write_Data_FL3[17] = pidCur_FL3.underOfPoint;
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <Set_FlashData+0x624>)
 80027ca:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80027ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027d2:	ee17 2a90 	vmov	r2, s15
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <Set_FlashData+0x61c>)
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44

  Flash_Write_Data_FL3[18] = pidPos_FL3.outputLimit;	//maxRPM
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <Set_FlashData+0x618>)
 80027dc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80027e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e4:	ee17 2a90 	vmov	r2, s15
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <Set_FlashData+0x61c>)
 80027ea:	649a      	str	r2, [r3, #72]	; 0x48
  Flash_Write_Data_FL3[19] = pidVel_FL3.outputLimit;	//maxCUR
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <Set_FlashData+0x620>)
 80027ee:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80027f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027f6:	ee17 2a90 	vmov	r2, s15
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <Set_FlashData+0x61c>)
 80027fc:	64da      	str	r2, [r3, #76]	; 0x4c


}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	20000b48 	.word	0x20000b48
 800280c:	20000270 	.word	0x20000270
 8002810:	20000bb4 	.word	0x20000bb4
 8002814:	2000105c 	.word	0x2000105c
 8002818:	20000a58 	.word	0x20000a58
 800281c:	200002c0 	.word	0x200002c0
 8002820:	200010ec 	.word	0x200010ec
 8002824:	20000538 	.word	0x20000538

08002828 <Write_FlashData>:

void Write_FlashData()
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
  int Check_Cnt=0;
 800282e:	2300      	movs	r3, #0
 8002830:	603b      	str	r3, [r7, #0]
  int Byte_Cnt=0;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]

  Flash_Erase(FLASH_SECTOR_5);
 8002836:	2005      	movs	r0, #5
 8002838:	f7fe fa80 	bl	8000d3c <Flash_Erase>

  for(int i=0;i<FL_FLASH_SIZE;i++)
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e017      	b.n	8002872 <Write_FlashData+0x4a>
  {
    Flash_Write(Init_Add + Byte_Cnt, Flash_Write_Data_FL0[i]);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002848:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800284c:	4619      	mov	r1, r3
 800284e:	4a3a      	ldr	r2, [pc, #232]	; (8002938 <Write_FlashData+0x110>)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	461a      	mov	r2, r3
 8002858:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800285c:	4608      	mov	r0, r1
 800285e:	f7fe fac5 	bl	8000dec <Flash_Write>
    Byte_Cnt += 4;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3304      	adds	r3, #4
 8002866:	617b      	str	r3, [r7, #20]
    HAL_FLASH_Lock();
 8002868:	f002 fa8c 	bl	8004d84 <HAL_FLASH_Lock>
  for(int i=0;i<FL_FLASH_SIZE;i++)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	3301      	adds	r3, #1
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b13      	cmp	r3, #19
 8002876:	dde4      	ble.n	8002842 <Write_FlashData+0x1a>
  }

  for(int i=0;i<FL_FLASH_SIZE;i++)
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	e017      	b.n	80028ae <Write_FlashData+0x86>
  {
	  Flash_Write(Init_Add + Byte_Cnt, Flash_Write_Data_FL1[i]);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002884:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002888:	4619      	mov	r1, r3
 800288a:	4a2c      	ldr	r2, [pc, #176]	; (800293c <Write_FlashData+0x114>)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	461a      	mov	r2, r3
 8002894:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002898:	4608      	mov	r0, r1
 800289a:	f7fe faa7 	bl	8000dec <Flash_Write>
	  Byte_Cnt += 4;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3304      	adds	r3, #4
 80028a2:	617b      	str	r3, [r7, #20]
	  HAL_FLASH_Lock();
 80028a4:	f002 fa6e 	bl	8004d84 <HAL_FLASH_Lock>
  for(int i=0;i<FL_FLASH_SIZE;i++)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3301      	adds	r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b13      	cmp	r3, #19
 80028b2:	dde4      	ble.n	800287e <Write_FlashData+0x56>
  }

  for(int i=0;i<FL_FLASH_SIZE;i++)
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	e017      	b.n	80028ea <Write_FlashData+0xc2>
  {
	  Flash_Write(Init_Add + Byte_Cnt, Flash_Write_Data_FL2[i]);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80028c0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80028c4:	4619      	mov	r1, r3
 80028c6:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <Write_FlashData+0x118>)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	461a      	mov	r2, r3
 80028d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80028d4:	4608      	mov	r0, r1
 80028d6:	f7fe fa89 	bl	8000dec <Flash_Write>
	  Byte_Cnt += 4;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3304      	adds	r3, #4
 80028de:	617b      	str	r3, [r7, #20]
	  HAL_FLASH_Lock();
 80028e0:	f002 fa50 	bl	8004d84 <HAL_FLASH_Lock>
  for(int i=0;i<FL_FLASH_SIZE;i++)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	3301      	adds	r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b13      	cmp	r3, #19
 80028ee:	dde4      	ble.n	80028ba <Write_FlashData+0x92>
  }

  for(int i=0;i<FL_FLASH_SIZE;i++)
 80028f0:	2300      	movs	r3, #0
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	e017      	b.n	8002926 <Write_FlashData+0xfe>
  {
	  Flash_Write(Init_Add + Byte_Cnt, Flash_Write_Data_FL3[i]);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80028fc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002900:	4619      	mov	r1, r3
 8002902:	4a10      	ldr	r2, [pc, #64]	; (8002944 <Write_FlashData+0x11c>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290a:	461a      	mov	r2, r3
 800290c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002910:	4608      	mov	r0, r1
 8002912:	f7fe fa6b 	bl	8000dec <Flash_Write>
	  Byte_Cnt += 4;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3304      	adds	r3, #4
 800291a:	617b      	str	r3, [r7, #20]
	  HAL_FLASH_Lock();
 800291c:	f002 fa32 	bl	8004d84 <HAL_FLASH_Lock>
  for(int i=0;i<FL_FLASH_SIZE;i++)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3301      	adds	r3, #1
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b13      	cmp	r3, #19
 800292a:	dde4      	ble.n	80028f6 <Write_FlashData+0xce>
  }

}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200001d0 	.word	0x200001d0
 800293c:	20000220 	.word	0x20000220
 8002940:	20000270 	.word	0x20000270
 8002944:	200002c0 	.word	0x200002c0

08002948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800294c:	b672      	cpsid	i
}
 800294e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002950:	e7fe      	b.n	8002950 <Error_Handler+0x8>
	...

08002954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_MspInit+0x4c>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <HAL_MspInit+0x4c>)
 8002964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002968:	6453      	str	r3, [r2, #68]	; 0x44
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_MspInit+0x4c>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_MspInit+0x4c>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <HAL_MspInit+0x4c>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_MspInit+0x4c>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800

080029a4 <LL_DMA_EnableStream>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80029ae:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <LL_DMA_EnableStream+0x3c>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4908      	ldr	r1, [pc, #32]	; (80029e0 <LL_DMA_EnableStream+0x3c>)
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	440a      	add	r2, r1
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	4611      	mov	r1, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	440a      	add	r2, r1
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6013      	str	r3, [r2, #0]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	080084e4 	.word	0x080084e4

080029e4 <LL_DMA_DisableStream>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80029ee:	4a0c      	ldr	r2, [pc, #48]	; (8002a20 <LL_DMA_DisableStream+0x3c>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4908      	ldr	r1, [pc, #32]	; (8002a20 <LL_DMA_DisableStream+0x3c>)
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	440a      	add	r2, r1
 8002a04:	7812      	ldrb	r2, [r2, #0]
 8002a06:	4611      	mov	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	440a      	add	r2, r1
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	6013      	str	r3, [r2, #0]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	080084e4 	.word	0x080084e4

08002a24 <LL_DMA_SetDataLength>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8002a30:	4a0d      	ldr	r2, [pc, #52]	; (8002a68 <LL_DMA_SetDataLength+0x44>)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4413      	add	r3, r2
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	041b      	lsls	r3, r3, #16
 8002a44:	4908      	ldr	r1, [pc, #32]	; (8002a68 <LL_DMA_SetDataLength+0x44>)
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	440a      	add	r2, r1
 8002a4a:	7812      	ldrb	r2, [r2, #0]
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	440a      	add	r2, r1
 8002a52:	4611      	mov	r1, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	080084e4 	.word	0x080084e4

08002a6c <LL_DMA_GetDataLength>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8002a76:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <LL_DMA_GetDataLength+0x28>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	b29b      	uxth	r3, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	080084e4 	.word	0x080084e4

08002a98 <LL_USART_IsActiveFlag_ORE>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LL_USART_IsActiveFlag_IDLE>:
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	bf0c      	ite	eq
 8002ad2:	2301      	moveq	r3, #1
 8002ad4:	2300      	movne	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_USART_ClearFlag_ORE>:
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002af2:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_USART_ClearFlag_IDLE>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002b16:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <NMI_Handler+0x4>

08002b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b36:	e7fe      	b.n	8002b36 <HardFault_Handler+0x4>

08002b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <MemManage_Handler+0x4>

08002b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b42:	e7fe      	b.n	8002b42 <BusFault_Handler+0x4>

08002b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b48:	e7fe      	b.n	8002b48 <UsageFault_Handler+0x4>

08002b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b78:	f000 ffd4 	bl	8003b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if (LL_USART_IsActiveFlag_IDLE(USART3))
 8002b96:	4818      	ldr	r0, [pc, #96]	; (8002bf8 <USART3_IRQHandler+0x68>)
 8002b98:	f7ff ff91 	bl	8002abe <LL_USART_IsActiveFlag_IDLE>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01d      	beq.n	8002bde <USART3_IRQHandler+0x4e>
	{
		int len = RX_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_STREAM_1);
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	4815      	ldr	r0, [pc, #84]	; (8002bfc <USART3_IRQHandler+0x6c>)
 8002ba6:	f7ff ff61 	bl	8002a6c <LL_DMA_GetDataLength>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8002bb0:	607b      	str	r3, [r7, #4]
		pushPacket(&serialLine, rxBuffer, len);
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4912      	ldr	r1, [pc, #72]	; (8002c00 <USART3_IRQHandler+0x70>)
 8002bb6:	4813      	ldr	r0, [pc, #76]	; (8002c04 <USART3_IRQHandler+0x74>)
 8002bb8:	f005 f832 	bl	8007c20 <pushPacket>
		LL_USART_ClearFlag_IDLE(USART3);
 8002bbc:	480e      	ldr	r0, [pc, #56]	; (8002bf8 <USART3_IRQHandler+0x68>)
 8002bbe:	f7ff ffa3 	bl	8002b08 <LL_USART_ClearFlag_IDLE>
		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_1);
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	480d      	ldr	r0, [pc, #52]	; (8002bfc <USART3_IRQHandler+0x6c>)
 8002bc6:	f7ff ff0d 	bl	80029e4 <LL_DMA_DisableStream>
		LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_1, RX_BUFFER_SIZE);
 8002bca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bce:	2101      	movs	r1, #1
 8002bd0:	480a      	ldr	r0, [pc, #40]	; (8002bfc <USART3_IRQHandler+0x6c>)
 8002bd2:	f7ff ff27 	bl	8002a24 <LL_DMA_SetDataLength>
		LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4808      	ldr	r0, [pc, #32]	; (8002bfc <USART3_IRQHandler+0x6c>)
 8002bda:	f7ff fee3 	bl	80029a4 <LL_DMA_EnableStream>
	}

	if (LL_USART_IsActiveFlag_ORE(USART3)) LL_USART_ClearFlag_ORE(USART3);
 8002bde:	4806      	ldr	r0, [pc, #24]	; (8002bf8 <USART3_IRQHandler+0x68>)
 8002be0:	f7ff ff5a 	bl	8002a98 <LL_USART_IsActiveFlag_ORE>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <USART3_IRQHandler+0x60>
 8002bea:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <USART3_IRQHandler+0x68>)
 8002bec:	f7ff ff7a 	bl	8002ae4 <LL_USART_ClearFlag_ORE>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40004800 	.word	0x40004800
 8002bfc:	40026000 	.word	0x40026000
 8002c00:	20000d58 	.word	0x20000d58
 8002c04:	200005a4 	.word	0x200005a4

08002c08 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002c0e:	f003 fd8f 	bl	8006730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20001158 	.word	0x20001158

08002c1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c20:	4802      	ldr	r0, [pc, #8]	; (8002c2c <TIM6_DAC_IRQHandler+0x10>)
 8002c22:	f003 fd85 	bl	8006730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20001230 	.word	0x20001230

08002c30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <TIM7_IRQHandler+0x10>)
 8002c36:	f003 fd7b 	bl	8006730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20001308 	.word	0x20001308

08002c44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <DMA2_Stream0_IRQHandler+0x10>)
 8002c4a:	f001 fdbb 	bl	80047c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200003a0 	.word	0x200003a0

08002c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <SystemInit+0x20>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <SystemInit+0x20>)
 8002c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08c      	sub	sp, #48	; 0x30
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c82:	f107 030c 	add.w	r3, r7, #12
 8002c86:	2224      	movs	r2, #36	; 0x24
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f005 fb12 	bl	80082b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c98:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <MX_TIM1_Init+0xa8>)
 8002c9a:	4a23      	ldr	r2, [pc, #140]	; (8002d28 <MX_TIM1_Init+0xac>)
 8002c9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <MX_TIM1_Init+0xa8>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <MX_TIM1_Init+0xa8>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002caa:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <MX_TIM1_Init+0xa8>)
 8002cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <MX_TIM1_Init+0xa8>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <MX_TIM1_Init+0xa8>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cbe:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <MX_TIM1_Init+0xa8>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8002cd4:	2305      	movs	r3, #5
 8002cd6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8002ce4:	2305      	movs	r3, #5
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	4619      	mov	r1, r3
 8002cee:	480d      	ldr	r0, [pc, #52]	; (8002d24 <MX_TIM1_Init+0xa8>)
 8002cf0:	f003 fbea 	bl	80064c8 <HAL_TIM_Encoder_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002cfa:	f7ff fe25 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4806      	ldr	r0, [pc, #24]	; (8002d24 <MX_TIM1_Init+0xa8>)
 8002d0c:	f004 f978 	bl	8007000 <HAL_TIMEx_MasterConfigSynchronization>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002d16:	f7ff fe17 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	3730      	adds	r7, #48	; 0x30
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20001278 	.word	0x20001278
 8002d28:	40010000 	.word	0x40010000

08002d2c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08c      	sub	sp, #48	; 0x30
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	2224      	movs	r2, #36	; 0x24
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f005 faba 	bl	80082b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <MX_TIM2_Init+0xa4>)
 8002d4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d50:	4b1f      	ldr	r3, [pc, #124]	; (8002dd0 <MX_TIM2_Init+0xa4>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d56:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <MX_TIM2_Init+0xa4>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002d5c:	4b1c      	ldr	r3, [pc, #112]	; (8002dd0 <MX_TIM2_Init+0xa4>)
 8002d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d64:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <MX_TIM2_Init+0xa4>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d6a:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <MX_TIM2_Init+0xa4>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d70:	2303      	movs	r3, #3
 8002d72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8002d80:	2305      	movs	r3, #5
 8002d82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d84:	2300      	movs	r3, #0
 8002d86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8002d90:	2305      	movs	r3, #5
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002d94:	f107 030c 	add.w	r3, r7, #12
 8002d98:	4619      	mov	r1, r3
 8002d9a:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <MX_TIM2_Init+0xa4>)
 8002d9c:	f003 fb94 	bl	80064c8 <HAL_TIM_Encoder_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002da6:	f7ff fdcf 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	4619      	mov	r1, r3
 8002db6:	4806      	ldr	r0, [pc, #24]	; (8002dd0 <MX_TIM2_Init+0xa4>)
 8002db8:	f004 f922 	bl	8007000 <HAL_TIMEx_MasterConfigSynchronization>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002dc2:	f7ff fdc1 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dc6:	bf00      	nop
 8002dc8:	3730      	adds	r7, #48	; 0x30
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200012c0 	.word	0x200012c0

08002dd4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dda:	f107 0320 	add.w	r3, r7, #32
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	611a      	str	r2, [r3, #16]
 8002df2:	615a      	str	r2, [r3, #20]
 8002df4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002df6:	4b32      	ldr	r3, [pc, #200]	; (8002ec0 <MX_TIM3_Init+0xec>)
 8002df8:	4a32      	ldr	r2, [pc, #200]	; (8002ec4 <MX_TIM3_Init+0xf0>)
 8002dfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 8002dfc:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <MX_TIM3_Init+0xec>)
 8002dfe:	222c      	movs	r2, #44	; 0x2c
 8002e00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002e02:	4b2f      	ldr	r3, [pc, #188]	; (8002ec0 <MX_TIM3_Init+0xec>)
 8002e04:	2220      	movs	r2, #32
 8002e06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <MX_TIM3_Init+0xec>)
 8002e0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e10:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <MX_TIM3_Init+0xec>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e16:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <MX_TIM3_Init+0xec>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e1c:	4828      	ldr	r0, [pc, #160]	; (8002ec0 <MX_TIM3_Init+0xec>)
 8002e1e:	f003 fa3b 	bl	8006298 <HAL_TIM_PWM_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002e28:	f7ff fd8e 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e34:	f107 0320 	add.w	r3, r7, #32
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4821      	ldr	r0, [pc, #132]	; (8002ec0 <MX_TIM3_Init+0xec>)
 8002e3c:	f004 f8e0 	bl	8007000 <HAL_TIMEx_MasterConfigSynchronization>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002e46:	f7ff fd7f 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e4a:	2360      	movs	r3, #96	; 0x60
 8002e4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4817      	ldr	r0, [pc, #92]	; (8002ec0 <MX_TIM3_Init+0xec>)
 8002e62:	f003 fd6d 	bl	8006940 <HAL_TIM_PWM_ConfigChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002e6c:	f7ff fd6c 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e70:	1d3b      	adds	r3, r7, #4
 8002e72:	2204      	movs	r2, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4812      	ldr	r0, [pc, #72]	; (8002ec0 <MX_TIM3_Init+0xec>)
 8002e78:	f003 fd62 	bl	8006940 <HAL_TIM_PWM_ConfigChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002e82:	f7ff fd61 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	2208      	movs	r2, #8
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	480c      	ldr	r0, [pc, #48]	; (8002ec0 <MX_TIM3_Init+0xec>)
 8002e8e:	f003 fd57 	bl	8006940 <HAL_TIM_PWM_ConfigChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002e98:	f7ff fd56 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4807      	ldr	r0, [pc, #28]	; (8002ec0 <MX_TIM3_Init+0xec>)
 8002ea4:	f003 fd4c 	bl	8006940 <HAL_TIM_PWM_ConfigChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002eae:	f7ff fd4b 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002eb2:	4803      	ldr	r0, [pc, #12]	; (8002ec0 <MX_TIM3_Init+0xec>)
 8002eb4:	f000 fa96 	bl	80033e4 <HAL_TIM_MspPostInit>

}
 8002eb8:	bf00      	nop
 8002eba:	3728      	adds	r7, #40	; 0x28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	200011e8 	.word	0x200011e8
 8002ec4:	40000400 	.word	0x40000400

08002ec8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08c      	sub	sp, #48	; 0x30
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ece:	f107 030c 	add.w	r3, r7, #12
 8002ed2:	2224      	movs	r2, #36	; 0x24
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f005 f9ec 	bl	80082b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ee4:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <MX_TIM4_Init+0xa0>)
 8002ee6:	4a21      	ldr	r2, [pc, #132]	; (8002f6c <MX_TIM4_Init+0xa4>)
 8002ee8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002eea:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <MX_TIM4_Init+0xa0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <MX_TIM4_Init+0xa0>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <MX_TIM4_Init+0xa0>)
 8002ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002efc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efe:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <MX_TIM4_Init+0xa0>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f04:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <MX_TIM4_Init+0xa0>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f12:	2301      	movs	r3, #1
 8002f14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f22:	2301      	movs	r3, #1
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f26:	2300      	movs	r3, #0
 8002f28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	4619      	mov	r1, r3
 8002f34:	480c      	ldr	r0, [pc, #48]	; (8002f68 <MX_TIM4_Init+0xa0>)
 8002f36:	f003 fac7 	bl	80064c8 <HAL_TIM_Encoder_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002f40:	f7ff fd02 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f44:	2300      	movs	r3, #0
 8002f46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f4c:	1d3b      	adds	r3, r7, #4
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4805      	ldr	r0, [pc, #20]	; (8002f68 <MX_TIM4_Init+0xa0>)
 8002f52:	f004 f855 	bl	8007000 <HAL_TIMEx_MasterConfigSynchronization>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002f5c:	f7ff fcf4 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f60:	bf00      	nop
 8002f62:	3730      	adds	r7, #48	; 0x30
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	200011a0 	.word	0x200011a0
 8002f6c:	40000800 	.word	0x40000800

08002f70 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f76:	463b      	mov	r3, r7
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <MX_TIM6_Init+0x64>)
 8002f80:	4a15      	ldr	r2, [pc, #84]	; (8002fd8 <MX_TIM6_Init+0x68>)
 8002f82:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 45-1;
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <MX_TIM6_Init+0x64>)
 8002f86:	222c      	movs	r2, #44	; 0x2c
 8002f88:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <MX_TIM6_Init+0x64>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <MX_TIM6_Init+0x64>)
 8002f92:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f96:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <MX_TIM6_Init+0x64>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f9e:	480d      	ldr	r0, [pc, #52]	; (8002fd4 <MX_TIM6_Init+0x64>)
 8002fa0:	f003 f8ba 	bl	8006118 <HAL_TIM_Base_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002faa:	f7ff fccd 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002fb6:	463b      	mov	r3, r7
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <MX_TIM6_Init+0x64>)
 8002fbc:	f004 f820 	bl	8007000 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002fc6:	f7ff fcbf 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20001230 	.word	0x20001230
 8002fd8:	40001000 	.word	0x40001000

08002fdc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe2:	463b      	mov	r3, r7
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <MX_TIM7_Init+0x64>)
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <MX_TIM7_Init+0x68>)
 8002fee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 90-1;
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <MX_TIM7_Init+0x64>)
 8002ff2:	2259      	movs	r2, #89	; 0x59
 8002ff4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <MX_TIM7_Init+0x64>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8002ffc:	4b10      	ldr	r3, [pc, #64]	; (8003040 <MX_TIM7_Init+0x64>)
 8002ffe:	f242 720f 	movw	r2, #9999	; 0x270f
 8003002:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003004:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <MX_TIM7_Init+0x64>)
 8003006:	2200      	movs	r2, #0
 8003008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800300a:	480d      	ldr	r0, [pc, #52]	; (8003040 <MX_TIM7_Init+0x64>)
 800300c:	f003 f884 	bl	8006118 <HAL_TIM_Base_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003016:	f7ff fc97 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301e:	2300      	movs	r3, #0
 8003020:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003022:	463b      	mov	r3, r7
 8003024:	4619      	mov	r1, r3
 8003026:	4806      	ldr	r0, [pc, #24]	; (8003040 <MX_TIM7_Init+0x64>)
 8003028:	f003 ffea 	bl	8007000 <HAL_TIMEx_MasterConfigSynchronization>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003032:	f7ff fc89 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20001308 	.word	0x20001308
 8003044:	40001400 	.word	0x40001400

08003048 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08c      	sub	sp, #48	; 0x30
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800304e:	f107 030c 	add.w	r3, r7, #12
 8003052:	2224      	movs	r2, #36	; 0x24
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f005 f92c 	bl	80082b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800305c:	1d3b      	adds	r3, r7, #4
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003064:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <MX_TIM8_Init+0xa8>)
 8003066:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <MX_TIM8_Init+0xac>)
 8003068:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800306a:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <MX_TIM8_Init+0xa8>)
 800306c:	2200      	movs	r2, #0
 800306e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003070:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <MX_TIM8_Init+0xa8>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003076:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <MX_TIM8_Init+0xa8>)
 8003078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800307c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800307e:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <MX_TIM8_Init+0xa8>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003084:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <MX_TIM8_Init+0xa8>)
 8003086:	2200      	movs	r2, #0
 8003088:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <MX_TIM8_Init+0xa8>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003090:	2303      	movs	r3, #3
 8003092:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003098:	2301      	movs	r3, #1
 800309a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80030a0:	2305      	movs	r3, #5
 80030a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030a4:	2300      	movs	r3, #0
 80030a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030a8:	2301      	movs	r3, #1
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 80030b0:	2305      	movs	r3, #5
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80030b4:	f107 030c 	add.w	r3, r7, #12
 80030b8:	4619      	mov	r1, r3
 80030ba:	480d      	ldr	r0, [pc, #52]	; (80030f0 <MX_TIM8_Init+0xa8>)
 80030bc:	f003 fa04 	bl	80064c8 <HAL_TIM_Encoder_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80030c6:	f7ff fc3f 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4806      	ldr	r0, [pc, #24]	; (80030f0 <MX_TIM8_Init+0xa8>)
 80030d8:	f003 ff92 	bl	8007000 <HAL_TIMEx_MasterConfigSynchronization>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80030e2:	f7ff fc31 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80030e6:	bf00      	nop
 80030e8:	3730      	adds	r7, #48	; 0x30
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20001158 	.word	0x20001158
 80030f4:	40010400 	.word	0x40010400

080030f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b090      	sub	sp, #64	; 0x40
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a78      	ldr	r2, [pc, #480]	; (80032f8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d12d      	bne.n	8003176 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
 800311e:	4b77      	ldr	r3, [pc, #476]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	4a76      	ldr	r2, [pc, #472]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6453      	str	r3, [r2, #68]	; 0x44
 800312a:	4b74      	ldr	r3, [pc, #464]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
 800313a:	4b70      	ldr	r3, [pc, #448]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a6f      	ldr	r2, [pc, #444]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b6d      	ldr	r3, [pc, #436]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_TIM1_B_Pin|Encoder_TIM1_A_Pin;
 8003152:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003158:	2302      	movs	r3, #2
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800315c:	2301      	movs	r3, #1
 800315e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003160:	2300      	movs	r3, #0
 8003162:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003164:	2301      	movs	r3, #1
 8003166:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800316c:	4619      	mov	r1, r3
 800316e:	4864      	ldr	r0, [pc, #400]	; (8003300 <HAL_TIM_Encoder_MspInit+0x208>)
 8003170:	f002 f886 	bl	8005280 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003174:	e0bc      	b.n	80032f0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(tim_encoderHandle->Instance==TIM2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317e:	d14c      	bne.n	800321a <HAL_TIM_Encoder_MspInit+0x122>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003180:	2300      	movs	r3, #0
 8003182:	623b      	str	r3, [r7, #32]
 8003184:	4b5d      	ldr	r3, [pc, #372]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	4a5c      	ldr	r2, [pc, #368]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6413      	str	r3, [r2, #64]	; 0x40
 8003190:	4b5a      	ldr	r3, [pc, #360]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	623b      	str	r3, [r7, #32]
 800319a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	4b56      	ldr	r3, [pc, #344]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	4a55      	ldr	r2, [pc, #340]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6313      	str	r3, [r2, #48]	; 0x30
 80031ac:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	4b4f      	ldr	r3, [pc, #316]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	4a4e      	ldr	r2, [pc, #312]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	6313      	str	r3, [r2, #48]	; 0x30
 80031c8:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Encoder_TIM2_A_Pin;
 80031d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031de:	2301      	movs	r3, #1
 80031e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031e6:	2301      	movs	r3, #1
 80031e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Encoder_TIM2_A_GPIO_Port, &GPIO_InitStruct);
 80031ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031ee:	4619      	mov	r1, r3
 80031f0:	4843      	ldr	r0, [pc, #268]	; (8003300 <HAL_TIM_Encoder_MspInit+0x208>)
 80031f2:	f002 f845 	bl	8005280 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_TIM2_B_Pin;
 80031f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fc:	2302      	movs	r3, #2
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003200:	2301      	movs	r3, #1
 8003202:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003204:	2300      	movs	r3, #0
 8003206:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003208:	2301      	movs	r3, #1
 800320a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Encoder_TIM2_B_GPIO_Port, &GPIO_InitStruct);
 800320c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003210:	4619      	mov	r1, r3
 8003212:	483c      	ldr	r0, [pc, #240]	; (8003304 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003214:	f002 f834 	bl	8005280 <HAL_GPIO_Init>
}
 8003218:	e06a      	b.n	80032f0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(tim_encoderHandle->Instance==TIM4)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a3a      	ldr	r2, [pc, #232]	; (8003308 <HAL_TIM_Encoder_MspInit+0x210>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d12c      	bne.n	800327e <HAL_TIM_Encoder_MspInit+0x186>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	4b34      	ldr	r3, [pc, #208]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	4a33      	ldr	r2, [pc, #204]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 800322e:	f043 0304 	orr.w	r3, r3, #4
 8003232:	6413      	str	r3, [r2, #64]	; 0x40
 8003234:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	4a2c      	ldr	r2, [pc, #176]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 800324a:	f043 0302 	orr.w	r3, r3, #2
 800324e:	6313      	str	r3, [r2, #48]	; 0x30
 8003250:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Encoder_TIM4_A_Pin|Encoder_TIM4_B_Pin;
 800325c:	23c0      	movs	r3, #192	; 0xc0
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003260:	2302      	movs	r3, #2
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003264:	2301      	movs	r3, #1
 8003266:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003268:	2300      	movs	r3, #0
 800326a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800326c:	2302      	movs	r3, #2
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003270:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003274:	4619      	mov	r1, r3
 8003276:	4823      	ldr	r0, [pc, #140]	; (8003304 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003278:	f002 f802 	bl	8005280 <HAL_GPIO_Init>
}
 800327c:	e038      	b.n	80032f0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(tim_encoderHandle->Instance==TIM8)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a22      	ldr	r2, [pc, #136]	; (800330c <HAL_TIM_Encoder_MspInit+0x214>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d133      	bne.n	80032f0 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	4a1a      	ldr	r2, [pc, #104]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 8003292:	f043 0302 	orr.w	r3, r3, #2
 8003296:	6453      	str	r3, [r2, #68]	; 0x44
 8003298:	4b18      	ldr	r3, [pc, #96]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	4b14      	ldr	r3, [pc, #80]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	4a13      	ldr	r2, [pc, #76]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 80032ae:	f043 0304 	orr.w	r3, r3, #4
 80032b2:	6313      	str	r3, [r2, #48]	; 0x30
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_TIM_Encoder_MspInit+0x204>)
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_TIM8_A_Pin|Encoder_TIM8_B_Pin;
 80032c0:	23c0      	movs	r3, #192	; 0xc0
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032c8:	2301      	movs	r3, #1
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032cc:	2300      	movs	r3, #0
 80032ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032d0:	2303      	movs	r3, #3
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032d8:	4619      	mov	r1, r3
 80032da:	480d      	ldr	r0, [pc, #52]	; (8003310 <HAL_TIM_Encoder_MspInit+0x218>)
 80032dc:	f001 ffd0 	bl	8005280 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80032e0:	2200      	movs	r2, #0
 80032e2:	2100      	movs	r1, #0
 80032e4:	202c      	movs	r0, #44	; 0x2c
 80032e6:	f001 f930 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80032ea:	202c      	movs	r0, #44	; 0x2c
 80032ec:	f001 f949 	bl	8004582 <HAL_NVIC_EnableIRQ>
}
 80032f0:	bf00      	nop
 80032f2:	3740      	adds	r7, #64	; 0x40
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40010000 	.word	0x40010000
 80032fc:	40023800 	.word	0x40023800
 8003300:	40020000 	.word	0x40020000
 8003304:	40020400 	.word	0x40020400
 8003308:	40000800 	.word	0x40000800
 800330c:	40010400 	.word	0x40010400
 8003310:	40020800 	.word	0x40020800

08003314 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <HAL_TIM_PWM_MspInit+0x3c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d10d      	bne.n	8003342 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <HAL_TIM_PWM_MspInit+0x40>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <HAL_TIM_PWM_MspInit+0x40>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <HAL_TIM_PWM_MspInit+0x40>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40000400 	.word	0x40000400
 8003354:	40023800 	.word	0x40023800

08003358 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <HAL_TIM_Base_MspInit+0x80>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d116      	bne.n	8003398 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_TIM_Base_MspInit+0x84>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	4a1a      	ldr	r2, [pc, #104]	; (80033dc <HAL_TIM_Base_MspInit+0x84>)
 8003374:	f043 0310 	orr.w	r3, r3, #16
 8003378:	6413      	str	r3, [r2, #64]	; 0x40
 800337a:	4b18      	ldr	r3, [pc, #96]	; (80033dc <HAL_TIM_Base_MspInit+0x84>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003386:	2200      	movs	r2, #0
 8003388:	2100      	movs	r1, #0
 800338a:	2036      	movs	r0, #54	; 0x36
 800338c:	f001 f8dd 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003390:	2036      	movs	r0, #54	; 0x36
 8003392:	f001 f8f6 	bl	8004582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003396:	e01a      	b.n	80033ce <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a10      	ldr	r2, [pc, #64]	; (80033e0 <HAL_TIM_Base_MspInit+0x88>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d115      	bne.n	80033ce <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <HAL_TIM_Base_MspInit+0x84>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <HAL_TIM_Base_MspInit+0x84>)
 80033ac:	f043 0320 	orr.w	r3, r3, #32
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_TIM_Base_MspInit+0x84>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80033be:	2200      	movs	r2, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	2037      	movs	r0, #55	; 0x37
 80033c4:	f001 f8c1 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80033c8:	2037      	movs	r0, #55	; 0x37
 80033ca:	f001 f8da 	bl	8004582 <HAL_NVIC_EnableIRQ>
}
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40001000 	.word	0x40001000
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40001400 	.word	0x40001400

080033e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	; 0x28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a21      	ldr	r2, [pc, #132]	; (8003488 <HAL_TIM_MspPostInit+0xa4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d13b      	bne.n	800347e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_TIM_MspPostInit+0xa8>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a1f      	ldr	r2, [pc, #124]	; (800348c <HAL_TIM_MspPostInit+0xa8>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_TIM_MspPostInit+0xa8>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_TIM_MspPostInit+0xa8>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	4a18      	ldr	r2, [pc, #96]	; (800348c <HAL_TIM_MspPostInit+0xa8>)
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	6313      	str	r3, [r2, #48]	; 0x30
 8003432:	4b16      	ldr	r3, [pc, #88]	; (800348c <HAL_TIM_MspPostInit+0xa8>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800343e:	23c0      	movs	r3, #192	; 0xc0
 8003440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003442:	2302      	movs	r3, #2
 8003444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800344e:	2302      	movs	r3, #2
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003452:	f107 0314 	add.w	r3, r7, #20
 8003456:	4619      	mov	r1, r3
 8003458:	480d      	ldr	r0, [pc, #52]	; (8003490 <HAL_TIM_MspPostInit+0xac>)
 800345a:	f001 ff11 	bl	8005280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800345e:	2303      	movs	r3, #3
 8003460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346a:	2300      	movs	r3, #0
 800346c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800346e:	2302      	movs	r3, #2
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	4619      	mov	r1, r3
 8003478:	4806      	ldr	r0, [pc, #24]	; (8003494 <HAL_TIM_MspPostInit+0xb0>)
 800347a:	f001 ff01 	bl	8005280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800347e:	bf00      	nop
 8003480:	3728      	adds	r7, #40	; 0x28
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40000400 	.word	0x40000400
 800348c:	40023800 	.word	0x40023800
 8003490:	40020000 	.word	0x40020000
 8003494:	40020400 	.word	0x40020400

08003498 <__NVIC_GetPriorityGrouping>:
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <__NVIC_GetPriorityGrouping+0x18>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 0307 	and.w	r3, r3, #7
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_EnableIRQ>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	db0b      	blt.n	80034de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	4907      	ldr	r1, [pc, #28]	; (80034ec <__NVIC_EnableIRQ+0x38>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2001      	movs	r0, #1
 80034d6:	fa00 f202 	lsl.w	r2, r0, r2
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	e000e100 	.word	0xe000e100

080034f0 <__NVIC_SetPriority>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	db0a      	blt.n	800351a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	490c      	ldr	r1, [pc, #48]	; (800353c <__NVIC_SetPriority+0x4c>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	440b      	add	r3, r1
 8003514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003518:	e00a      	b.n	8003530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4908      	ldr	r1, [pc, #32]	; (8003540 <__NVIC_SetPriority+0x50>)
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	3b04      	subs	r3, #4
 8003528:	0112      	lsls	r2, r2, #4
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	440b      	add	r3, r1
 800352e:	761a      	strb	r2, [r3, #24]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000e100 	.word	0xe000e100
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <NVIC_EncodePriority>:
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f1c3 0307 	rsb	r3, r3, #7
 800355e:	2b04      	cmp	r3, #4
 8003560:	bf28      	it	cs
 8003562:	2304      	movcs	r3, #4
 8003564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3304      	adds	r3, #4
 800356a:	2b06      	cmp	r3, #6
 800356c:	d902      	bls.n	8003574 <NVIC_EncodePriority+0x30>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3b03      	subs	r3, #3
 8003572:	e000      	b.n	8003576 <NVIC_EncodePriority+0x32>
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	f04f 32ff 	mov.w	r2, #4294967295
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	401a      	ands	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	43d9      	mvns	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	4313      	orrs	r3, r2
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3724      	adds	r7, #36	; 0x24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <LL_DMA_SetDataTransferDirection>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80035b8:	4a0d      	ldr	r2, [pc, #52]	; (80035f0 <LL_DMA_SetDataTransferDirection+0x44>)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4413      	add	r3, r2
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035cc:	4908      	ldr	r1, [pc, #32]	; (80035f0 <LL_DMA_SetDataTransferDirection+0x44>)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	440b      	add	r3, r1
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	4619      	mov	r1, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	440b      	add	r3, r1
 80035da:	4619      	mov	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	08008504 	.word	0x08008504

080035f4 <LL_DMA_SetMode>:
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8003600:	4a0d      	ldr	r2, [pc, #52]	; (8003638 <LL_DMA_SetMode+0x44>)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4413      	add	r3, r2
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4413      	add	r3, r2
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8003614:	4908      	ldr	r1, [pc, #32]	; (8003638 <LL_DMA_SetMode+0x44>)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	440b      	add	r3, r1
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	4619      	mov	r1, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	440b      	add	r3, r1
 8003622:	4619      	mov	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	08008504 	.word	0x08008504

0800363c <LL_DMA_SetPeriphIncMode>:
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8003648:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <LL_DMA_SetPeriphIncMode+0x44>)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4413      	add	r3, r2
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4413      	add	r3, r2
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800365c:	4908      	ldr	r1, [pc, #32]	; (8003680 <LL_DMA_SetPeriphIncMode+0x44>)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	440b      	add	r3, r1
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	4619      	mov	r1, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	440b      	add	r3, r1
 800366a:	4619      	mov	r1, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	08008504 	.word	0x08008504

08003684 <LL_DMA_SetMemoryIncMode>:
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8003690:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <LL_DMA_SetMemoryIncMode+0x44>)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4413      	add	r3, r2
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036a4:	4908      	ldr	r1, [pc, #32]	; (80036c8 <LL_DMA_SetMemoryIncMode+0x44>)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	440b      	add	r3, r1
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	4619      	mov	r1, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	440b      	add	r3, r1
 80036b2:	4619      	mov	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	08008504 	.word	0x08008504

080036cc <LL_DMA_SetPeriphSize>:
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80036d8:	4a0d      	ldr	r2, [pc, #52]	; (8003710 <LL_DMA_SetPeriphSize+0x44>)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4413      	add	r3, r2
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4413      	add	r3, r2
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80036ec:	4908      	ldr	r1, [pc, #32]	; (8003710 <LL_DMA_SetPeriphSize+0x44>)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	440b      	add	r3, r1
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	440b      	add	r3, r1
 80036fa:	4619      	mov	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	08008504 	.word	0x08008504

08003714 <LL_DMA_SetMemorySize>:
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8003720:	4a0d      	ldr	r2, [pc, #52]	; (8003758 <LL_DMA_SetMemorySize+0x44>)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4413      	add	r3, r2
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4413      	add	r3, r2
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8003734:	4908      	ldr	r1, [pc, #32]	; (8003758 <LL_DMA_SetMemorySize+0x44>)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	440b      	add	r3, r1
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	4619      	mov	r1, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	440b      	add	r3, r1
 8003742:	4619      	mov	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	08008504 	.word	0x08008504

0800375c <LL_DMA_SetStreamPriorityLevel>:
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8003768:	4a0d      	ldr	r2, [pc, #52]	; (80037a0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4413      	add	r3, r2
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4413      	add	r3, r2
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800377c:	4908      	ldr	r1, [pc, #32]	; (80037a0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	440b      	add	r3, r1
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	4619      	mov	r1, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	440b      	add	r3, r1
 800378a:	4619      	mov	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	08008504 	.word	0x08008504

080037a4 <LL_DMA_SetChannelSelection>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80037b0:	4a0d      	ldr	r2, [pc, #52]	; (80037e8 <LL_DMA_SetChannelSelection+0x44>)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4413      	add	r3, r2
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4413      	add	r3, r2
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80037c4:	4908      	ldr	r1, [pc, #32]	; (80037e8 <LL_DMA_SetChannelSelection+0x44>)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	440b      	add	r3, r1
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	4619      	mov	r1, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	440b      	add	r3, r1
 80037d2:	4619      	mov	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	08008504 	.word	0x08008504

080037ec <LL_DMA_DisableFifoMode>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80037f6:	4a0c      	ldr	r2, [pc, #48]	; (8003828 <LL_DMA_DisableFifoMode+0x3c>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	4413      	add	r3, r2
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4413      	add	r3, r2
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	4908      	ldr	r1, [pc, #32]	; (8003828 <LL_DMA_DisableFifoMode+0x3c>)
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	440a      	add	r2, r1
 800380c:	7812      	ldrb	r2, [r2, #0]
 800380e:	4611      	mov	r1, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	440a      	add	r2, r1
 8003814:	f023 0304 	bic.w	r3, r3, #4
 8003818:	6153      	str	r3, [r2, #20]
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	08008504 	.word	0x08008504

0800382c <LL_USART_Enable>:
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	60da      	str	r2, [r3, #12]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <LL_USART_ConfigAsyncMode>:
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	615a      	str	r2, [r3, #20]
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <LL_AHB1_GRP1_EnableClock>:
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003884:	4907      	ldr	r1, [pc, #28]	; (80038a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4313      	orrs	r3, r2
 800388a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800388e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4013      	ands	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003896:	68fb      	ldr	r3, [r7, #12]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40023800 	.word	0x40023800

080038a8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80038b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b4:	4907      	ldr	r1, [pc, #28]	; (80038d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80038be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4013      	ands	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038c6:	68fb      	ldr	r3, [r7, #12]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40023800 	.word	0x40023800

080038d8 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08e      	sub	sp, #56	; 0x38
 80038dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80038de:	f107 031c 	add.w	r3, r7, #28
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	609a      	str	r2, [r3, #8]
 80038ea:	60da      	str	r2, [r3, #12]
 80038ec:	611a      	str	r2, [r3, #16]
 80038ee:	615a      	str	r2, [r3, #20]
 80038f0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f2:	1d3b      	adds	r3, r7, #4
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	611a      	str	r2, [r3, #16]
 8003900:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8003902:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003906:	f7ff ffcf 	bl	80038a8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800390a:	2004      	movs	r0, #4
 800390c:	f7ff ffb4 	bl	8003878 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003910:	2002      	movs	r0, #2
 8003912:	f7ff ffb1 	bl	8003878 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PB10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003916:	2320      	movs	r3, #32
 8003918:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800391a:	2302      	movs	r3, #2
 800391c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800391e:	2303      	movs	r3, #3
 8003920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800392a:	2307      	movs	r3, #7
 800392c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800392e:	1d3b      	adds	r3, r7, #4
 8003930:	4619      	mov	r1, r3
 8003932:	4839      	ldr	r0, [pc, #228]	; (8003a18 <MX_USART3_UART_Init+0x140>)
 8003934:	f003 fcf9 	bl	800732a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800393c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800393e:	2302      	movs	r3, #2
 8003940:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003942:	2303      	movs	r3, #3
 8003944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800394e:	2307      	movs	r3, #7
 8003950:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4831      	ldr	r0, [pc, #196]	; (8003a1c <MX_USART3_UART_Init+0x144>)
 8003958:	f003 fce7 	bl	800732a <LL_GPIO_Init>

  /* USART3 DMA Init */

  /* USART3_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_1, LL_DMA_CHANNEL_4);
 800395c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003960:	2101      	movs	r1, #1
 8003962:	482f      	ldr	r0, [pc, #188]	; (8003a20 <MX_USART3_UART_Init+0x148>)
 8003964:	f7ff ff1e 	bl	80037a4 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003968:	2200      	movs	r2, #0
 800396a:	2101      	movs	r1, #1
 800396c:	482c      	ldr	r0, [pc, #176]	; (8003a20 <MX_USART3_UART_Init+0x148>)
 800396e:	f7ff fe1d 	bl	80035ac <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 8003972:	2200      	movs	r2, #0
 8003974:	2101      	movs	r1, #1
 8003976:	482a      	ldr	r0, [pc, #168]	; (8003a20 <MX_USART3_UART_Init+0x148>)
 8003978:	f7ff fef0 	bl	800375c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 800397c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003980:	2101      	movs	r1, #1
 8003982:	4827      	ldr	r0, [pc, #156]	; (8003a20 <MX_USART3_UART_Init+0x148>)
 8003984:	f7ff fe36 	bl	80035f4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8003988:	2200      	movs	r2, #0
 800398a:	2101      	movs	r1, #1
 800398c:	4824      	ldr	r0, [pc, #144]	; (8003a20 <MX_USART3_UART_Init+0x148>)
 800398e:	f7ff fe55 	bl	800363c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8003992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003996:	2101      	movs	r1, #1
 8003998:	4821      	ldr	r0, [pc, #132]	; (8003a20 <MX_USART3_UART_Init+0x148>)
 800399a:	f7ff fe73 	bl	8003684 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 800399e:	2200      	movs	r2, #0
 80039a0:	2101      	movs	r1, #1
 80039a2:	481f      	ldr	r0, [pc, #124]	; (8003a20 <MX_USART3_UART_Init+0x148>)
 80039a4:	f7ff fe92 	bl	80036cc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 80039a8:	2200      	movs	r2, #0
 80039aa:	2101      	movs	r1, #1
 80039ac:	481c      	ldr	r0, [pc, #112]	; (8003a20 <MX_USART3_UART_Init+0x148>)
 80039ae:	f7ff feb1 	bl	8003714 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 80039b2:	2101      	movs	r1, #1
 80039b4:	481a      	ldr	r0, [pc, #104]	; (8003a20 <MX_USART3_UART_Init+0x148>)
 80039b6:	f7ff ff19 	bl	80037ec <LL_DMA_DisableFifoMode>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80039ba:	f7ff fd6d 	bl	8003498 <__NVIC_GetPriorityGrouping>
 80039be:	4603      	mov	r3, r0
 80039c0:	2200      	movs	r2, #0
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fdbd 	bl	8003544 <NVIC_EncodePriority>
 80039ca:	4603      	mov	r3, r0
 80039cc:	4619      	mov	r1, r3
 80039ce:	2027      	movs	r0, #39	; 0x27
 80039d0:	f7ff fd8e 	bl	80034f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80039d4:	2027      	movs	r0, #39	; 0x27
 80039d6:	f7ff fd6d 	bl	80034b4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 1000000;
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <MX_USART3_UART_Init+0x14c>)
 80039dc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80039de:	2300      	movs	r3, #0
 80039e0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80039e2:	2300      	movs	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80039e6:	2300      	movs	r3, #0
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80039ea:	230c      	movs	r3, #12
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80039ee:	2300      	movs	r3, #0
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80039f2:	2300      	movs	r3, #0
 80039f4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80039f6:	f107 031c 	add.w	r3, r7, #28
 80039fa:	4619      	mov	r1, r3
 80039fc:	480a      	ldr	r0, [pc, #40]	; (8003a28 <MX_USART3_UART_Init+0x150>)
 80039fe:	f004 f845 	bl	8007a8c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8003a02:	4809      	ldr	r0, [pc, #36]	; (8003a28 <MX_USART3_UART_Init+0x150>)
 8003a04:	f7ff ff22 	bl	800384c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8003a08:	4807      	ldr	r0, [pc, #28]	; (8003a28 <MX_USART3_UART_Init+0x150>)
 8003a0a:	f7ff ff0f 	bl	800382c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a0e:	bf00      	nop
 8003a10:	3738      	adds	r7, #56	; 0x38
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40020800 	.word	0x40020800
 8003a1c:	40020400 	.word	0x40020400
 8003a20:	40026000 	.word	0x40026000
 8003a24:	000f4240 	.word	0x000f4240
 8003a28:	40004800 	.word	0x40004800

08003a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a30:	480d      	ldr	r0, [pc, #52]	; (8003a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a32:	490e      	ldr	r1, [pc, #56]	; (8003a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a34:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a38:	e002      	b.n	8003a40 <LoopCopyDataInit>

08003a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a3e:	3304      	adds	r3, #4

08003a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a44:	d3f9      	bcc.n	8003a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a46:	4a0b      	ldr	r2, [pc, #44]	; (8003a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a48:	4c0b      	ldr	r4, [pc, #44]	; (8003a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a4c:	e001      	b.n	8003a52 <LoopFillZerobss>

08003a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a50:	3204      	adds	r2, #4

08003a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a54:	d3fb      	bcc.n	8003a4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a56:	f7ff f8ff 	bl	8002c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a5a:	f004 fbf9 	bl	8008250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a5e:	f7fe f803 	bl	8001a68 <main>
  bx  lr    
 8003a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a6c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8003a70:	08008524 	.word	0x08008524
  ldr r2, =_sbss
 8003a74:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8003a78:	20001374 	.word	0x20001374

08003a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a7c:	e7fe      	b.n	8003a7c <ADC_IRQHandler>
	...

08003a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <HAL_Init+0x40>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0d      	ldr	r2, [pc, #52]	; (8003ac0 <HAL_Init+0x40>)
 8003a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <HAL_Init+0x40>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0a      	ldr	r2, [pc, #40]	; (8003ac0 <HAL_Init+0x40>)
 8003a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a9c:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <HAL_Init+0x40>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <HAL_Init+0x40>)
 8003aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aa8:	2003      	movs	r0, #3
 8003aaa:	f000 fd43 	bl	8004534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f000 f808 	bl	8003ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ab4:	f7fe ff4e 	bl	8002954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023c00 	.word	0x40023c00

08003ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003acc:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <HAL_InitTick+0x54>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_InitTick+0x58>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fd5b 	bl	800459e <HAL_SYSTICK_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e00e      	b.n	8003b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b0f      	cmp	r3, #15
 8003af6:	d80a      	bhi.n	8003b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003af8:	2200      	movs	r2, #0
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	f000 fd23 	bl	800454a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b04:	4a06      	ldr	r2, [pc, #24]	; (8003b20 <HAL_InitTick+0x5c>)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e000      	b.n	8003b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000010 	.word	0x20000010
 8003b1c:	20000018 	.word	0x20000018
 8003b20:	20000014 	.word	0x20000014

08003b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_IncTick+0x20>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <HAL_IncTick+0x24>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4413      	add	r3, r2
 8003b34:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <HAL_IncTick+0x24>)
 8003b36:	6013      	str	r3, [r2, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20000018 	.word	0x20000018
 8003b48:	20001350 	.word	0x20001350

08003b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <HAL_GetTick+0x14>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20001350 	.word	0x20001350

08003b64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e033      	b.n	8003be2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd fcb8 	bl	80014f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003baa:	f023 0302 	bic.w	r3, r3, #2
 8003bae:	f043 0202 	orr.w	r2, r3, #2
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa6e 	bl	8004098 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	f043 0201 	orr.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
 8003bd2:	e001      	b.n	8003bd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_ADC_Start_DMA+0x1e>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e0e9      	b.n	8003dde <HAL_ADC_Start_DMA+0x1f2>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d018      	beq.n	8003c52 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c30:	4b6d      	ldr	r3, [pc, #436]	; (8003de8 <HAL_ADC_Start_DMA+0x1fc>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a6d      	ldr	r2, [pc, #436]	; (8003dec <HAL_ADC_Start_DMA+0x200>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	0c9a      	lsrs	r2, r3, #18
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c44:	e002      	b.n	8003c4c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f9      	bne.n	8003c46 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c60:	d107      	bne.n	8003c72 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c70:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	f040 80a1 	bne.w	8003dc4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc0:	d106      	bne.n	8003cd0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f023 0206 	bic.w	r2, r3, #6
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
 8003cce:	e002      	b.n	8003cd6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cde:	4b44      	ldr	r3, [pc, #272]	; (8003df0 <HAL_ADC_Start_DMA+0x204>)
 8003ce0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	4a43      	ldr	r2, [pc, #268]	; (8003df4 <HAL_ADC_Start_DMA+0x208>)
 8003ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	4a42      	ldr	r2, [pc, #264]	; (8003df8 <HAL_ADC_Start_DMA+0x20c>)
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	4a41      	ldr	r2, [pc, #260]	; (8003dfc <HAL_ADC_Start_DMA+0x210>)
 8003cf8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d02:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d12:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d22:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	334c      	adds	r3, #76	; 0x4c
 8003d2e:	4619      	mov	r1, r3
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f000 fcee 	bl	8004714 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d12a      	bne.n	8003d9a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2d      	ldr	r2, [pc, #180]	; (8003e00 <HAL_ADC_Start_DMA+0x214>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d015      	beq.n	8003d7a <HAL_ADC_Start_DMA+0x18e>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <HAL_ADC_Start_DMA+0x218>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d105      	bne.n	8003d64 <HAL_ADC_Start_DMA+0x178>
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <HAL_ADC_Start_DMA+0x204>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a27      	ldr	r2, [pc, #156]	; (8003e08 <HAL_ADC_Start_DMA+0x21c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d136      	bne.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
 8003d6e:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <HAL_ADC_Start_DMA+0x204>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d130      	bne.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d129      	bne.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	e020      	b.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <HAL_ADC_Start_DMA+0x214>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d11b      	bne.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d114      	bne.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dc0:	609a      	str	r2, [r3, #8]
 8003dc2:	e00b      	b.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f043 0210 	orr.w	r2, r3, #16
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000010 	.word	0x20000010
 8003dec:	431bde83 	.word	0x431bde83
 8003df0:	40012300 	.word	0x40012300
 8003df4:	08004291 	.word	0x08004291
 8003df8:	0800434b 	.word	0x0800434b
 8003dfc:	08004367 	.word	0x08004367
 8003e00:	40012000 	.word	0x40012000
 8003e04:	40012100 	.word	0x40012100
 8003e08:	40012200 	.word	0x40012200

08003e0c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x1c>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e113      	b.n	8004078 <HAL_ADC_ConfigChannel+0x244>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b09      	cmp	r3, #9
 8003e5e:	d925      	bls.n	8003eac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68d9      	ldr	r1, [r3, #12]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	3b1e      	subs	r3, #30
 8003e76:	2207      	movs	r2, #7
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43da      	mvns	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	400a      	ands	r2, r1
 8003e84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68d9      	ldr	r1, [r3, #12]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	4618      	mov	r0, r3
 8003e98:	4603      	mov	r3, r0
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	4403      	add	r3, r0
 8003e9e:	3b1e      	subs	r3, #30
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	e022      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6919      	ldr	r1, [r3, #16]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4613      	mov	r3, r2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4413      	add	r3, r2
 8003ec0:	2207      	movs	r2, #7
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	400a      	ands	r2, r1
 8003ece:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6919      	ldr	r1, [r3, #16]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4403      	add	r3, r0
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d824      	bhi.n	8003f44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	3b05      	subs	r3, #5
 8003f0c:	221f      	movs	r2, #31
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43da      	mvns	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	400a      	ands	r2, r1
 8003f1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	4618      	mov	r0, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	3b05      	subs	r3, #5
 8003f36:	fa00 f203 	lsl.w	r2, r0, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34
 8003f42:	e04c      	b.n	8003fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b0c      	cmp	r3, #12
 8003f4a:	d824      	bhi.n	8003f96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3b23      	subs	r3, #35	; 0x23
 8003f5e:	221f      	movs	r2, #31
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43da      	mvns	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	3b23      	subs	r3, #35	; 0x23
 8003f88:	fa00 f203 	lsl.w	r2, r0, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
 8003f94:	e023      	b.n	8003fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3b41      	subs	r3, #65	; 0x41
 8003fa8:	221f      	movs	r2, #31
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	3b41      	subs	r3, #65	; 0x41
 8003fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fde:	4b29      	ldr	r3, [pc, #164]	; (8004084 <HAL_ADC_ConfigChannel+0x250>)
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a28      	ldr	r2, [pc, #160]	; (8004088 <HAL_ADC_ConfigChannel+0x254>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10f      	bne.n	800400c <HAL_ADC_ConfigChannel+0x1d8>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b12      	cmp	r3, #18
 8003ff2:	d10b      	bne.n	800400c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <HAL_ADC_ConfigChannel+0x254>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d12b      	bne.n	800406e <HAL_ADC_ConfigChannel+0x23a>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1c      	ldr	r2, [pc, #112]	; (800408c <HAL_ADC_ConfigChannel+0x258>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d003      	beq.n	8004028 <HAL_ADC_ConfigChannel+0x1f4>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b11      	cmp	r3, #17
 8004026:	d122      	bne.n	800406e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a11      	ldr	r2, [pc, #68]	; (800408c <HAL_ADC_ConfigChannel+0x258>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d111      	bne.n	800406e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800404a:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_ADC_ConfigChannel+0x25c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a11      	ldr	r2, [pc, #68]	; (8004094 <HAL_ADC_ConfigChannel+0x260>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	0c9a      	lsrs	r2, r3, #18
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004060:	e002      	b.n	8004068 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3b01      	subs	r3, #1
 8004066:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f9      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40012300 	.word	0x40012300
 8004088:	40012000 	.word	0x40012000
 800408c:	10000012 	.word	0x10000012
 8004090:	20000010 	.word	0x20000010
 8004094:	431bde83 	.word	0x431bde83

08004098 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040a0:	4b79      	ldr	r3, [pc, #484]	; (8004288 <ADC_Init+0x1f0>)
 80040a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	021a      	lsls	r2, r3, #8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80040f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6899      	ldr	r1, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	4a58      	ldr	r2, [pc, #352]	; (800428c <ADC_Init+0x1f4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800413e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6899      	ldr	r1, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004160:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6899      	ldr	r1, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	e00f      	b.n	8004196 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004184:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004194:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0202 	bic.w	r2, r2, #2
 80041a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6899      	ldr	r1, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	7e1b      	ldrb	r3, [r3, #24]
 80041b0:	005a      	lsls	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01b      	beq.n	80041fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80041e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	3b01      	subs	r3, #1
 80041f0:	035a      	lsls	r2, r3, #13
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	e007      	b.n	800420c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800420a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	3b01      	subs	r3, #1
 8004228:	051a      	lsls	r2, r3, #20
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6899      	ldr	r1, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800424e:	025a      	lsls	r2, r3, #9
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004266:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6899      	ldr	r1, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	029a      	lsls	r2, r3, #10
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40012300 	.word	0x40012300
 800428c:	0f000001 	.word	0x0f000001

08004290 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d13c      	bne.n	8004324 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d12b      	bne.n	800431c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d127      	bne.n	800431c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d006      	beq.n	80042e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d119      	bne.n	800431c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0220 	bic.w	r2, r2, #32
 80042f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d105      	bne.n	800431c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	f043 0201 	orr.w	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7fd fd99 	bl	8001e54 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004322:	e00e      	b.n	8004342 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff fd75 	bl	8003e20 <HAL_ADC_ErrorCallback>
}
 8004336:	e004      	b.n	8004342 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	4798      	blx	r3
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff fd57 	bl	8003e0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2240      	movs	r2, #64	; 0x40
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f043 0204 	orr.w	r2, r3, #4
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7ff fd4a 	bl	8003e20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <__NVIC_SetPriorityGrouping>:
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043b0:	4013      	ands	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043c6:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	60d3      	str	r3, [r2, #12]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <__NVIC_GetPriorityGrouping>:
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043e0:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <__NVIC_GetPriorityGrouping+0x18>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	f003 0307 	and.w	r3, r3, #7
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <__NVIC_EnableIRQ>:
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	2b00      	cmp	r3, #0
 8004408:	db0b      	blt.n	8004422 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	f003 021f 	and.w	r2, r3, #31
 8004410:	4907      	ldr	r1, [pc, #28]	; (8004430 <__NVIC_EnableIRQ+0x38>)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2001      	movs	r0, #1
 800441a:	fa00 f202 	lsl.w	r2, r0, r2
 800441e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	e000e100 	.word	0xe000e100

08004434 <__NVIC_SetPriority>:
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	6039      	str	r1, [r7, #0]
 800443e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004444:	2b00      	cmp	r3, #0
 8004446:	db0a      	blt.n	800445e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	490c      	ldr	r1, [pc, #48]	; (8004480 <__NVIC_SetPriority+0x4c>)
 800444e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004452:	0112      	lsls	r2, r2, #4
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	440b      	add	r3, r1
 8004458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800445c:	e00a      	b.n	8004474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	4908      	ldr	r1, [pc, #32]	; (8004484 <__NVIC_SetPriority+0x50>)
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	3b04      	subs	r3, #4
 800446c:	0112      	lsls	r2, r2, #4
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	440b      	add	r3, r1
 8004472:	761a      	strb	r2, [r3, #24]
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	e000e100 	.word	0xe000e100
 8004484:	e000ed00 	.word	0xe000ed00

08004488 <NVIC_EncodePriority>:
{
 8004488:	b480      	push	{r7}
 800448a:	b089      	sub	sp, #36	; 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f1c3 0307 	rsb	r3, r3, #7
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	bf28      	it	cs
 80044a6:	2304      	movcs	r3, #4
 80044a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3304      	adds	r3, #4
 80044ae:	2b06      	cmp	r3, #6
 80044b0:	d902      	bls.n	80044b8 <NVIC_EncodePriority+0x30>
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3b03      	subs	r3, #3
 80044b6:	e000      	b.n	80044ba <NVIC_EncodePriority+0x32>
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044bc:	f04f 32ff 	mov.w	r2, #4294967295
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43da      	mvns	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	401a      	ands	r2, r3
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044d0:	f04f 31ff 	mov.w	r1, #4294967295
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	43d9      	mvns	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e0:	4313      	orrs	r3, r2
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3724      	adds	r7, #36	; 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004500:	d301      	bcc.n	8004506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004502:	2301      	movs	r3, #1
 8004504:	e00f      	b.n	8004526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004506:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <SysTick_Config+0x40>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3b01      	subs	r3, #1
 800450c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800450e:	210f      	movs	r1, #15
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	f7ff ff8e 	bl	8004434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <SysTick_Config+0x40>)
 800451a:	2200      	movs	r2, #0
 800451c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <SysTick_Config+0x40>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	e000e010 	.word	0xe000e010

08004534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ff29 	bl	8004394 <__NVIC_SetPriorityGrouping>
}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800454a:	b580      	push	{r7, lr}
 800454c:	b086      	sub	sp, #24
 800454e:	af00      	add	r7, sp, #0
 8004550:	4603      	mov	r3, r0
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	607a      	str	r2, [r7, #4]
 8004556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800455c:	f7ff ff3e 	bl	80043dc <__NVIC_GetPriorityGrouping>
 8004560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	6978      	ldr	r0, [r7, #20]
 8004568:	f7ff ff8e 	bl	8004488 <NVIC_EncodePriority>
 800456c:	4602      	mov	r2, r0
 800456e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ff5d 	bl	8004434 <__NVIC_SetPriority>
}
 800457a:	bf00      	nop
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	4603      	mov	r3, r0
 800458a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800458c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff31 	bl	80043f8 <__NVIC_EnableIRQ>
}
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff ffa2 	bl	80044f0 <SysTick_Config>
 80045ac:	4603      	mov	r3, r0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045c4:	f7ff fac2 	bl	8003b4c <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e099      	b.n	8004708 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045f4:	e00f      	b.n	8004616 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045f6:	f7ff faa9 	bl	8003b4c <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b05      	cmp	r3, #5
 8004602:	d908      	bls.n	8004616 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2203      	movs	r2, #3
 800460e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e078      	b.n	8004708 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e8      	bne.n	80045f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4b38      	ldr	r3, [pc, #224]	; (8004710 <HAL_DMA_Init+0x158>)
 8004630:	4013      	ands	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004642:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800464e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800465a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	2b04      	cmp	r3, #4
 800466e:	d107      	bne.n	8004680 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	4313      	orrs	r3, r2
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f023 0307 	bic.w	r3, r3, #7
 8004696:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d117      	bne.n	80046da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00e      	beq.n	80046da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fa6f 	bl	8004ba0 <DMA_CheckFifoParam>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2240      	movs	r2, #64	; 0x40
 80046cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046d6:	2301      	movs	r3, #1
 80046d8:	e016      	b.n	8004708 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fa26 	bl	8004b34 <DMA_CalcBaseAndBitshift>
 80046e8:	4603      	mov	r3, r0
 80046ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f0:	223f      	movs	r2, #63	; 0x3f
 80046f2:	409a      	lsls	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	f010803f 	.word	0xf010803f

08004714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_DMA_Start_IT+0x26>
 8004736:	2302      	movs	r3, #2
 8004738:	e040      	b.n	80047bc <HAL_DMA_Start_IT+0xa8>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b01      	cmp	r3, #1
 800474c:	d12f      	bne.n	80047ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2202      	movs	r2, #2
 8004752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f9b8 	bl	8004ad8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476c:	223f      	movs	r2, #63	; 0x3f
 800476e:	409a      	lsls	r2, r3
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0216 	orr.w	r2, r2, #22
 8004782:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0208 	orr.w	r2, r2, #8
 800479a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	e005      	b.n	80047ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047b6:	2302      	movs	r3, #2
 80047b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047d0:	4b92      	ldr	r3, [pc, #584]	; (8004a1c <HAL_DMA_IRQHandler+0x258>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a92      	ldr	r2, [pc, #584]	; (8004a20 <HAL_DMA_IRQHandler+0x25c>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	0a9b      	lsrs	r3, r3, #10
 80047dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ee:	2208      	movs	r2, #8
 80047f0:	409a      	lsls	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01a      	beq.n	8004830 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d013      	beq.n	8004830 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0204 	bic.w	r2, r2, #4
 8004816:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481c:	2208      	movs	r2, #8
 800481e:	409a      	lsls	r2, r3
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004828:	f043 0201 	orr.w	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004834:	2201      	movs	r2, #1
 8004836:	409a      	lsls	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d012      	beq.n	8004866 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004852:	2201      	movs	r2, #1
 8004854:	409a      	lsls	r2, r3
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	f043 0202 	orr.w	r2, r3, #2
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486a:	2204      	movs	r2, #4
 800486c:	409a      	lsls	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d012      	beq.n	800489c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004888:	2204      	movs	r2, #4
 800488a:	409a      	lsls	r2, r3
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f043 0204 	orr.w	r2, r3, #4
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	2210      	movs	r2, #16
 80048a2:	409a      	lsls	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d043      	beq.n	8004934 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d03c      	beq.n	8004934 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048be:	2210      	movs	r2, #16
 80048c0:	409a      	lsls	r2, r3
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d018      	beq.n	8004906 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d108      	bne.n	80048f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d024      	beq.n	8004934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4798      	blx	r3
 80048f2:	e01f      	b.n	8004934 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01b      	beq.n	8004934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4798      	blx	r3
 8004904:	e016      	b.n	8004934 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d107      	bne.n	8004924 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0208 	bic.w	r2, r2, #8
 8004922:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	2220      	movs	r2, #32
 800493a:	409a      	lsls	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 808e 	beq.w	8004a62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8086 	beq.w	8004a62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495a:	2220      	movs	r2, #32
 800495c:	409a      	lsls	r2, r3
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b05      	cmp	r3, #5
 800496c:	d136      	bne.n	80049dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0216 	bic.w	r2, r2, #22
 800497c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800498c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_DMA_IRQHandler+0x1da>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0208 	bic.w	r2, r2, #8
 80049ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b2:	223f      	movs	r2, #63	; 0x3f
 80049b4:	409a      	lsls	r2, r3
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d07d      	beq.n	8004ace <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	4798      	blx	r3
        }
        return;
 80049da:	e078      	b.n	8004ace <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d01c      	beq.n	8004a24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d108      	bne.n	8004a0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d030      	beq.n	8004a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	4798      	blx	r3
 8004a08:	e02b      	b.n	8004a62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d027      	beq.n	8004a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
 8004a1a:	e022      	b.n	8004a62 <HAL_DMA_IRQHandler+0x29e>
 8004a1c:	20000010 	.word	0x20000010
 8004a20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10f      	bne.n	8004a52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0210 	bic.w	r2, r2, #16
 8004a40:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d032      	beq.n	8004ad0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d022      	beq.n	8004abc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2205      	movs	r2, #5
 8004a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	3301      	adds	r3, #1
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d307      	bcc.n	8004aaa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f2      	bne.n	8004a8e <HAL_DMA_IRQHandler+0x2ca>
 8004aa8:	e000      	b.n	8004aac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004aaa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4798      	blx	r3
 8004acc:	e000      	b.n	8004ad0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004ace:	bf00      	nop
    }
  }
}
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop

08004ad8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004af4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d108      	bne.n	8004b18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b16:	e007      	b.n	8004b28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]
}
 8004b28:	bf00      	nop
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	3b10      	subs	r3, #16
 8004b44:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <DMA_CalcBaseAndBitshift+0x64>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b4e:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <DMA_CalcBaseAndBitshift+0x68>)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d909      	bls.n	8004b76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b6a:	f023 0303 	bic.w	r3, r3, #3
 8004b6e:	1d1a      	adds	r2, r3, #4
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	659a      	str	r2, [r3, #88]	; 0x58
 8004b74:	e007      	b.n	8004b86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b7e:	f023 0303 	bic.w	r3, r3, #3
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	aaaaaaab 	.word	0xaaaaaaab
 8004b9c:	0800850c 	.word	0x0800850c

08004ba0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d11f      	bne.n	8004bfa <DMA_CheckFifoParam+0x5a>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d856      	bhi.n	8004c6e <DMA_CheckFifoParam+0xce>
 8004bc0:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <DMA_CheckFifoParam+0x28>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004bd9 	.word	0x08004bd9
 8004bcc:	08004beb 	.word	0x08004beb
 8004bd0:	08004bd9 	.word	0x08004bd9
 8004bd4:	08004c6f 	.word	0x08004c6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d046      	beq.n	8004c72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004be8:	e043      	b.n	8004c72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bf2:	d140      	bne.n	8004c76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf8:	e03d      	b.n	8004c76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c02:	d121      	bne.n	8004c48 <DMA_CheckFifoParam+0xa8>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d837      	bhi.n	8004c7a <DMA_CheckFifoParam+0xda>
 8004c0a:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <DMA_CheckFifoParam+0x70>)
 8004c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c10:	08004c21 	.word	0x08004c21
 8004c14:	08004c27 	.word	0x08004c27
 8004c18:	08004c21 	.word	0x08004c21
 8004c1c:	08004c39 	.word	0x08004c39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
      break;
 8004c24:	e030      	b.n	8004c88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d025      	beq.n	8004c7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c36:	e022      	b.n	8004c7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c40:	d11f      	bne.n	8004c82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c46:	e01c      	b.n	8004c82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d903      	bls.n	8004c56 <DMA_CheckFifoParam+0xb6>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d003      	beq.n	8004c5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c54:	e018      	b.n	8004c88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	73fb      	strb	r3, [r7, #15]
      break;
 8004c5a:	e015      	b.n	8004c88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00e      	beq.n	8004c86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c6c:	e00b      	b.n	8004c86 <DMA_CheckFifoParam+0xe6>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e00a      	b.n	8004c88 <DMA_CheckFifoParam+0xe8>
      break;
 8004c72:	bf00      	nop
 8004c74:	e008      	b.n	8004c88 <DMA_CheckFifoParam+0xe8>
      break;
 8004c76:	bf00      	nop
 8004c78:	e006      	b.n	8004c88 <DMA_CheckFifoParam+0xe8>
      break;
 8004c7a:	bf00      	nop
 8004c7c:	e004      	b.n	8004c88 <DMA_CheckFifoParam+0xe8>
      break;
 8004c7e:	bf00      	nop
 8004c80:	e002      	b.n	8004c88 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c82:	bf00      	nop
 8004c84:	e000      	b.n	8004c88 <DMA_CheckFifoParam+0xe8>
      break;
 8004c86:	bf00      	nop
    }
  } 
  
  return status; 
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop

08004c98 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004caa:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <HAL_FLASH_Program+0xa0>)
 8004cac:	7e1b      	ldrb	r3, [r3, #24]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_FLASH_Program+0x1e>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e03b      	b.n	8004d2e <HAL_FLASH_Program+0x96>
 8004cb6:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <HAL_FLASH_Program+0xa0>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004cbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004cc0:	f000 f87c 	bl	8004dbc <FLASH_WaitForLastOperation>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d12b      	bne.n	8004d26 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d105      	bne.n	8004ce0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004cd4:	783b      	ldrb	r3, [r7, #0]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	68b8      	ldr	r0, [r7, #8]
 8004cda:	f000 f927 	bl	8004f2c <FLASH_Program_Byte>
 8004cde:	e016      	b.n	8004d0e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d105      	bne.n	8004cf2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004ce6:	883b      	ldrh	r3, [r7, #0]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	68b8      	ldr	r0, [r7, #8]
 8004cec:	f000 f8fa 	bl	8004ee4 <FLASH_Program_HalfWord>
 8004cf0:	e00d      	b.n	8004d0e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d105      	bne.n	8004d04 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	68b8      	ldr	r0, [r7, #8]
 8004cfe:	f000 f8cf 	bl	8004ea0 <FLASH_Program_Word>
 8004d02:	e004      	b.n	8004d0e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d08:	68b8      	ldr	r0, [r7, #8]
 8004d0a:	f000 f897 	bl	8004e3c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d12:	f000 f853 	bl	8004dbc <FLASH_WaitForLastOperation>
 8004d16:	4603      	mov	r3, r0
 8004d18:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004d1a:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <HAL_FLASH_Program+0xa4>)
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	4a07      	ldr	r2, [pc, #28]	; (8004d3c <HAL_FLASH_Program+0xa4>)
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004d26:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <HAL_FLASH_Program+0xa0>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20001354 	.word	0x20001354
 8004d3c:	40023c00 	.word	0x40023c00

08004d40 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_FLASH_Unlock+0x38>)
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da0b      	bge.n	8004d6a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004d52:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_FLASH_Unlock+0x38>)
 8004d54:	4a09      	ldr	r2, [pc, #36]	; (8004d7c <HAL_FLASH_Unlock+0x3c>)
 8004d56:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004d58:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <HAL_FLASH_Unlock+0x38>)
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <HAL_FLASH_Unlock+0x40>)
 8004d5c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <HAL_FLASH_Unlock+0x38>)
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da01      	bge.n	8004d6a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	40023c00 	.word	0x40023c00
 8004d7c:	45670123 	.word	0x45670123
 8004d80:	cdef89ab 	.word	0xcdef89ab

08004d84 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <HAL_FLASH_Lock+0x1c>)
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	4a04      	ldr	r2, [pc, #16]	; (8004da0 <HAL_FLASH_Lock+0x1c>)
 8004d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d92:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40023c00 	.word	0x40023c00

08004da4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <HAL_FLASH_GetError+0x14>)
 8004daa:	69db      	ldr	r3, [r3, #28]
}  
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20001354 	.word	0x20001354

08004dbc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004dc8:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <FLASH_WaitForLastOperation+0x78>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004dce:	f7fe febd 	bl	8003b4c <HAL_GetTick>
 8004dd2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004dd4:	e010      	b.n	8004df8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ddc:	d00c      	beq.n	8004df8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d007      	beq.n	8004df4 <FLASH_WaitForLastOperation+0x38>
 8004de4:	f7fe feb2 	bl	8003b4c <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d201      	bcs.n	8004df8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e019      	b.n	8004e2c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <FLASH_WaitForLastOperation+0x7c>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e8      	bne.n	8004dd6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004e04:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <FLASH_WaitForLastOperation+0x7c>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <FLASH_WaitForLastOperation+0x7c>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004e16:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <FLASH_WaitForLastOperation+0x7c>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004e22:	f000 f8a5 	bl	8004f70 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
  
}  
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20001354 	.word	0x20001354
 8004e38:	40023c00 	.word	0x40023c00

08004e3c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e48:	4b14      	ldr	r3, [pc, #80]	; (8004e9c <FLASH_Program_DoubleWord+0x60>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	4a13      	ldr	r2, [pc, #76]	; (8004e9c <FLASH_Program_DoubleWord+0x60>)
 8004e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004e54:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <FLASH_Program_DoubleWord+0x60>)
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	4a10      	ldr	r2, [pc, #64]	; (8004e9c <FLASH_Program_DoubleWord+0x60>)
 8004e5a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004e60:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <FLASH_Program_DoubleWord+0x60>)
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <FLASH_Program_DoubleWord+0x60>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004e72:	f3bf 8f6f 	isb	sy
}
 8004e76:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004e78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	000a      	movs	r2, r1
 8004e86:	2300      	movs	r3, #0
 8004e88:	68f9      	ldr	r1, [r7, #12]
 8004e8a:	3104      	adds	r1, #4
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	600b      	str	r3, [r1, #0]
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40023c00 	.word	0x40023c00

08004ea0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <FLASH_Program_Word+0x40>)
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <FLASH_Program_Word+0x40>)
 8004eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <FLASH_Program_Word+0x40>)
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <FLASH_Program_Word+0x40>)
 8004ebc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ec0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004ec2:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <FLASH_Program_Word+0x40>)
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	4a06      	ldr	r2, [pc, #24]	; (8004ee0 <FLASH_Program_Word+0x40>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	601a      	str	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40023c00 	.word	0x40023c00

08004ee4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ef0:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <FLASH_Program_HalfWord+0x44>)
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	4a0c      	ldr	r2, [pc, #48]	; (8004f28 <FLASH_Program_HalfWord+0x44>)
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004efc:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <FLASH_Program_HalfWord+0x44>)
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <FLASH_Program_HalfWord+0x44>)
 8004f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004f08:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <FLASH_Program_HalfWord+0x44>)
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	4a06      	ldr	r2, [pc, #24]	; (8004f28 <FLASH_Program_HalfWord+0x44>)
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	887a      	ldrh	r2, [r7, #2]
 8004f18:	801a      	strh	r2, [r3, #0]
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40023c00 	.word	0x40023c00

08004f2c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <FLASH_Program_Byte+0x40>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <FLASH_Program_Byte+0x40>)
 8004f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004f44:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <FLASH_Program_Byte+0x40>)
 8004f46:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <FLASH_Program_Byte+0x40>)
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004f4c:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <FLASH_Program_Byte+0x40>)
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	4a06      	ldr	r2, [pc, #24]	; (8004f6c <FLASH_Program_Byte+0x40>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	78fa      	ldrb	r2, [r7, #3]
 8004f5c:	701a      	strb	r2, [r3, #0]
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40023c00 	.word	0x40023c00

08004f70 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004f74:	4b2f      	ldr	r3, [pc, #188]	; (8005034 <FLASH_SetErrorCode+0xc4>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004f80:	4b2d      	ldr	r3, [pc, #180]	; (8005038 <FLASH_SetErrorCode+0xc8>)
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f043 0310 	orr.w	r3, r3, #16
 8004f88:	4a2b      	ldr	r2, [pc, #172]	; (8005038 <FLASH_SetErrorCode+0xc8>)
 8004f8a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004f8c:	4b29      	ldr	r3, [pc, #164]	; (8005034 <FLASH_SetErrorCode+0xc4>)
 8004f8e:	2210      	movs	r2, #16
 8004f90:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004f92:	4b28      	ldr	r3, [pc, #160]	; (8005034 <FLASH_SetErrorCode+0xc4>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d008      	beq.n	8004fb0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004f9e:	4b26      	ldr	r3, [pc, #152]	; (8005038 <FLASH_SetErrorCode+0xc8>)
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f043 0308 	orr.w	r3, r3, #8
 8004fa6:	4a24      	ldr	r2, [pc, #144]	; (8005038 <FLASH_SetErrorCode+0xc8>)
 8004fa8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004faa:	4b22      	ldr	r3, [pc, #136]	; (8005034 <FLASH_SetErrorCode+0xc4>)
 8004fac:	2220      	movs	r2, #32
 8004fae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004fb0:	4b20      	ldr	r3, [pc, #128]	; (8005034 <FLASH_SetErrorCode+0xc4>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004fbc:	4b1e      	ldr	r3, [pc, #120]	; (8005038 <FLASH_SetErrorCode+0xc8>)
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f043 0304 	orr.w	r3, r3, #4
 8004fc4:	4a1c      	ldr	r2, [pc, #112]	; (8005038 <FLASH_SetErrorCode+0xc8>)
 8004fc6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004fc8:	4b1a      	ldr	r3, [pc, #104]	; (8005034 <FLASH_SetErrorCode+0xc4>)
 8004fca:	2240      	movs	r2, #64	; 0x40
 8004fcc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004fce:	4b19      	ldr	r3, [pc, #100]	; (8005034 <FLASH_SetErrorCode+0xc4>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d008      	beq.n	8004fec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004fda:	4b17      	ldr	r3, [pc, #92]	; (8005038 <FLASH_SetErrorCode+0xc8>)
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f043 0302 	orr.w	r3, r3, #2
 8004fe2:	4a15      	ldr	r2, [pc, #84]	; (8005038 <FLASH_SetErrorCode+0xc8>)
 8004fe4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <FLASH_SetErrorCode+0xc4>)
 8004fe8:	2280      	movs	r2, #128	; 0x80
 8004fea:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004fec:	4b11      	ldr	r3, [pc, #68]	; (8005034 <FLASH_SetErrorCode+0xc4>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d009      	beq.n	800500c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <FLASH_SetErrorCode+0xc8>)
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f043 0301 	orr.w	r3, r3, #1
 8005000:	4a0d      	ldr	r2, [pc, #52]	; (8005038 <FLASH_SetErrorCode+0xc8>)
 8005002:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <FLASH_SetErrorCode+0xc4>)
 8005006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800500a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800500c:	4b09      	ldr	r3, [pc, #36]	; (8005034 <FLASH_SetErrorCode+0xc4>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005018:	4b07      	ldr	r3, [pc, #28]	; (8005038 <FLASH_SetErrorCode+0xc8>)
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f043 0320 	orr.w	r3, r3, #32
 8005020:	4a05      	ldr	r2, [pc, #20]	; (8005038 <FLASH_SetErrorCode+0xc8>)
 8005022:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <FLASH_SetErrorCode+0xc4>)
 8005026:	2202      	movs	r2, #2
 8005028:	60da      	str	r2, [r3, #12]
  }
}
 800502a:	bf00      	nop
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40023c00 	.word	0x40023c00
 8005038:	20001354 	.word	0x20001354

0800503c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800504e:	4b31      	ldr	r3, [pc, #196]	; (8005114 <HAL_FLASHEx_Erase+0xd8>)
 8005050:	7e1b      	ldrb	r3, [r3, #24]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_FLASHEx_Erase+0x1e>
 8005056:	2302      	movs	r3, #2
 8005058:	e058      	b.n	800510c <HAL_FLASHEx_Erase+0xd0>
 800505a:	4b2e      	ldr	r3, [pc, #184]	; (8005114 <HAL_FLASHEx_Erase+0xd8>)
 800505c:	2201      	movs	r2, #1
 800505e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005060:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005064:	f7ff feaa 	bl	8004dbc <FLASH_WaitForLastOperation>
 8005068:	4603      	mov	r3, r0
 800506a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d148      	bne.n	8005104 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	f04f 32ff 	mov.w	r2, #4294967295
 8005078:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d115      	bne.n	80050ae <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	b2da      	uxtb	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f000 f844 	bl	800511c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005094:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005098:	f7ff fe90 	bl	8004dbc <FLASH_WaitForLastOperation>
 800509c:	4603      	mov	r3, r0
 800509e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80050a0:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <HAL_FLASHEx_Erase+0xdc>)
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	4a1c      	ldr	r2, [pc, #112]	; (8005118 <HAL_FLASHEx_Erase+0xdc>)
 80050a6:	f023 0304 	bic.w	r3, r3, #4
 80050aa:	6113      	str	r3, [r2, #16]
 80050ac:	e028      	b.n	8005100 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	e01c      	b.n	80050f0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	4619      	mov	r1, r3
 80050be:	68b8      	ldr	r0, [r7, #8]
 80050c0:	f000 f850 	bl	8005164 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80050c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050c8:	f7ff fe78 	bl	8004dbc <FLASH_WaitForLastOperation>
 80050cc:	4603      	mov	r3, r0
 80050ce:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80050d0:	4b11      	ldr	r3, [pc, #68]	; (8005118 <HAL_FLASHEx_Erase+0xdc>)
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	4a10      	ldr	r2, [pc, #64]	; (8005118 <HAL_FLASHEx_Erase+0xdc>)
 80050d6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80050da:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	601a      	str	r2, [r3, #0]
          break;
 80050e8:	e00a      	b.n	8005100 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	3301      	adds	r3, #1
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4413      	add	r3, r2
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d3da      	bcc.n	80050b6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005100:	f000 f878 	bl	80051f4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005104:	4b03      	ldr	r3, [pc, #12]	; (8005114 <HAL_FLASHEx_Erase+0xd8>)
 8005106:	2200      	movs	r2, #0
 8005108:	761a      	strb	r2, [r3, #24]

  return status;
 800510a:	7bfb      	ldrb	r3, [r7, #15]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	20001354 	.word	0x20001354
 8005118:	40023c00 	.word	0x40023c00

0800511c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	6039      	str	r1, [r7, #0]
 8005126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005128:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <FLASH_MassErase+0x44>)
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	4a0c      	ldr	r2, [pc, #48]	; (8005160 <FLASH_MassErase+0x44>)
 800512e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005132:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <FLASH_MassErase+0x44>)
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	4a09      	ldr	r2, [pc, #36]	; (8005160 <FLASH_MassErase+0x44>)
 800513a:	f043 0304 	orr.w	r3, r3, #4
 800513e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005140:	4b07      	ldr	r3, [pc, #28]	; (8005160 <FLASH_MassErase+0x44>)
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	4313      	orrs	r3, r2
 800514a:	4a05      	ldr	r2, [pc, #20]	; (8005160 <FLASH_MassErase+0x44>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005150:	6113      	str	r3, [r2, #16]
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40023c00 	.word	0x40023c00

08005164 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e010      	b.n	80051a2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d103      	bne.n	800518e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	e009      	b.n	80051a2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800518e:	78fb      	ldrb	r3, [r7, #3]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d103      	bne.n	800519c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	e002      	b.n	80051a2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800519c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80051a0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80051a2:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <FLASH_Erase_Sector+0x8c>)
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	4a12      	ldr	r2, [pc, #72]	; (80051f0 <FLASH_Erase_Sector+0x8c>)
 80051a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80051ae:	4b10      	ldr	r3, [pc, #64]	; (80051f0 <FLASH_Erase_Sector+0x8c>)
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	490f      	ldr	r1, [pc, #60]	; (80051f0 <FLASH_Erase_Sector+0x8c>)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80051ba:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <FLASH_Erase_Sector+0x8c>)
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	4a0c      	ldr	r2, [pc, #48]	; (80051f0 <FLASH_Erase_Sector+0x8c>)
 80051c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80051c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80051c6:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <FLASH_Erase_Sector+0x8c>)
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4313      	orrs	r3, r2
 80051d0:	4a07      	ldr	r2, [pc, #28]	; (80051f0 <FLASH_Erase_Sector+0x8c>)
 80051d2:	f043 0302 	orr.w	r3, r3, #2
 80051d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80051d8:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <FLASH_Erase_Sector+0x8c>)
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	4a04      	ldr	r2, [pc, #16]	; (80051f0 <FLASH_Erase_Sector+0x8c>)
 80051de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e2:	6113      	str	r3, [r2, #16]
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	40023c00 	.word	0x40023c00

080051f4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80051f8:	4b20      	ldr	r3, [pc, #128]	; (800527c <FLASH_FlushCaches+0x88>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005200:	2b00      	cmp	r3, #0
 8005202:	d017      	beq.n	8005234 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005204:	4b1d      	ldr	r3, [pc, #116]	; (800527c <FLASH_FlushCaches+0x88>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1c      	ldr	r2, [pc, #112]	; (800527c <FLASH_FlushCaches+0x88>)
 800520a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800520e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005210:	4b1a      	ldr	r3, [pc, #104]	; (800527c <FLASH_FlushCaches+0x88>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a19      	ldr	r2, [pc, #100]	; (800527c <FLASH_FlushCaches+0x88>)
 8005216:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	4b17      	ldr	r3, [pc, #92]	; (800527c <FLASH_FlushCaches+0x88>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a16      	ldr	r2, [pc, #88]	; (800527c <FLASH_FlushCaches+0x88>)
 8005222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005226:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005228:	4b14      	ldr	r3, [pc, #80]	; (800527c <FLASH_FlushCaches+0x88>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a13      	ldr	r2, [pc, #76]	; (800527c <FLASH_FlushCaches+0x88>)
 800522e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005232:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005234:	4b11      	ldr	r3, [pc, #68]	; (800527c <FLASH_FlushCaches+0x88>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523c:	2b00      	cmp	r3, #0
 800523e:	d017      	beq.n	8005270 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005240:	4b0e      	ldr	r3, [pc, #56]	; (800527c <FLASH_FlushCaches+0x88>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a0d      	ldr	r2, [pc, #52]	; (800527c <FLASH_FlushCaches+0x88>)
 8005246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800524a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <FLASH_FlushCaches+0x88>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0a      	ldr	r2, [pc, #40]	; (800527c <FLASH_FlushCaches+0x88>)
 8005252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <FLASH_FlushCaches+0x88>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a07      	ldr	r2, [pc, #28]	; (800527c <FLASH_FlushCaches+0x88>)
 800525e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005262:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <FLASH_FlushCaches+0x88>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a04      	ldr	r2, [pc, #16]	; (800527c <FLASH_FlushCaches+0x88>)
 800526a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800526e:	6013      	str	r3, [r2, #0]
  }
}
 8005270:	bf00      	nop
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40023c00 	.word	0x40023c00

08005280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005280:	b480      	push	{r7}
 8005282:	b089      	sub	sp, #36	; 0x24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800528e:	2300      	movs	r3, #0
 8005290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005292:	2300      	movs	r3, #0
 8005294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	e165      	b.n	8005568 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800529c:	2201      	movs	r2, #1
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4013      	ands	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	f040 8154 	bne.w	8005562 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d005      	beq.n	80052d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d130      	bne.n	8005334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	2203      	movs	r2, #3
 80052de:	fa02 f303 	lsl.w	r3, r2, r3
 80052e2:	43db      	mvns	r3, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4013      	ands	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005308:	2201      	movs	r2, #1
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	43db      	mvns	r3, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4013      	ands	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	091b      	lsrs	r3, r3, #4
 800531e:	f003 0201 	and.w	r2, r3, #1
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4313      	orrs	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	2b03      	cmp	r3, #3
 800533e:	d017      	beq.n	8005370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	2203      	movs	r2, #3
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	43db      	mvns	r3, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4013      	ands	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4313      	orrs	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d123      	bne.n	80053c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	08da      	lsrs	r2, r3, #3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3208      	adds	r2, #8
 8005384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	220f      	movs	r2, #15
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	43db      	mvns	r3, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4013      	ands	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	08da      	lsrs	r2, r3, #3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3208      	adds	r2, #8
 80053be:	69b9      	ldr	r1, [r7, #24]
 80053c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	2203      	movs	r2, #3
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	43db      	mvns	r3, r3
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	4013      	ands	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 0203 	and.w	r2, r3, #3
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80ae 	beq.w	8005562 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	4b5d      	ldr	r3, [pc, #372]	; (8005580 <HAL_GPIO_Init+0x300>)
 800540c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540e:	4a5c      	ldr	r2, [pc, #368]	; (8005580 <HAL_GPIO_Init+0x300>)
 8005410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005414:	6453      	str	r3, [r2, #68]	; 0x44
 8005416:	4b5a      	ldr	r3, [pc, #360]	; (8005580 <HAL_GPIO_Init+0x300>)
 8005418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005422:	4a58      	ldr	r2, [pc, #352]	; (8005584 <HAL_GPIO_Init+0x304>)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	089b      	lsrs	r3, r3, #2
 8005428:	3302      	adds	r3, #2
 800542a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	220f      	movs	r2, #15
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	43db      	mvns	r3, r3
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	4013      	ands	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a4f      	ldr	r2, [pc, #316]	; (8005588 <HAL_GPIO_Init+0x308>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d025      	beq.n	800549a <HAL_GPIO_Init+0x21a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a4e      	ldr	r2, [pc, #312]	; (800558c <HAL_GPIO_Init+0x30c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01f      	beq.n	8005496 <HAL_GPIO_Init+0x216>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a4d      	ldr	r2, [pc, #308]	; (8005590 <HAL_GPIO_Init+0x310>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d019      	beq.n	8005492 <HAL_GPIO_Init+0x212>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a4c      	ldr	r2, [pc, #304]	; (8005594 <HAL_GPIO_Init+0x314>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d013      	beq.n	800548e <HAL_GPIO_Init+0x20e>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a4b      	ldr	r2, [pc, #300]	; (8005598 <HAL_GPIO_Init+0x318>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00d      	beq.n	800548a <HAL_GPIO_Init+0x20a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a4a      	ldr	r2, [pc, #296]	; (800559c <HAL_GPIO_Init+0x31c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <HAL_GPIO_Init+0x206>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a49      	ldr	r2, [pc, #292]	; (80055a0 <HAL_GPIO_Init+0x320>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d101      	bne.n	8005482 <HAL_GPIO_Init+0x202>
 800547e:	2306      	movs	r3, #6
 8005480:	e00c      	b.n	800549c <HAL_GPIO_Init+0x21c>
 8005482:	2307      	movs	r3, #7
 8005484:	e00a      	b.n	800549c <HAL_GPIO_Init+0x21c>
 8005486:	2305      	movs	r3, #5
 8005488:	e008      	b.n	800549c <HAL_GPIO_Init+0x21c>
 800548a:	2304      	movs	r3, #4
 800548c:	e006      	b.n	800549c <HAL_GPIO_Init+0x21c>
 800548e:	2303      	movs	r3, #3
 8005490:	e004      	b.n	800549c <HAL_GPIO_Init+0x21c>
 8005492:	2302      	movs	r3, #2
 8005494:	e002      	b.n	800549c <HAL_GPIO_Init+0x21c>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <HAL_GPIO_Init+0x21c>
 800549a:	2300      	movs	r3, #0
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	f002 0203 	and.w	r2, r2, #3
 80054a2:	0092      	lsls	r2, r2, #2
 80054a4:	4093      	lsls	r3, r2
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054ac:	4935      	ldr	r1, [pc, #212]	; (8005584 <HAL_GPIO_Init+0x304>)
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	089b      	lsrs	r3, r3, #2
 80054b2:	3302      	adds	r3, #2
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054ba:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <HAL_GPIO_Init+0x324>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	43db      	mvns	r3, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	4013      	ands	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054de:	4a31      	ldr	r2, [pc, #196]	; (80055a4 <HAL_GPIO_Init+0x324>)
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80054e4:	4b2f      	ldr	r3, [pc, #188]	; (80055a4 <HAL_GPIO_Init+0x324>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	43db      	mvns	r3, r3
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4013      	ands	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005508:	4a26      	ldr	r2, [pc, #152]	; (80055a4 <HAL_GPIO_Init+0x324>)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800550e:	4b25      	ldr	r3, [pc, #148]	; (80055a4 <HAL_GPIO_Init+0x324>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	43db      	mvns	r3, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4013      	ands	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005532:	4a1c      	ldr	r2, [pc, #112]	; (80055a4 <HAL_GPIO_Init+0x324>)
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005538:	4b1a      	ldr	r3, [pc, #104]	; (80055a4 <HAL_GPIO_Init+0x324>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	43db      	mvns	r3, r3
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	4013      	ands	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800555c:	4a11      	ldr	r2, [pc, #68]	; (80055a4 <HAL_GPIO_Init+0x324>)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	3301      	adds	r3, #1
 8005566:	61fb      	str	r3, [r7, #28]
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b0f      	cmp	r3, #15
 800556c:	f67f ae96 	bls.w	800529c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	3724      	adds	r7, #36	; 0x24
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40023800 	.word	0x40023800
 8005584:	40013800 	.word	0x40013800
 8005588:	40020000 	.word	0x40020000
 800558c:	40020400 	.word	0x40020400
 8005590:	40020800 	.word	0x40020800
 8005594:	40020c00 	.word	0x40020c00
 8005598:	40021000 	.word	0x40021000
 800559c:	40021400 	.word	0x40021400
 80055a0:	40021800 	.word	0x40021800
 80055a4:	40013c00 	.word	0x40013c00

080055a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	807b      	strh	r3, [r7, #2]
 80055b4:	4613      	mov	r3, r2
 80055b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055b8:	787b      	ldrb	r3, [r7, #1]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055be:	887a      	ldrh	r2, [r7, #2]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055c4:	e003      	b.n	80055ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055c6:	887b      	ldrh	r3, [r7, #2]
 80055c8:	041a      	lsls	r2, r3, #16
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	619a      	str	r2, [r3, #24]
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	460b      	mov	r3, r1
 80055e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80055ec:	887a      	ldrh	r2, [r7, #2]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4013      	ands	r3, r2
 80055f2:	041a      	lsls	r2, r3, #16
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	43d9      	mvns	r1, r3
 80055f8:	887b      	ldrh	r3, [r7, #2]
 80055fa:	400b      	ands	r3, r1
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	619a      	str	r2, [r3, #24]
}
 8005602:	bf00      	nop
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
	...

08005610 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800561a:	2300      	movs	r3, #0
 800561c:	603b      	str	r3, [r7, #0]
 800561e:	4b20      	ldr	r3, [pc, #128]	; (80056a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	4a1f      	ldr	r2, [pc, #124]	; (80056a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005628:	6413      	str	r3, [r2, #64]	; 0x40
 800562a:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005636:	4b1b      	ldr	r3, [pc, #108]	; (80056a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8005638:	2201      	movs	r2, #1
 800563a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800563c:	f7fe fa86 	bl	8003b4c <HAL_GetTick>
 8005640:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005642:	e009      	b.n	8005658 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005644:	f7fe fa82 	bl	8003b4c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005652:	d901      	bls.n	8005658 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e01f      	b.n	8005698 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005658:	4b13      	ldr	r3, [pc, #76]	; (80056a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005664:	d1ee      	bne.n	8005644 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005666:	4b11      	ldr	r3, [pc, #68]	; (80056ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800566c:	f7fe fa6e 	bl	8003b4c <HAL_GetTick>
 8005670:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005672:	e009      	b.n	8005688 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005674:	f7fe fa6a 	bl	8003b4c <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005682:	d901      	bls.n	8005688 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e007      	b.n	8005698 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005688:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005694:	d1ee      	bne.n	8005674 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40023800 	.word	0x40023800
 80056a4:	420e0040 	.word	0x420e0040
 80056a8:	40007000 	.word	0x40007000
 80056ac:	420e0044 	.word	0x420e0044

080056b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0cc      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056c4:	4b68      	ldr	r3, [pc, #416]	; (8005868 <HAL_RCC_ClockConfig+0x1b8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d90c      	bls.n	80056ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d2:	4b65      	ldr	r3, [pc, #404]	; (8005868 <HAL_RCC_ClockConfig+0x1b8>)
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056da:	4b63      	ldr	r3, [pc, #396]	; (8005868 <HAL_RCC_ClockConfig+0x1b8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d001      	beq.n	80056ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e0b8      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d020      	beq.n	800573a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005704:	4b59      	ldr	r3, [pc, #356]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4a58      	ldr	r2, [pc, #352]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800570e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800571c:	4b53      	ldr	r3, [pc, #332]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	4a52      	ldr	r2, [pc, #328]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005728:	4b50      	ldr	r3, [pc, #320]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	494d      	ldr	r1, [pc, #308]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	4313      	orrs	r3, r2
 8005738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d044      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d107      	bne.n	800575e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800574e:	4b47      	ldr	r3, [pc, #284]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d119      	bne.n	800578e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e07f      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d003      	beq.n	800576e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800576a:	2b03      	cmp	r3, #3
 800576c:	d107      	bne.n	800577e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576e:	4b3f      	ldr	r3, [pc, #252]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d109      	bne.n	800578e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e06f      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577e:	4b3b      	ldr	r3, [pc, #236]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e067      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800578e:	4b37      	ldr	r3, [pc, #220]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f023 0203 	bic.w	r2, r3, #3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	4934      	ldr	r1, [pc, #208]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	4313      	orrs	r3, r2
 800579e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057a0:	f7fe f9d4 	bl	8003b4c <HAL_GetTick>
 80057a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a6:	e00a      	b.n	80057be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a8:	f7fe f9d0 	bl	8003b4c <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e04f      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057be:	4b2b      	ldr	r3, [pc, #172]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 020c 	and.w	r2, r3, #12
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d1eb      	bne.n	80057a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057d0:	4b25      	ldr	r3, [pc, #148]	; (8005868 <HAL_RCC_ClockConfig+0x1b8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 030f 	and.w	r3, r3, #15
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d20c      	bcs.n	80057f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057de:	4b22      	ldr	r3, [pc, #136]	; (8005868 <HAL_RCC_ClockConfig+0x1b8>)
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e6:	4b20      	ldr	r3, [pc, #128]	; (8005868 <HAL_RCC_ClockConfig+0x1b8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d001      	beq.n	80057f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e032      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d008      	beq.n	8005816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005804:	4b19      	ldr	r3, [pc, #100]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	4916      	ldr	r1, [pc, #88]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	4313      	orrs	r3, r2
 8005814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d009      	beq.n	8005836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005822:	4b12      	ldr	r3, [pc, #72]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	490e      	ldr	r1, [pc, #56]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	4313      	orrs	r3, r2
 8005834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005836:	f000 f821 	bl	800587c <HAL_RCC_GetSysClockFreq>
 800583a:	4602      	mov	r2, r0
 800583c:	4b0b      	ldr	r3, [pc, #44]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	490a      	ldr	r1, [pc, #40]	; (8005870 <HAL_RCC_ClockConfig+0x1c0>)
 8005848:	5ccb      	ldrb	r3, [r1, r3]
 800584a:	fa22 f303 	lsr.w	r3, r2, r3
 800584e:	4a09      	ldr	r2, [pc, #36]	; (8005874 <HAL_RCC_ClockConfig+0x1c4>)
 8005850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005852:	4b09      	ldr	r3, [pc, #36]	; (8005878 <HAL_RCC_ClockConfig+0x1c8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7fe f934 	bl	8003ac4 <HAL_InitTick>

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40023c00 	.word	0x40023c00
 800586c:	40023800 	.word	0x40023800
 8005870:	080084ec 	.word	0x080084ec
 8005874:	20000010 	.word	0x20000010
 8005878:	20000014 	.word	0x20000014

0800587c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800587c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005880:	b088      	sub	sp, #32
 8005882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005898:	4bce      	ldr	r3, [pc, #824]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f003 030c 	and.w	r3, r3, #12
 80058a0:	2b0c      	cmp	r3, #12
 80058a2:	f200 818d 	bhi.w	8005bc0 <HAL_RCC_GetSysClockFreq+0x344>
 80058a6:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <HAL_RCC_GetSysClockFreq+0x30>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058e1 	.word	0x080058e1
 80058b0:	08005bc1 	.word	0x08005bc1
 80058b4:	08005bc1 	.word	0x08005bc1
 80058b8:	08005bc1 	.word	0x08005bc1
 80058bc:	080058e7 	.word	0x080058e7
 80058c0:	08005bc1 	.word	0x08005bc1
 80058c4:	08005bc1 	.word	0x08005bc1
 80058c8:	08005bc1 	.word	0x08005bc1
 80058cc:	080058ed 	.word	0x080058ed
 80058d0:	08005bc1 	.word	0x08005bc1
 80058d4:	08005bc1 	.word	0x08005bc1
 80058d8:	08005bc1 	.word	0x08005bc1
 80058dc:	08005a61 	.word	0x08005a61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058e0:	4bbd      	ldr	r3, [pc, #756]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80058e2:	61bb      	str	r3, [r7, #24]
       break;
 80058e4:	e16f      	b.n	8005bc6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058e6:	4bbc      	ldr	r3, [pc, #752]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80058e8:	61bb      	str	r3, [r7, #24]
      break;
 80058ea:	e16c      	b.n	8005bc6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058ec:	4bb9      	ldr	r3, [pc, #740]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058f4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058f6:	4bb7      	ldr	r3, [pc, #732]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d053      	beq.n	80059aa <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005902:	4bb4      	ldr	r3, [pc, #720]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	099b      	lsrs	r3, r3, #6
 8005908:	461a      	mov	r2, r3
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005912:	f04f 0100 	mov.w	r1, #0
 8005916:	ea02 0400 	and.w	r4, r2, r0
 800591a:	603c      	str	r4, [r7, #0]
 800591c:	400b      	ands	r3, r1
 800591e:	607b      	str	r3, [r7, #4]
 8005920:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005924:	4620      	mov	r0, r4
 8005926:	4629      	mov	r1, r5
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	014b      	lsls	r3, r1, #5
 8005932:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005936:	0142      	lsls	r2, r0, #5
 8005938:	4610      	mov	r0, r2
 800593a:	4619      	mov	r1, r3
 800593c:	4623      	mov	r3, r4
 800593e:	1ac0      	subs	r0, r0, r3
 8005940:	462b      	mov	r3, r5
 8005942:	eb61 0103 	sbc.w	r1, r1, r3
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	018b      	lsls	r3, r1, #6
 8005950:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005954:	0182      	lsls	r2, r0, #6
 8005956:	1a12      	subs	r2, r2, r0
 8005958:	eb63 0301 	sbc.w	r3, r3, r1
 800595c:	f04f 0000 	mov.w	r0, #0
 8005960:	f04f 0100 	mov.w	r1, #0
 8005964:	00d9      	lsls	r1, r3, #3
 8005966:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800596a:	00d0      	lsls	r0, r2, #3
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4621      	mov	r1, r4
 8005972:	1852      	adds	r2, r2, r1
 8005974:	4629      	mov	r1, r5
 8005976:	eb43 0101 	adc.w	r1, r3, r1
 800597a:	460b      	mov	r3, r1
 800597c:	f04f 0000 	mov.w	r0, #0
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	0299      	lsls	r1, r3, #10
 8005986:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800598a:	0290      	lsls	r0, r2, #10
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4610      	mov	r0, r2
 8005992:	4619      	mov	r1, r3
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	461a      	mov	r2, r3
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	f7fb f852 	bl	8000a44 <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4613      	mov	r3, r2
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	e04c      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059aa:	4b8a      	ldr	r3, [pc, #552]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	099b      	lsrs	r3, r3, #6
 80059b0:	461a      	mov	r2, r3
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80059ba:	f04f 0100 	mov.w	r1, #0
 80059be:	ea02 0a00 	and.w	sl, r2, r0
 80059c2:	ea03 0b01 	and.w	fp, r3, r1
 80059c6:	4650      	mov	r0, sl
 80059c8:	4659      	mov	r1, fp
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	014b      	lsls	r3, r1, #5
 80059d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80059d8:	0142      	lsls	r2, r0, #5
 80059da:	4610      	mov	r0, r2
 80059dc:	4619      	mov	r1, r3
 80059de:	ebb0 000a 	subs.w	r0, r0, sl
 80059e2:	eb61 010b 	sbc.w	r1, r1, fp
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	018b      	lsls	r3, r1, #6
 80059f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80059f4:	0182      	lsls	r2, r0, #6
 80059f6:	1a12      	subs	r2, r2, r0
 80059f8:	eb63 0301 	sbc.w	r3, r3, r1
 80059fc:	f04f 0000 	mov.w	r0, #0
 8005a00:	f04f 0100 	mov.w	r1, #0
 8005a04:	00d9      	lsls	r1, r3, #3
 8005a06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a0a:	00d0      	lsls	r0, r2, #3
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	eb12 020a 	adds.w	r2, r2, sl
 8005a14:	eb43 030b 	adc.w	r3, r3, fp
 8005a18:	f04f 0000 	mov.w	r0, #0
 8005a1c:	f04f 0100 	mov.w	r1, #0
 8005a20:	0299      	lsls	r1, r3, #10
 8005a22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a26:	0290      	lsls	r0, r2, #10
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4619      	mov	r1, r3
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	f7fb f804 	bl	8000a44 <__aeabi_uldivmod>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4613      	mov	r3, r2
 8005a42:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a44:	4b63      	ldr	r3, [pc, #396]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	3301      	adds	r3, #1
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	61bb      	str	r3, [r7, #24]
      break;
 8005a5e:	e0b2      	b.n	8005bc6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a60:	4b5c      	ldr	r3, [pc, #368]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a68:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a6a:	4b5a      	ldr	r3, [pc, #360]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d04d      	beq.n	8005b12 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a76:	4b57      	ldr	r3, [pc, #348]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	099b      	lsrs	r3, r3, #6
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f04f 0300 	mov.w	r3, #0
 8005a82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a86:	f04f 0100 	mov.w	r1, #0
 8005a8a:	ea02 0800 	and.w	r8, r2, r0
 8005a8e:	ea03 0901 	and.w	r9, r3, r1
 8005a92:	4640      	mov	r0, r8
 8005a94:	4649      	mov	r1, r9
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	014b      	lsls	r3, r1, #5
 8005aa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005aa4:	0142      	lsls	r2, r0, #5
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	ebb0 0008 	subs.w	r0, r0, r8
 8005aae:	eb61 0109 	sbc.w	r1, r1, r9
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	018b      	lsls	r3, r1, #6
 8005abc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ac0:	0182      	lsls	r2, r0, #6
 8005ac2:	1a12      	subs	r2, r2, r0
 8005ac4:	eb63 0301 	sbc.w	r3, r3, r1
 8005ac8:	f04f 0000 	mov.w	r0, #0
 8005acc:	f04f 0100 	mov.w	r1, #0
 8005ad0:	00d9      	lsls	r1, r3, #3
 8005ad2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ad6:	00d0      	lsls	r0, r2, #3
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	eb12 0208 	adds.w	r2, r2, r8
 8005ae0:	eb43 0309 	adc.w	r3, r3, r9
 8005ae4:	f04f 0000 	mov.w	r0, #0
 8005ae8:	f04f 0100 	mov.w	r1, #0
 8005aec:	0299      	lsls	r1, r3, #10
 8005aee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005af2:	0290      	lsls	r0, r2, #10
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4610      	mov	r0, r2
 8005afa:	4619      	mov	r1, r3
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	461a      	mov	r2, r3
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	f7fa ff9e 	bl	8000a44 <__aeabi_uldivmod>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	61fb      	str	r3, [r7, #28]
 8005b10:	e04a      	b.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b12:	4b30      	ldr	r3, [pc, #192]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	099b      	lsrs	r3, r3, #6
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b22:	f04f 0100 	mov.w	r1, #0
 8005b26:	ea02 0400 	and.w	r4, r2, r0
 8005b2a:	ea03 0501 	and.w	r5, r3, r1
 8005b2e:	4620      	mov	r0, r4
 8005b30:	4629      	mov	r1, r5
 8005b32:	f04f 0200 	mov.w	r2, #0
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	014b      	lsls	r3, r1, #5
 8005b3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b40:	0142      	lsls	r2, r0, #5
 8005b42:	4610      	mov	r0, r2
 8005b44:	4619      	mov	r1, r3
 8005b46:	1b00      	subs	r0, r0, r4
 8005b48:	eb61 0105 	sbc.w	r1, r1, r5
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	018b      	lsls	r3, r1, #6
 8005b56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b5a:	0182      	lsls	r2, r0, #6
 8005b5c:	1a12      	subs	r2, r2, r0
 8005b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f04f 0100 	mov.w	r1, #0
 8005b6a:	00d9      	lsls	r1, r3, #3
 8005b6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b70:	00d0      	lsls	r0, r2, #3
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	1912      	adds	r2, r2, r4
 8005b78:	eb45 0303 	adc.w	r3, r5, r3
 8005b7c:	f04f 0000 	mov.w	r0, #0
 8005b80:	f04f 0100 	mov.w	r1, #0
 8005b84:	0299      	lsls	r1, r3, #10
 8005b86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b8a:	0290      	lsls	r0, r2, #10
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4610      	mov	r0, r2
 8005b92:	4619      	mov	r1, r3
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	f7fa ff52 	bl	8000a44 <__aeabi_uldivmod>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	0f1b      	lsrs	r3, r3, #28
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	61bb      	str	r3, [r7, #24]
      break;
 8005bbe:	e002      	b.n	8005bc6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bc0:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005bc2:	61bb      	str	r3, [r7, #24]
      break;
 8005bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bc6:	69bb      	ldr	r3, [r7, #24]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3720      	adds	r7, #32
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	00f42400 	.word	0x00f42400

08005bdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e28d      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8083 	beq.w	8005d02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005bfc:	4b94      	ldr	r3, [pc, #592]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f003 030c 	and.w	r3, r3, #12
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d019      	beq.n	8005c3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c08:	4b91      	ldr	r3, [pc, #580]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d106      	bne.n	8005c22 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c14:	4b8e      	ldr	r3, [pc, #568]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c20:	d00c      	beq.n	8005c3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c22:	4b8b      	ldr	r3, [pc, #556]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c2a:	2b0c      	cmp	r3, #12
 8005c2c:	d112      	bne.n	8005c54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c2e:	4b88      	ldr	r3, [pc, #544]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c3a:	d10b      	bne.n	8005c54 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c3c:	4b84      	ldr	r3, [pc, #528]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d05b      	beq.n	8005d00 <HAL_RCC_OscConfig+0x124>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d157      	bne.n	8005d00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e25a      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5c:	d106      	bne.n	8005c6c <HAL_RCC_OscConfig+0x90>
 8005c5e:	4b7c      	ldr	r3, [pc, #496]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a7b      	ldr	r2, [pc, #492]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	e01d      	b.n	8005ca8 <HAL_RCC_OscConfig+0xcc>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c74:	d10c      	bne.n	8005c90 <HAL_RCC_OscConfig+0xb4>
 8005c76:	4b76      	ldr	r3, [pc, #472]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a75      	ldr	r2, [pc, #468]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	4b73      	ldr	r3, [pc, #460]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a72      	ldr	r2, [pc, #456]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	e00b      	b.n	8005ca8 <HAL_RCC_OscConfig+0xcc>
 8005c90:	4b6f      	ldr	r3, [pc, #444]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a6e      	ldr	r2, [pc, #440]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	4b6c      	ldr	r3, [pc, #432]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a6b      	ldr	r2, [pc, #428]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d013      	beq.n	8005cd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb0:	f7fd ff4c 	bl	8003b4c <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cb8:	f7fd ff48 	bl	8003b4c <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b64      	cmp	r3, #100	; 0x64
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e21f      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cca:	4b61      	ldr	r3, [pc, #388]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0f0      	beq.n	8005cb8 <HAL_RCC_OscConfig+0xdc>
 8005cd6:	e014      	b.n	8005d02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd8:	f7fd ff38 	bl	8003b4c <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ce0:	f7fd ff34 	bl	8003b4c <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b64      	cmp	r3, #100	; 0x64
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e20b      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cf2:	4b57      	ldr	r3, [pc, #348]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x104>
 8005cfe:	e000      	b.n	8005d02 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d06f      	beq.n	8005dee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d0e:	4b50      	ldr	r3, [pc, #320]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d017      	beq.n	8005d4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d1a:	4b4d      	ldr	r3, [pc, #308]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d105      	bne.n	8005d32 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d26:	4b4a      	ldr	r3, [pc, #296]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00b      	beq.n	8005d4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d32:	4b47      	ldr	r3, [pc, #284]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d3a:	2b0c      	cmp	r3, #12
 8005d3c:	d11c      	bne.n	8005d78 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d3e:	4b44      	ldr	r3, [pc, #272]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d116      	bne.n	8005d78 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d4a:	4b41      	ldr	r3, [pc, #260]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_RCC_OscConfig+0x186>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d001      	beq.n	8005d62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e1d3      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d62:	4b3b      	ldr	r3, [pc, #236]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	4937      	ldr	r1, [pc, #220]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d76:	e03a      	b.n	8005dee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d020      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d80:	4b34      	ldr	r3, [pc, #208]	; (8005e54 <HAL_RCC_OscConfig+0x278>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d86:	f7fd fee1 	bl	8003b4c <HAL_GetTick>
 8005d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8c:	e008      	b.n	8005da0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d8e:	f7fd fedd 	bl	8003b4c <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e1b4      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da0:	4b2b      	ldr	r3, [pc, #172]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0f0      	beq.n	8005d8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dac:	4b28      	ldr	r3, [pc, #160]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	4925      	ldr	r1, [pc, #148]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	600b      	str	r3, [r1, #0]
 8005dc0:	e015      	b.n	8005dee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dc2:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <HAL_RCC_OscConfig+0x278>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fd fec0 	bl	8003b4c <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dd0:	f7fd febc 	bl	8003b4c <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e193      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005de2:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d036      	beq.n	8005e68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d016      	beq.n	8005e30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e02:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <HAL_RCC_OscConfig+0x27c>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e08:	f7fd fea0 	bl	8003b4c <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e10:	f7fd fe9c 	bl	8003b4c <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e173      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e22:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0f0      	beq.n	8005e10 <HAL_RCC_OscConfig+0x234>
 8005e2e:	e01b      	b.n	8005e68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e30:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <HAL_RCC_OscConfig+0x27c>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e36:	f7fd fe89 	bl	8003b4c <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e3c:	e00e      	b.n	8005e5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e3e:	f7fd fe85 	bl	8003b4c <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d907      	bls.n	8005e5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e15c      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
 8005e50:	40023800 	.word	0x40023800
 8005e54:	42470000 	.word	0x42470000
 8005e58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e5c:	4b8a      	ldr	r3, [pc, #552]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1ea      	bne.n	8005e3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8097 	beq.w	8005fa4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e76:	2300      	movs	r3, #0
 8005e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e7a:	4b83      	ldr	r3, [pc, #524]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10f      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e86:	2300      	movs	r3, #0
 8005e88:	60bb      	str	r3, [r7, #8]
 8005e8a:	4b7f      	ldr	r3, [pc, #508]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	4a7e      	ldr	r2, [pc, #504]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e94:	6413      	str	r3, [r2, #64]	; 0x40
 8005e96:	4b7c      	ldr	r3, [pc, #496]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	60bb      	str	r3, [r7, #8]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea6:	4b79      	ldr	r3, [pc, #484]	; (800608c <HAL_RCC_OscConfig+0x4b0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d118      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eb2:	4b76      	ldr	r3, [pc, #472]	; (800608c <HAL_RCC_OscConfig+0x4b0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a75      	ldr	r2, [pc, #468]	; (800608c <HAL_RCC_OscConfig+0x4b0>)
 8005eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ebe:	f7fd fe45 	bl	8003b4c <HAL_GetTick>
 8005ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec6:	f7fd fe41 	bl	8003b4c <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e118      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed8:	4b6c      	ldr	r3, [pc, #432]	; (800608c <HAL_RCC_OscConfig+0x4b0>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0f0      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d106      	bne.n	8005efa <HAL_RCC_OscConfig+0x31e>
 8005eec:	4b66      	ldr	r3, [pc, #408]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef0:	4a65      	ldr	r2, [pc, #404]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005ef2:	f043 0301 	orr.w	r3, r3, #1
 8005ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef8:	e01c      	b.n	8005f34 <HAL_RCC_OscConfig+0x358>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d10c      	bne.n	8005f1c <HAL_RCC_OscConfig+0x340>
 8005f02:	4b61      	ldr	r3, [pc, #388]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	4a60      	ldr	r2, [pc, #384]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f08:	f043 0304 	orr.w	r3, r3, #4
 8005f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f0e:	4b5e      	ldr	r3, [pc, #376]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f12:	4a5d      	ldr	r2, [pc, #372]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	6713      	str	r3, [r2, #112]	; 0x70
 8005f1a:	e00b      	b.n	8005f34 <HAL_RCC_OscConfig+0x358>
 8005f1c:	4b5a      	ldr	r3, [pc, #360]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	4a59      	ldr	r2, [pc, #356]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f22:	f023 0301 	bic.w	r3, r3, #1
 8005f26:	6713      	str	r3, [r2, #112]	; 0x70
 8005f28:	4b57      	ldr	r3, [pc, #348]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2c:	4a56      	ldr	r2, [pc, #344]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f2e:	f023 0304 	bic.w	r3, r3, #4
 8005f32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d015      	beq.n	8005f68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3c:	f7fd fe06 	bl	8003b4c <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f42:	e00a      	b.n	8005f5a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f44:	f7fd fe02 	bl	8003b4c <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e0d7      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f5a:	4b4b      	ldr	r3, [pc, #300]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0ee      	beq.n	8005f44 <HAL_RCC_OscConfig+0x368>
 8005f66:	e014      	b.n	8005f92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f68:	f7fd fdf0 	bl	8003b4c <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f6e:	e00a      	b.n	8005f86 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f70:	f7fd fdec 	bl	8003b4c <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e0c1      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f86:	4b40      	ldr	r3, [pc, #256]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1ee      	bne.n	8005f70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d105      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f98:	4b3b      	ldr	r3, [pc, #236]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9c:	4a3a      	ldr	r2, [pc, #232]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 80ad 	beq.w	8006108 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fae:	4b36      	ldr	r3, [pc, #216]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 030c 	and.w	r3, r3, #12
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d060      	beq.n	800607c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d145      	bne.n	800604e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc2:	4b33      	ldr	r3, [pc, #204]	; (8006090 <HAL_RCC_OscConfig+0x4b4>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc8:	f7fd fdc0 	bl	8003b4c <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fd0:	f7fd fdbc 	bl	8003b4c <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e093      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe2:	4b29      	ldr	r3, [pc, #164]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f0      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	019b      	lsls	r3, r3, #6
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006004:	085b      	lsrs	r3, r3, #1
 8006006:	3b01      	subs	r3, #1
 8006008:	041b      	lsls	r3, r3, #16
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	061b      	lsls	r3, r3, #24
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	071b      	lsls	r3, r3, #28
 800601a:	491b      	ldr	r1, [pc, #108]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 800601c:	4313      	orrs	r3, r2
 800601e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006020:	4b1b      	ldr	r3, [pc, #108]	; (8006090 <HAL_RCC_OscConfig+0x4b4>)
 8006022:	2201      	movs	r2, #1
 8006024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006026:	f7fd fd91 	bl	8003b4c <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800602e:	f7fd fd8d 	bl	8003b4c <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e064      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006040:	4b11      	ldr	r3, [pc, #68]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0f0      	beq.n	800602e <HAL_RCC_OscConfig+0x452>
 800604c:	e05c      	b.n	8006108 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604e:	4b10      	ldr	r3, [pc, #64]	; (8006090 <HAL_RCC_OscConfig+0x4b4>)
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7fd fd7a 	bl	8003b4c <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800605c:	f7fd fd76 	bl	8003b4c <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e04d      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f0      	bne.n	800605c <HAL_RCC_OscConfig+0x480>
 800607a:	e045      	b.n	8006108 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d107      	bne.n	8006094 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e040      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
 8006088:	40023800 	.word	0x40023800
 800608c:	40007000 	.word	0x40007000
 8006090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006094:	4b1f      	ldr	r3, [pc, #124]	; (8006114 <HAL_RCC_OscConfig+0x538>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d030      	beq.n	8006104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d129      	bne.n	8006104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d122      	bne.n	8006104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060c4:	4013      	ands	r3, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d119      	bne.n	8006104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	085b      	lsrs	r3, r3, #1
 80060dc:	3b01      	subs	r3, #1
 80060de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d10f      	bne.n	8006104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d107      	bne.n	8006104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006100:	429a      	cmp	r2, r3
 8006102:	d001      	beq.n	8006108 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40023800 	.word	0x40023800

08006118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e041      	b.n	80061ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fd f90a 	bl	8003358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f000 fcdc 	bl	8006b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d001      	beq.n	80061d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e04e      	b.n	800626e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a23      	ldr	r2, [pc, #140]	; (800627c <HAL_TIM_Base_Start_IT+0xc4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d022      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0x80>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fa:	d01d      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0x80>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <HAL_TIM_Base_Start_IT+0xc8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d018      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0x80>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1e      	ldr	r2, [pc, #120]	; (8006284 <HAL_TIM_Base_Start_IT+0xcc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d013      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0x80>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1c      	ldr	r2, [pc, #112]	; (8006288 <HAL_TIM_Base_Start_IT+0xd0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00e      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0x80>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1b      	ldr	r2, [pc, #108]	; (800628c <HAL_TIM_Base_Start_IT+0xd4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d009      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0x80>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a19      	ldr	r2, [pc, #100]	; (8006290 <HAL_TIM_Base_Start_IT+0xd8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d004      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0x80>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a18      	ldr	r2, [pc, #96]	; (8006294 <HAL_TIM_Base_Start_IT+0xdc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d111      	bne.n	800625c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b06      	cmp	r3, #6
 8006248:	d010      	beq.n	800626c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0201 	orr.w	r2, r2, #1
 8006258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625a:	e007      	b.n	800626c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40010000 	.word	0x40010000
 8006280:	40000400 	.word	0x40000400
 8006284:	40000800 	.word	0x40000800
 8006288:	40000c00 	.word	0x40000c00
 800628c:	40010400 	.word	0x40010400
 8006290:	40014000 	.word	0x40014000
 8006294:	40001800 	.word	0x40001800

08006298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e041      	b.n	800632e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fd f828 	bl	8003314 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f000 fc1c 	bl	8006b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d109      	bne.n	800635c <HAL_TIM_PWM_Start+0x24>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b01      	cmp	r3, #1
 8006352:	bf14      	ite	ne
 8006354:	2301      	movne	r3, #1
 8006356:	2300      	moveq	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	e022      	b.n	80063a2 <HAL_TIM_PWM_Start+0x6a>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b04      	cmp	r3, #4
 8006360:	d109      	bne.n	8006376 <HAL_TIM_PWM_Start+0x3e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b01      	cmp	r3, #1
 800636c:	bf14      	ite	ne
 800636e:	2301      	movne	r3, #1
 8006370:	2300      	moveq	r3, #0
 8006372:	b2db      	uxtb	r3, r3
 8006374:	e015      	b.n	80063a2 <HAL_TIM_PWM_Start+0x6a>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b08      	cmp	r3, #8
 800637a:	d109      	bne.n	8006390 <HAL_TIM_PWM_Start+0x58>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b01      	cmp	r3, #1
 8006386:	bf14      	ite	ne
 8006388:	2301      	movne	r3, #1
 800638a:	2300      	moveq	r3, #0
 800638c:	b2db      	uxtb	r3, r3
 800638e:	e008      	b.n	80063a2 <HAL_TIM_PWM_Start+0x6a>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b01      	cmp	r3, #1
 800639a:	bf14      	ite	ne
 800639c:	2301      	movne	r3, #1
 800639e:	2300      	moveq	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e07c      	b.n	80064a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <HAL_TIM_PWM_Start+0x82>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b8:	e013      	b.n	80063e2 <HAL_TIM_PWM_Start+0xaa>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d104      	bne.n	80063ca <HAL_TIM_PWM_Start+0x92>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063c8:	e00b      	b.n	80063e2 <HAL_TIM_PWM_Start+0xaa>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d104      	bne.n	80063da <HAL_TIM_PWM_Start+0xa2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063d8:	e003      	b.n	80063e2 <HAL_TIM_PWM_Start+0xaa>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2201      	movs	r2, #1
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fde2 	bl	8006fb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a2d      	ldr	r2, [pc, #180]	; (80064ac <HAL_TIM_PWM_Start+0x174>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d004      	beq.n	8006404 <HAL_TIM_PWM_Start+0xcc>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a2c      	ldr	r2, [pc, #176]	; (80064b0 <HAL_TIM_PWM_Start+0x178>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d101      	bne.n	8006408 <HAL_TIM_PWM_Start+0xd0>
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <HAL_TIM_PWM_Start+0xd2>
 8006408:	2300      	movs	r3, #0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d007      	beq.n	800641e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800641c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a22      	ldr	r2, [pc, #136]	; (80064ac <HAL_TIM_PWM_Start+0x174>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d022      	beq.n	800646e <HAL_TIM_PWM_Start+0x136>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006430:	d01d      	beq.n	800646e <HAL_TIM_PWM_Start+0x136>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1f      	ldr	r2, [pc, #124]	; (80064b4 <HAL_TIM_PWM_Start+0x17c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d018      	beq.n	800646e <HAL_TIM_PWM_Start+0x136>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1d      	ldr	r2, [pc, #116]	; (80064b8 <HAL_TIM_PWM_Start+0x180>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d013      	beq.n	800646e <HAL_TIM_PWM_Start+0x136>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1c      	ldr	r2, [pc, #112]	; (80064bc <HAL_TIM_PWM_Start+0x184>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00e      	beq.n	800646e <HAL_TIM_PWM_Start+0x136>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a16      	ldr	r2, [pc, #88]	; (80064b0 <HAL_TIM_PWM_Start+0x178>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d009      	beq.n	800646e <HAL_TIM_PWM_Start+0x136>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a18      	ldr	r2, [pc, #96]	; (80064c0 <HAL_TIM_PWM_Start+0x188>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d004      	beq.n	800646e <HAL_TIM_PWM_Start+0x136>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a16      	ldr	r2, [pc, #88]	; (80064c4 <HAL_TIM_PWM_Start+0x18c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d111      	bne.n	8006492 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b06      	cmp	r3, #6
 800647e:	d010      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006490:	e007      	b.n	80064a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0201 	orr.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40010000 	.word	0x40010000
 80064b0:	40010400 	.word	0x40010400
 80064b4:	40000400 	.word	0x40000400
 80064b8:	40000800 	.word	0x40000800
 80064bc:	40000c00 	.word	0x40000c00
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40001800 	.word	0x40001800

080064c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e097      	b.n	800660c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7fc fe01 	bl	80030f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2202      	movs	r2, #2
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800650c:	f023 0307 	bic.w	r3, r3, #7
 8006510:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3304      	adds	r3, #4
 800651a:	4619      	mov	r1, r3
 800651c:	4610      	mov	r0, r2
 800651e:	f000 faf9 	bl	8006b14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800654a:	f023 0303 	bic.w	r3, r3, #3
 800654e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	021b      	lsls	r3, r3, #8
 800655a:	4313      	orrs	r3, r2
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006568:	f023 030c 	bic.w	r3, r3, #12
 800656c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006574:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006578:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	4313      	orrs	r3, r2
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	011a      	lsls	r2, r3, #4
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	031b      	lsls	r3, r3, #12
 8006598:	4313      	orrs	r3, r2
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80065ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	4313      	orrs	r3, r2
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006624:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800662c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006634:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800663c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d110      	bne.n	8006666 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d102      	bne.n	8006650 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800664a:	7b7b      	ldrb	r3, [r7, #13]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d001      	beq.n	8006654 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e069      	b.n	8006728 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006664:	e031      	b.n	80066ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b04      	cmp	r3, #4
 800666a:	d110      	bne.n	800668e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d102      	bne.n	8006678 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006672:	7b3b      	ldrb	r3, [r7, #12]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d001      	beq.n	800667c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e055      	b.n	8006728 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800668c:	e01d      	b.n	80066ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d108      	bne.n	80066a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d105      	bne.n	80066a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800669a:	7b7b      	ldrb	r3, [r7, #13]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d102      	bne.n	80066a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066a0:	7b3b      	ldrb	r3, [r7, #12]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d001      	beq.n	80066aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e03e      	b.n	8006728 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2202      	movs	r2, #2
 80066c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_TIM_Encoder_Start+0xc4>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d008      	beq.n	80066e8 <HAL_TIM_Encoder_Start+0xd4>
 80066d6:	e00f      	b.n	80066f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2201      	movs	r2, #1
 80066de:	2100      	movs	r1, #0
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fc67 	bl	8006fb4 <TIM_CCxChannelCmd>
      break;
 80066e6:	e016      	b.n	8006716 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2201      	movs	r2, #1
 80066ee:	2104      	movs	r1, #4
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fc5f 	bl	8006fb4 <TIM_CCxChannelCmd>
      break;
 80066f6:	e00e      	b.n	8006716 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2201      	movs	r2, #1
 80066fe:	2100      	movs	r1, #0
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fc57 	bl	8006fb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2201      	movs	r2, #1
 800670c:	2104      	movs	r1, #4
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fc50 	bl	8006fb4 <TIM_CCxChannelCmd>
      break;
 8006714:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f042 0201 	orr.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b02      	cmp	r3, #2
 8006744:	d122      	bne.n	800678c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b02      	cmp	r3, #2
 8006752:	d11b      	bne.n	800678c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f06f 0202 	mvn.w	r2, #2
 800675c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f9b0 	bl	8006ad8 <HAL_TIM_IC_CaptureCallback>
 8006778:	e005      	b.n	8006786 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f9a2 	bl	8006ac4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f9b3 	bl	8006aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b04      	cmp	r3, #4
 8006798:	d122      	bne.n	80067e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d11b      	bne.n	80067e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f06f 0204 	mvn.w	r2, #4
 80067b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2202      	movs	r2, #2
 80067b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f986 	bl	8006ad8 <HAL_TIM_IC_CaptureCallback>
 80067cc:	e005      	b.n	80067da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f978 	bl	8006ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f989 	bl	8006aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d122      	bne.n	8006834 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d11b      	bne.n	8006834 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0208 	mvn.w	r2, #8
 8006804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2204      	movs	r2, #4
 800680a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f95c 	bl	8006ad8 <HAL_TIM_IC_CaptureCallback>
 8006820:	e005      	b.n	800682e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f94e 	bl	8006ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f95f 	bl	8006aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	2b10      	cmp	r3, #16
 8006840:	d122      	bne.n	8006888 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f003 0310 	and.w	r3, r3, #16
 800684c:	2b10      	cmp	r3, #16
 800684e:	d11b      	bne.n	8006888 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f06f 0210 	mvn.w	r2, #16
 8006858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2208      	movs	r2, #8
 800685e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f932 	bl	8006ad8 <HAL_TIM_IC_CaptureCallback>
 8006874:	e005      	b.n	8006882 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f924 	bl	8006ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f935 	bl	8006aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b01      	cmp	r3, #1
 8006894:	d10e      	bne.n	80068b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d107      	bne.n	80068b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f06f 0201 	mvn.w	r2, #1
 80068ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fb f9f8 	bl	8001ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068be:	2b80      	cmp	r3, #128	; 0x80
 80068c0:	d10e      	bne.n	80068e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068cc:	2b80      	cmp	r3, #128	; 0x80
 80068ce:	d107      	bne.n	80068e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fc16 	bl	800710c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ea:	2b40      	cmp	r3, #64	; 0x40
 80068ec:	d10e      	bne.n	800690c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b40      	cmp	r3, #64	; 0x40
 80068fa:	d107      	bne.n	800690c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f8fa 	bl	8006b00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b20      	cmp	r3, #32
 8006918:	d10e      	bne.n	8006938 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b20      	cmp	r3, #32
 8006926:	d107      	bne.n	8006938 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0220 	mvn.w	r2, #32
 8006930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fbe0 	bl	80070f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006938:	bf00      	nop
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800695a:	2302      	movs	r3, #2
 800695c:	e0ae      	b.n	8006abc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b0c      	cmp	r3, #12
 800696a:	f200 809f 	bhi.w	8006aac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800696e:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006974:	080069a9 	.word	0x080069a9
 8006978:	08006aad 	.word	0x08006aad
 800697c:	08006aad 	.word	0x08006aad
 8006980:	08006aad 	.word	0x08006aad
 8006984:	080069e9 	.word	0x080069e9
 8006988:	08006aad 	.word	0x08006aad
 800698c:	08006aad 	.word	0x08006aad
 8006990:	08006aad 	.word	0x08006aad
 8006994:	08006a2b 	.word	0x08006a2b
 8006998:	08006aad 	.word	0x08006aad
 800699c:	08006aad 	.word	0x08006aad
 80069a0:	08006aad 	.word	0x08006aad
 80069a4:	08006a6b 	.word	0x08006a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 f950 	bl	8006c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0208 	orr.w	r2, r2, #8
 80069c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699a      	ldr	r2, [r3, #24]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0204 	bic.w	r2, r2, #4
 80069d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6999      	ldr	r1, [r3, #24]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	691a      	ldr	r2, [r3, #16]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	619a      	str	r2, [r3, #24]
      break;
 80069e6:	e064      	b.n	8006ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 f9a0 	bl	8006d34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699a      	ldr	r2, [r3, #24]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6999      	ldr	r1, [r3, #24]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	021a      	lsls	r2, r3, #8
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	619a      	str	r2, [r3, #24]
      break;
 8006a28:	e043      	b.n	8006ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 f9f5 	bl	8006e20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69da      	ldr	r2, [r3, #28]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0208 	orr.w	r2, r2, #8
 8006a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69da      	ldr	r2, [r3, #28]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0204 	bic.w	r2, r2, #4
 8006a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69d9      	ldr	r1, [r3, #28]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	61da      	str	r2, [r3, #28]
      break;
 8006a68:	e023      	b.n	8006ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fa49 	bl	8006f08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69da      	ldr	r2, [r3, #28]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69da      	ldr	r2, [r3, #28]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69d9      	ldr	r1, [r3, #28]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	021a      	lsls	r2, r3, #8
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	61da      	str	r2, [r3, #28]
      break;
 8006aaa:	e002      	b.n	8006ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a40      	ldr	r2, [pc, #256]	; (8006c28 <TIM_Base_SetConfig+0x114>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d013      	beq.n	8006b54 <TIM_Base_SetConfig+0x40>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b32:	d00f      	beq.n	8006b54 <TIM_Base_SetConfig+0x40>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a3d      	ldr	r2, [pc, #244]	; (8006c2c <TIM_Base_SetConfig+0x118>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00b      	beq.n	8006b54 <TIM_Base_SetConfig+0x40>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a3c      	ldr	r2, [pc, #240]	; (8006c30 <TIM_Base_SetConfig+0x11c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d007      	beq.n	8006b54 <TIM_Base_SetConfig+0x40>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a3b      	ldr	r2, [pc, #236]	; (8006c34 <TIM_Base_SetConfig+0x120>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_Base_SetConfig+0x40>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a3a      	ldr	r2, [pc, #232]	; (8006c38 <TIM_Base_SetConfig+0x124>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d108      	bne.n	8006b66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a2f      	ldr	r2, [pc, #188]	; (8006c28 <TIM_Base_SetConfig+0x114>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d02b      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b74:	d027      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a2c      	ldr	r2, [pc, #176]	; (8006c2c <TIM_Base_SetConfig+0x118>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d023      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a2b      	ldr	r2, [pc, #172]	; (8006c30 <TIM_Base_SetConfig+0x11c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d01f      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a2a      	ldr	r2, [pc, #168]	; (8006c34 <TIM_Base_SetConfig+0x120>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d01b      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a29      	ldr	r2, [pc, #164]	; (8006c38 <TIM_Base_SetConfig+0x124>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d017      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a28      	ldr	r2, [pc, #160]	; (8006c3c <TIM_Base_SetConfig+0x128>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d013      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a27      	ldr	r2, [pc, #156]	; (8006c40 <TIM_Base_SetConfig+0x12c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00f      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a26      	ldr	r2, [pc, #152]	; (8006c44 <TIM_Base_SetConfig+0x130>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00b      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a25      	ldr	r2, [pc, #148]	; (8006c48 <TIM_Base_SetConfig+0x134>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d007      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a24      	ldr	r2, [pc, #144]	; (8006c4c <TIM_Base_SetConfig+0x138>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d003      	beq.n	8006bc6 <TIM_Base_SetConfig+0xb2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a23      	ldr	r2, [pc, #140]	; (8006c50 <TIM_Base_SetConfig+0x13c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d108      	bne.n	8006bd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a0a      	ldr	r2, [pc, #40]	; (8006c28 <TIM_Base_SetConfig+0x114>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d003      	beq.n	8006c0c <TIM_Base_SetConfig+0xf8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a0c      	ldr	r2, [pc, #48]	; (8006c38 <TIM_Base_SetConfig+0x124>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d103      	bne.n	8006c14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	691a      	ldr	r2, [r3, #16]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	615a      	str	r2, [r3, #20]
}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	40000400 	.word	0x40000400
 8006c30:	40000800 	.word	0x40000800
 8006c34:	40000c00 	.word	0x40000c00
 8006c38:	40010400 	.word	0x40010400
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40014400 	.word	0x40014400
 8006c44:	40014800 	.word	0x40014800
 8006c48:	40001800 	.word	0x40001800
 8006c4c:	40001c00 	.word	0x40001c00
 8006c50:	40002000 	.word	0x40002000

08006c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f023 0201 	bic.w	r2, r3, #1
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f023 0302 	bic.w	r3, r3, #2
 8006c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a20      	ldr	r2, [pc, #128]	; (8006d2c <TIM_OC1_SetConfig+0xd8>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_OC1_SetConfig+0x64>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a1f      	ldr	r2, [pc, #124]	; (8006d30 <TIM_OC1_SetConfig+0xdc>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d10c      	bne.n	8006cd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f023 0308 	bic.w	r3, r3, #8
 8006cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f023 0304 	bic.w	r3, r3, #4
 8006cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a15      	ldr	r2, [pc, #84]	; (8006d2c <TIM_OC1_SetConfig+0xd8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d003      	beq.n	8006ce2 <TIM_OC1_SetConfig+0x8e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a14      	ldr	r2, [pc, #80]	; (8006d30 <TIM_OC1_SetConfig+0xdc>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d111      	bne.n	8006d06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	621a      	str	r2, [r3, #32]
}
 8006d20:	bf00      	nop
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	40010000 	.word	0x40010000
 8006d30:	40010400 	.word	0x40010400

08006d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	f023 0210 	bic.w	r2, r3, #16
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	021b      	lsls	r3, r3, #8
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f023 0320 	bic.w	r3, r3, #32
 8006d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	011b      	lsls	r3, r3, #4
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a22      	ldr	r2, [pc, #136]	; (8006e18 <TIM_OC2_SetConfig+0xe4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d003      	beq.n	8006d9c <TIM_OC2_SetConfig+0x68>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a21      	ldr	r2, [pc, #132]	; (8006e1c <TIM_OC2_SetConfig+0xe8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d10d      	bne.n	8006db8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a17      	ldr	r2, [pc, #92]	; (8006e18 <TIM_OC2_SetConfig+0xe4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_OC2_SetConfig+0x94>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a16      	ldr	r2, [pc, #88]	; (8006e1c <TIM_OC2_SetConfig+0xe8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d113      	bne.n	8006df0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40010400 	.word	0x40010400

08006e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0303 	bic.w	r3, r3, #3
 8006e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	021b      	lsls	r3, r3, #8
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a21      	ldr	r2, [pc, #132]	; (8006f00 <TIM_OC3_SetConfig+0xe0>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d003      	beq.n	8006e86 <TIM_OC3_SetConfig+0x66>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a20      	ldr	r2, [pc, #128]	; (8006f04 <TIM_OC3_SetConfig+0xe4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d10d      	bne.n	8006ea2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	021b      	lsls	r3, r3, #8
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a16      	ldr	r2, [pc, #88]	; (8006f00 <TIM_OC3_SetConfig+0xe0>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d003      	beq.n	8006eb2 <TIM_OC3_SetConfig+0x92>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a15      	ldr	r2, [pc, #84]	; (8006f04 <TIM_OC3_SetConfig+0xe4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d113      	bne.n	8006eda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	621a      	str	r2, [r3, #32]
}
 8006ef4:	bf00      	nop
 8006ef6:	371c      	adds	r7, #28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	40010000 	.word	0x40010000
 8006f04:	40010400 	.word	0x40010400

08006f08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	021b      	lsls	r3, r3, #8
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	031b      	lsls	r3, r3, #12
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a12      	ldr	r2, [pc, #72]	; (8006fac <TIM_OC4_SetConfig+0xa4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC4_SetConfig+0x68>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a11      	ldr	r2, [pc, #68]	; (8006fb0 <TIM_OC4_SetConfig+0xa8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d109      	bne.n	8006f84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	019b      	lsls	r3, r3, #6
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	621a      	str	r2, [r3, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40010000 	.word	0x40010000
 8006fb0:	40010400 	.word	0x40010400

08006fb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f003 031f 	and.w	r3, r3, #31
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6a1a      	ldr	r2, [r3, #32]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	43db      	mvns	r3, r3
 8006fd6:	401a      	ands	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a1a      	ldr	r2, [r3, #32]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f003 031f 	and.w	r3, r3, #31
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fec:	431a      	orrs	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	621a      	str	r2, [r3, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
	...

08007000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007010:	2b01      	cmp	r3, #1
 8007012:	d101      	bne.n	8007018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007014:	2302      	movs	r3, #2
 8007016:	e05a      	b.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a21      	ldr	r2, [pc, #132]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d022      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007064:	d01d      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1d      	ldr	r2, [pc, #116]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d018      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a1b      	ldr	r2, [pc, #108]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d013      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a1a      	ldr	r2, [pc, #104]	; (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00e      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a18      	ldr	r2, [pc, #96]	; (80070ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d009      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a17      	ldr	r2, [pc, #92]	; (80070f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d004      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a15      	ldr	r2, [pc, #84]	; (80070f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d10c      	bne.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40010000 	.word	0x40010000
 80070e0:	40000400 	.word	0x40000400
 80070e4:	40000800 	.word	0x40000800
 80070e8:	40000c00 	.word	0x40000c00
 80070ec:	40010400 	.word	0x40010400
 80070f0:	40014000 	.word	0x40014000
 80070f4:	40001800 	.word	0x40001800

080070f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007120:	b480      	push	{r7}
 8007122:	b089      	sub	sp, #36	; 0x24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	fa93 f3a3 	rbit	r3, r3
 800713a:	613b      	str	r3, [r7, #16]
  return result;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	fab3 f383 	clz	r3, r3
 8007142:	b2db      	uxtb	r3, r3
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	2103      	movs	r1, #3
 8007148:	fa01 f303 	lsl.w	r3, r1, r3
 800714c:	43db      	mvns	r3, r3
 800714e:	401a      	ands	r2, r3
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	fa93 f3a3 	rbit	r3, r3
 800715a:	61bb      	str	r3, [r7, #24]
  return result;
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	fab3 f383 	clz	r3, r3
 8007162:	b2db      	uxtb	r3, r3
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	fa01 f303 	lsl.w	r3, r1, r3
 800716c:	431a      	orrs	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]
}
 8007172:	bf00      	nop
 8007174:	3724      	adds	r7, #36	; 0x24
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800717e:	b480      	push	{r7}
 8007180:	b085      	sub	sp, #20
 8007182:	af00      	add	r7, sp, #0
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	43db      	mvns	r3, r3
 8007192:	401a      	ands	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	fb01 f303 	mul.w	r3, r1, r3
 800719c:	431a      	orrs	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	605a      	str	r2, [r3, #4]
}
 80071a2:	bf00      	nop
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b089      	sub	sp, #36	; 0x24
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	60f8      	str	r0, [r7, #12]
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	fa93 f3a3 	rbit	r3, r3
 80071c8:	613b      	str	r3, [r7, #16]
  return result;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	fab3 f383 	clz	r3, r3
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	2103      	movs	r1, #3
 80071d6:	fa01 f303 	lsl.w	r3, r1, r3
 80071da:	43db      	mvns	r3, r3
 80071dc:	401a      	ands	r2, r3
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	fa93 f3a3 	rbit	r3, r3
 80071e8:	61bb      	str	r3, [r7, #24]
  return result;
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	fab3 f383 	clz	r3, r3
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	fa01 f303 	lsl.w	r3, r1, r3
 80071fa:	431a      	orrs	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8007200:	bf00      	nop
 8007202:	3724      	adds	r7, #36	; 0x24
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800720c:	b480      	push	{r7}
 800720e:	b089      	sub	sp, #36	; 0x24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	fa93 f3a3 	rbit	r3, r3
 8007226:	613b      	str	r3, [r7, #16]
  return result;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	fab3 f383 	clz	r3, r3
 800722e:	b2db      	uxtb	r3, r3
 8007230:	005b      	lsls	r3, r3, #1
 8007232:	2103      	movs	r1, #3
 8007234:	fa01 f303 	lsl.w	r3, r1, r3
 8007238:	43db      	mvns	r3, r3
 800723a:	401a      	ands	r2, r3
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	fa93 f3a3 	rbit	r3, r3
 8007246:	61bb      	str	r3, [r7, #24]
  return result;
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	fab3 f383 	clz	r3, r3
 800724e:	b2db      	uxtb	r3, r3
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	fa01 f303 	lsl.w	r3, r1, r3
 8007258:	431a      	orrs	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	60da      	str	r2, [r3, #12]
}
 800725e:	bf00      	nop
 8007260:	3724      	adds	r7, #36	; 0x24
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800726a:	b480      	push	{r7}
 800726c:	b089      	sub	sp, #36	; 0x24
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a1a      	ldr	r2, [r3, #32]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	fa93 f3a3 	rbit	r3, r3
 8007284:	613b      	str	r3, [r7, #16]
  return result;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	fab3 f383 	clz	r3, r3
 800728c:	b2db      	uxtb	r3, r3
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	210f      	movs	r1, #15
 8007292:	fa01 f303 	lsl.w	r3, r1, r3
 8007296:	43db      	mvns	r3, r3
 8007298:	401a      	ands	r2, r3
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	fa93 f3a3 	rbit	r3, r3
 80072a4:	61bb      	str	r3, [r7, #24]
  return result;
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	fab3 f383 	clz	r3, r3
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	fa01 f303 	lsl.w	r3, r1, r3
 80072b6:	431a      	orrs	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80072bc:	bf00      	nop
 80072be:	3724      	adds	r7, #36	; 0x24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b089      	sub	sp, #36	; 0x24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	fa93 f3a3 	rbit	r3, r3
 80072e4:	613b      	str	r3, [r7, #16]
  return result;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	fab3 f383 	clz	r3, r3
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	210f      	movs	r1, #15
 80072f2:	fa01 f303 	lsl.w	r3, r1, r3
 80072f6:	43db      	mvns	r3, r3
 80072f8:	401a      	ands	r2, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	0a1b      	lsrs	r3, r3, #8
 80072fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	fa93 f3a3 	rbit	r3, r3
 8007306:	61bb      	str	r3, [r7, #24]
  return result;
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	fab3 f383 	clz	r3, r3
 800730e:	b2db      	uxtb	r3, r3
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	fa01 f303 	lsl.w	r3, r1, r3
 8007318:	431a      	orrs	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800731e:	bf00      	nop
 8007320:	3724      	adds	r7, #36	; 0x24
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b088      	sub	sp, #32
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007334:	2300      	movs	r3, #0
 8007336:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8007338:	2300      	movs	r3, #0
 800733a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	fa93 f3a3 	rbit	r3, r3
 8007348:	613b      	str	r3, [r7, #16]
  return result;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	fab3 f383 	clz	r3, r3
 8007350:	b2db      	uxtb	r3, r3
 8007352:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007354:	e050      	b.n	80073f8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	2101      	movs	r1, #1
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	fa01 f303 	lsl.w	r3, r1, r3
 8007362:	4013      	ands	r3, r2
 8007364:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d042      	beq.n	80073f2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d003      	beq.n	800737c <LL_GPIO_Init+0x52>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d10d      	bne.n	8007398 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	461a      	mov	r2, r3
 8007382:	69b9      	ldr	r1, [r7, #24]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff ff12 	bl	80071ae <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	461a      	mov	r2, r3
 8007390:	69b9      	ldr	r1, [r7, #24]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff fef3 	bl	800717e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	461a      	mov	r2, r3
 800739e:	69b9      	ldr	r1, [r7, #24]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff ff33 	bl	800720c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d11a      	bne.n	80073e4 <LL_GPIO_Init+0xba>
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	fa93 f3a3 	rbit	r3, r3
 80073b8:	60bb      	str	r3, [r7, #8]
  return result;
 80073ba:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80073bc:	fab3 f383 	clz	r3, r3
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b07      	cmp	r3, #7
 80073c4:	d807      	bhi.n	80073d6 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	461a      	mov	r2, r3
 80073cc:	69b9      	ldr	r1, [r7, #24]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff ff4b 	bl	800726a <LL_GPIO_SetAFPin_0_7>
 80073d4:	e006      	b.n	80073e4 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	461a      	mov	r2, r3
 80073dc:	69b9      	ldr	r1, [r7, #24]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff ff72 	bl	80072c8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	461a      	mov	r2, r3
 80073ea:	69b9      	ldr	r1, [r7, #24]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff fe97 	bl	8007120 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	3301      	adds	r3, #1
 80073f6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1a7      	bne.n	8007356 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3720      	adds	r7, #32
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007414:	4b04      	ldr	r3, [pc, #16]	; (8007428 <LL_RCC_GetSysClkSource+0x18>)
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 030c 	and.w	r3, r3, #12
}
 800741c:	4618      	mov	r0, r3
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	40023800 	.word	0x40023800

0800742c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007430:	4b04      	ldr	r3, [pc, #16]	; (8007444 <LL_RCC_GetAHBPrescaler+0x18>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007438:	4618      	mov	r0, r3
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	40023800 	.word	0x40023800

08007448 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800744c:	4b04      	ldr	r3, [pc, #16]	; (8007460 <LL_RCC_GetAPB1Prescaler+0x18>)
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8007454:	4618      	mov	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40023800 	.word	0x40023800

08007464 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007468:	4b04      	ldr	r3, [pc, #16]	; (800747c <LL_RCC_GetAPB2Prescaler+0x18>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8007470:	4618      	mov	r0, r3
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40023800 	.word	0x40023800

08007480 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007484:	4b04      	ldr	r3, [pc, #16]	; (8007498 <LL_RCC_PLL_GetMainSource+0x18>)
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800748c:	4618      	mov	r0, r3
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	40023800 	.word	0x40023800

0800749c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80074a0:	4b04      	ldr	r3, [pc, #16]	; (80074b4 <LL_RCC_PLL_GetN+0x18>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	099b      	lsrs	r3, r3, #6
 80074a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	40023800 	.word	0x40023800

080074b8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80074bc:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <LL_RCC_PLL_GetP+0x18>)
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	40023800 	.word	0x40023800

080074d4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80074d8:	4b04      	ldr	r3, [pc, #16]	; (80074ec <LL_RCC_PLL_GetR+0x18>)
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	40023800 	.word	0x40023800

080074f0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80074f4:	4b04      	ldr	r3, [pc, #16]	; (8007508 <LL_RCC_PLL_GetDivider+0x18>)
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40023800 	.word	0x40023800

0800750c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8007514:	f000 f820 	bl	8007558 <RCC_GetSystemClockFreq>
 8007518:	4602      	mov	r2, r0
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4618      	mov	r0, r3
 8007524:	f000 f85a 	bl	80075dc <RCC_GetHCLKClockFreq>
 8007528:	4602      	mov	r2, r0
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 f868 	bl	8007608 <RCC_GetPCLK1ClockFreq>
 8007538:	4602      	mov	r2, r0
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	4618      	mov	r0, r3
 8007544:	f000 f874 	bl	8007630 <RCC_GetPCLK2ClockFreq>
 8007548:	4602      	mov	r2, r0
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60da      	str	r2, [r3, #12]
}
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8007562:	f7ff ff55 	bl	8007410 <LL_RCC_GetSysClkSource>
 8007566:	4603      	mov	r3, r0
 8007568:	2b0c      	cmp	r3, #12
 800756a:	d82d      	bhi.n	80075c8 <RCC_GetSystemClockFreq+0x70>
 800756c:	a201      	add	r2, pc, #4	; (adr r2, 8007574 <RCC_GetSystemClockFreq+0x1c>)
 800756e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007572:	bf00      	nop
 8007574:	080075a9 	.word	0x080075a9
 8007578:	080075c9 	.word	0x080075c9
 800757c:	080075c9 	.word	0x080075c9
 8007580:	080075c9 	.word	0x080075c9
 8007584:	080075af 	.word	0x080075af
 8007588:	080075c9 	.word	0x080075c9
 800758c:	080075c9 	.word	0x080075c9
 8007590:	080075c9 	.word	0x080075c9
 8007594:	080075b5 	.word	0x080075b5
 8007598:	080075c9 	.word	0x080075c9
 800759c:	080075c9 	.word	0x080075c9
 80075a0:	080075c9 	.word	0x080075c9
 80075a4:	080075bf 	.word	0x080075bf
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80075a8:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <RCC_GetSystemClockFreq+0x80>)
 80075aa:	607b      	str	r3, [r7, #4]
      break;
 80075ac:	e00f      	b.n	80075ce <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80075ae:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <RCC_GetSystemClockFreq+0x80>)
 80075b0:	607b      	str	r3, [r7, #4]
      break;
 80075b2:	e00c      	b.n	80075ce <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80075b4:	2008      	movs	r0, #8
 80075b6:	f000 f84f 	bl	8007658 <RCC_PLL_GetFreqDomain_SYS>
 80075ba:	6078      	str	r0, [r7, #4]
      break;
 80075bc:	e007      	b.n	80075ce <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 80075be:	200c      	movs	r0, #12
 80075c0:	f000 f84a 	bl	8007658 <RCC_PLL_GetFreqDomain_SYS>
 80075c4:	6078      	str	r0, [r7, #4]
      break;
 80075c6:	e002      	b.n	80075ce <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80075c8:	4b03      	ldr	r3, [pc, #12]	; (80075d8 <RCC_GetSystemClockFreq+0x80>)
 80075ca:	607b      	str	r3, [r7, #4]
      break;
 80075cc:	bf00      	nop
  }

  return frequency;
 80075ce:	687b      	ldr	r3, [r7, #4]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	00f42400 	.word	0x00f42400

080075dc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80075e4:	f7ff ff22 	bl	800742c <LL_RCC_GetAHBPrescaler>
 80075e8:	4603      	mov	r3, r0
 80075ea:	091b      	lsrs	r3, r3, #4
 80075ec:	f003 030f 	and.w	r3, r3, #15
 80075f0:	4a04      	ldr	r2, [pc, #16]	; (8007604 <RCC_GetHCLKClockFreq+0x28>)
 80075f2:	5cd3      	ldrb	r3, [r2, r3]
 80075f4:	461a      	mov	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	40d3      	lsrs	r3, r2
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	080084ec 	.word	0x080084ec

08007608 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007610:	f7ff ff1a 	bl	8007448 <LL_RCC_GetAPB1Prescaler>
 8007614:	4603      	mov	r3, r0
 8007616:	0a9b      	lsrs	r3, r3, #10
 8007618:	4a04      	ldr	r2, [pc, #16]	; (800762c <RCC_GetPCLK1ClockFreq+0x24>)
 800761a:	5cd3      	ldrb	r3, [r2, r3]
 800761c:	461a      	mov	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	40d3      	lsrs	r3, r2
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	080084fc 	.word	0x080084fc

08007630 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007638:	f7ff ff14 	bl	8007464 <LL_RCC_GetAPB2Prescaler>
 800763c:	4603      	mov	r3, r0
 800763e:	0b5b      	lsrs	r3, r3, #13
 8007640:	4a04      	ldr	r2, [pc, #16]	; (8007654 <RCC_GetPCLK2ClockFreq+0x24>)
 8007642:	5cd3      	ldrb	r3, [r2, r3]
 8007644:	461a      	mov	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	40d3      	lsrs	r3, r2
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	080084fc 	.word	0x080084fc

08007658 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007658:	b590      	push	{r4, r7, lr}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	2300      	movs	r3, #0
 800766a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800766c:	f7ff ff08 	bl	8007480 <LL_RCC_PLL_GetMainSource>
 8007670:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800767e:	d003      	beq.n	8007688 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8007680:	e005      	b.n	800768e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007682:	4b1c      	ldr	r3, [pc, #112]	; (80076f4 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8007684:	617b      	str	r3, [r7, #20]
      break;
 8007686:	e005      	b.n	8007694 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007688:	4b1a      	ldr	r3, [pc, #104]	; (80076f4 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 800768a:	617b      	str	r3, [r7, #20]
      break;
 800768c:	e002      	b.n	8007694 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800768e:	4b19      	ldr	r3, [pc, #100]	; (80076f4 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8007690:	617b      	str	r3, [r7, #20]
      break;
 8007692:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b08      	cmp	r3, #8
 8007698:	d114      	bne.n	80076c4 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800769a:	f7ff ff29 	bl	80074f0 <LL_RCC_PLL_GetDivider>
 800769e:	4602      	mov	r2, r0
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	fbb3 f4f2 	udiv	r4, r3, r2
 80076a6:	f7ff fef9 	bl	800749c <LL_RCC_PLL_GetN>
 80076aa:	4603      	mov	r3, r0
 80076ac:	fb03 f404 	mul.w	r4, r3, r4
 80076b0:	f7ff ff02 	bl	80074b8 <LL_RCC_PLL_GetP>
 80076b4:	4603      	mov	r3, r0
 80076b6:	0c1b      	lsrs	r3, r3, #16
 80076b8:	3301      	adds	r3, #1
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	fbb4 f3f3 	udiv	r3, r4, r3
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	e011      	b.n	80076e8 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80076c4:	f7ff ff14 	bl	80074f0 <LL_RCC_PLL_GetDivider>
 80076c8:	4602      	mov	r2, r0
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	fbb3 f4f2 	udiv	r4, r3, r2
 80076d0:	f7ff fee4 	bl	800749c <LL_RCC_PLL_GetN>
 80076d4:	4603      	mov	r3, r0
 80076d6:	fb03 f404 	mul.w	r4, r3, r4
 80076da:	f7ff fefb 	bl	80074d4 <LL_RCC_PLL_GetR>
 80076de:	4603      	mov	r3, r0
 80076e0:	0f1b      	lsrs	r3, r3, #28
 80076e2:	fbb4 f3f3 	udiv	r3, r4, r3
 80076e6:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80076e8:	693b      	ldr	r3, [r7, #16]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd90      	pop	{r4, r7, pc}
 80076f2:	bf00      	nop
 80076f4:	00f42400 	.word	0x00f42400

080076f8 <LL_USART_IsEnabled>:
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800770c:	bf0c      	ite	eq
 800770e:	2301      	moveq	r3, #1
 8007710:	2300      	movne	r3, #0
 8007712:	b2db      	uxtb	r3, r3
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <LL_USART_SetStopBitsLength>:
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	431a      	orrs	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	611a      	str	r2, [r3, #16]
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <LL_USART_SetHWFlowCtrl>:
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	431a      	orrs	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	615a      	str	r2, [r3, #20]
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <LL_USART_SetBaudRate>:
{
 800776c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007770:	b09f      	sub	sp, #124	; 0x7c
 8007772:	af00      	add	r7, sp, #0
 8007774:	6778      	str	r0, [r7, #116]	; 0x74
 8007776:	6739      	str	r1, [r7, #112]	; 0x70
 8007778:	66fa      	str	r2, [r7, #108]	; 0x6c
 800777a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800777c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007782:	f040 80bc 	bne.w	80078fe <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007788:	461c      	mov	r4, r3
 800778a:	f04f 0500 	mov.w	r5, #0
 800778e:	4622      	mov	r2, r4
 8007790:	462b      	mov	r3, r5
 8007792:	eb12 0a02 	adds.w	sl, r2, r2
 8007796:	eb43 0b03 	adc.w	fp, r3, r3
 800779a:	4652      	mov	r2, sl
 800779c:	465b      	mov	r3, fp
 800779e:	1912      	adds	r2, r2, r4
 80077a0:	eb45 0303 	adc.w	r3, r5, r3
 80077a4:	f04f 0000 	mov.w	r0, #0
 80077a8:	f04f 0100 	mov.w	r1, #0
 80077ac:	00d9      	lsls	r1, r3, #3
 80077ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077b2:	00d0      	lsls	r0, r2, #3
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	1911      	adds	r1, r2, r4
 80077ba:	6639      	str	r1, [r7, #96]	; 0x60
 80077bc:	416b      	adcs	r3, r5
 80077be:	667b      	str	r3, [r7, #100]	; 0x64
 80077c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077c2:	461a      	mov	r2, r3
 80077c4:	f04f 0300 	mov.w	r3, #0
 80077c8:	1891      	adds	r1, r2, r2
 80077ca:	6339      	str	r1, [r7, #48]	; 0x30
 80077cc:	415b      	adcs	r3, r3
 80077ce:	637b      	str	r3, [r7, #52]	; 0x34
 80077d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80077d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80077d8:	f7f9 f934 	bl	8000a44 <__aeabi_uldivmod>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4ba9      	ldr	r3, [pc, #676]	; (8007a88 <LL_USART_SetBaudRate+0x31c>)
 80077e2:	fba3 2302 	umull	r2, r3, r3, r2
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	011b      	lsls	r3, r3, #4
 80077ec:	b29e      	uxth	r6, r3
 80077ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077f0:	461c      	mov	r4, r3
 80077f2:	f04f 0500 	mov.w	r5, #0
 80077f6:	4622      	mov	r2, r4
 80077f8:	462b      	mov	r3, r5
 80077fa:	1891      	adds	r1, r2, r2
 80077fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80077fe:	415b      	adcs	r3, r3
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007802:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007806:	1912      	adds	r2, r2, r4
 8007808:	eb45 0303 	adc.w	r3, r5, r3
 800780c:	f04f 0000 	mov.w	r0, #0
 8007810:	f04f 0100 	mov.w	r1, #0
 8007814:	00d9      	lsls	r1, r3, #3
 8007816:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800781a:	00d0      	lsls	r0, r2, #3
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	1911      	adds	r1, r2, r4
 8007822:	65b9      	str	r1, [r7, #88]	; 0x58
 8007824:	416b      	adcs	r3, r5
 8007826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800782a:	461a      	mov	r2, r3
 800782c:	f04f 0300 	mov.w	r3, #0
 8007830:	1891      	adds	r1, r2, r2
 8007832:	6239      	str	r1, [r7, #32]
 8007834:	415b      	adcs	r3, r3
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
 8007838:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800783c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007840:	f7f9 f900 	bl	8000a44 <__aeabi_uldivmod>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4b8f      	ldr	r3, [pc, #572]	; (8007a88 <LL_USART_SetBaudRate+0x31c>)
 800784a:	fba3 1302 	umull	r1, r3, r3, r2
 800784e:	095b      	lsrs	r3, r3, #5
 8007850:	2164      	movs	r1, #100	; 0x64
 8007852:	fb01 f303 	mul.w	r3, r1, r3
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	3332      	adds	r3, #50	; 0x32
 800785c:	4a8a      	ldr	r2, [pc, #552]	; (8007a88 <LL_USART_SetBaudRate+0x31c>)
 800785e:	fba2 2303 	umull	r2, r3, r2, r3
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	b29b      	uxth	r3, r3
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	b29b      	uxth	r3, r3
 800786a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800786e:	b29b      	uxth	r3, r3
 8007870:	4433      	add	r3, r6
 8007872:	b29e      	uxth	r6, r3
 8007874:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007876:	4618      	mov	r0, r3
 8007878:	f04f 0100 	mov.w	r1, #0
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	1894      	adds	r4, r2, r2
 8007882:	61bc      	str	r4, [r7, #24]
 8007884:	415b      	adcs	r3, r3
 8007886:	61fb      	str	r3, [r7, #28]
 8007888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800788c:	1812      	adds	r2, r2, r0
 800788e:	eb41 0303 	adc.w	r3, r1, r3
 8007892:	f04f 0400 	mov.w	r4, #0
 8007896:	f04f 0500 	mov.w	r5, #0
 800789a:	00dd      	lsls	r5, r3, #3
 800789c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078a0:	00d4      	lsls	r4, r2, #3
 80078a2:	4622      	mov	r2, r4
 80078a4:	462b      	mov	r3, r5
 80078a6:	1814      	adds	r4, r2, r0
 80078a8:	653c      	str	r4, [r7, #80]	; 0x50
 80078aa:	414b      	adcs	r3, r1
 80078ac:	657b      	str	r3, [r7, #84]	; 0x54
 80078ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078b0:	461a      	mov	r2, r3
 80078b2:	f04f 0300 	mov.w	r3, #0
 80078b6:	1891      	adds	r1, r2, r2
 80078b8:	6139      	str	r1, [r7, #16]
 80078ba:	415b      	adcs	r3, r3
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80078c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80078c6:	f7f9 f8bd 	bl	8000a44 <__aeabi_uldivmod>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4b6e      	ldr	r3, [pc, #440]	; (8007a88 <LL_USART_SetBaudRate+0x31c>)
 80078d0:	fba3 1302 	umull	r1, r3, r3, r2
 80078d4:	095b      	lsrs	r3, r3, #5
 80078d6:	2164      	movs	r1, #100	; 0x64
 80078d8:	fb01 f303 	mul.w	r3, r1, r3
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	3332      	adds	r3, #50	; 0x32
 80078e2:	4a69      	ldr	r2, [pc, #420]	; (8007a88 <LL_USART_SetBaudRate+0x31c>)
 80078e4:	fba2 2303 	umull	r2, r3, r2, r3
 80078e8:	095b      	lsrs	r3, r3, #5
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	4433      	add	r3, r6
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	461a      	mov	r2, r3
 80078f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078fa:	609a      	str	r2, [r3, #8]
}
 80078fc:	e0be      	b.n	8007a7c <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80078fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007900:	461c      	mov	r4, r3
 8007902:	f04f 0500 	mov.w	r5, #0
 8007906:	4622      	mov	r2, r4
 8007908:	462b      	mov	r3, r5
 800790a:	eb12 0802 	adds.w	r8, r2, r2
 800790e:	eb43 0903 	adc.w	r9, r3, r3
 8007912:	4642      	mov	r2, r8
 8007914:	464b      	mov	r3, r9
 8007916:	1912      	adds	r2, r2, r4
 8007918:	eb45 0303 	adc.w	r3, r5, r3
 800791c:	f04f 0000 	mov.w	r0, #0
 8007920:	f04f 0100 	mov.w	r1, #0
 8007924:	00d9      	lsls	r1, r3, #3
 8007926:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800792a:	00d0      	lsls	r0, r2, #3
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	1911      	adds	r1, r2, r4
 8007932:	64b9      	str	r1, [r7, #72]	; 0x48
 8007934:	416b      	adcs	r3, r5
 8007936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800793a:	4618      	mov	r0, r3
 800793c:	f04f 0100 	mov.w	r1, #0
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	008b      	lsls	r3, r1, #2
 800794a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800794e:	0082      	lsls	r2, r0, #2
 8007950:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007954:	f7f9 f876 	bl	8000a44 <__aeabi_uldivmod>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4b4a      	ldr	r3, [pc, #296]	; (8007a88 <LL_USART_SetBaudRate+0x31c>)
 800795e:	fba3 2302 	umull	r2, r3, r3, r2
 8007962:	095b      	lsrs	r3, r3, #5
 8007964:	b29b      	uxth	r3, r3
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	b29e      	uxth	r6, r3
 800796a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800796c:	4618      	mov	r0, r3
 800796e:	f04f 0100 	mov.w	r1, #0
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	1894      	adds	r4, r2, r2
 8007978:	60bc      	str	r4, [r7, #8]
 800797a:	415b      	adcs	r3, r3
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007982:	1812      	adds	r2, r2, r0
 8007984:	eb41 0303 	adc.w	r3, r1, r3
 8007988:	f04f 0400 	mov.w	r4, #0
 800798c:	f04f 0500 	mov.w	r5, #0
 8007990:	00dd      	lsls	r5, r3, #3
 8007992:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007996:	00d4      	lsls	r4, r2, #3
 8007998:	4622      	mov	r2, r4
 800799a:	462b      	mov	r3, r5
 800799c:	1814      	adds	r4, r2, r0
 800799e:	643c      	str	r4, [r7, #64]	; 0x40
 80079a0:	414b      	adcs	r3, r1
 80079a2:	647b      	str	r3, [r7, #68]	; 0x44
 80079a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079a6:	4618      	mov	r0, r3
 80079a8:	f04f 0100 	mov.w	r1, #0
 80079ac:	f04f 0200 	mov.w	r2, #0
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	008b      	lsls	r3, r1, #2
 80079b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079ba:	0082      	lsls	r2, r0, #2
 80079bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80079c0:	f7f9 f840 	bl	8000a44 <__aeabi_uldivmod>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4b2f      	ldr	r3, [pc, #188]	; (8007a88 <LL_USART_SetBaudRate+0x31c>)
 80079ca:	fba3 1302 	umull	r1, r3, r3, r2
 80079ce:	095b      	lsrs	r3, r3, #5
 80079d0:	2164      	movs	r1, #100	; 0x64
 80079d2:	fb01 f303 	mul.w	r3, r1, r3
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	011b      	lsls	r3, r3, #4
 80079da:	3332      	adds	r3, #50	; 0x32
 80079dc:	4a2a      	ldr	r2, [pc, #168]	; (8007a88 <LL_USART_SetBaudRate+0x31c>)
 80079de:	fba2 2303 	umull	r2, r3, r2, r3
 80079e2:	095b      	lsrs	r3, r3, #5
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	4433      	add	r3, r6
 80079ee:	b29e      	uxth	r6, r3
 80079f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079f2:	4618      	mov	r0, r3
 80079f4:	f04f 0100 	mov.w	r1, #0
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	1894      	adds	r4, r2, r2
 80079fe:	603c      	str	r4, [r7, #0]
 8007a00:	415b      	adcs	r3, r3
 8007a02:	607b      	str	r3, [r7, #4]
 8007a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a08:	1812      	adds	r2, r2, r0
 8007a0a:	eb41 0303 	adc.w	r3, r1, r3
 8007a0e:	f04f 0400 	mov.w	r4, #0
 8007a12:	f04f 0500 	mov.w	r5, #0
 8007a16:	00dd      	lsls	r5, r3, #3
 8007a18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a1c:	00d4      	lsls	r4, r2, #3
 8007a1e:	4622      	mov	r2, r4
 8007a20:	462b      	mov	r3, r5
 8007a22:	1814      	adds	r4, r2, r0
 8007a24:	63bc      	str	r4, [r7, #56]	; 0x38
 8007a26:	414b      	adcs	r3, r1
 8007a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f04f 0100 	mov.w	r1, #0
 8007a32:	f04f 0200 	mov.w	r2, #0
 8007a36:	f04f 0300 	mov.w	r3, #0
 8007a3a:	008b      	lsls	r3, r1, #2
 8007a3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a40:	0082      	lsls	r2, r0, #2
 8007a42:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007a46:	f7f8 fffd 	bl	8000a44 <__aeabi_uldivmod>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	4b0e      	ldr	r3, [pc, #56]	; (8007a88 <LL_USART_SetBaudRate+0x31c>)
 8007a50:	fba3 1302 	umull	r1, r3, r3, r2
 8007a54:	095b      	lsrs	r3, r3, #5
 8007a56:	2164      	movs	r1, #100	; 0x64
 8007a58:	fb01 f303 	mul.w	r3, r1, r3
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	3332      	adds	r3, #50	; 0x32
 8007a62:	4a09      	ldr	r2, [pc, #36]	; (8007a88 <LL_USART_SetBaudRate+0x31c>)
 8007a64:	fba2 2303 	umull	r2, r3, r2, r3
 8007a68:	095b      	lsrs	r3, r3, #5
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	f003 030f 	and.w	r3, r3, #15
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	4433      	add	r3, r6
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	461a      	mov	r2, r3
 8007a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a7a:	609a      	str	r2, [r3, #8]
}
 8007a7c:	bf00      	nop
 8007a7e:	377c      	adds	r7, #124	; 0x7c
 8007a80:	46bd      	mov	sp, r7
 8007a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a86:	bf00      	nop
 8007a88:	51eb851f 	.word	0x51eb851f

08007a8c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff fe2a 	bl	80076f8 <LL_USART_IsEnabled>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d15e      	bne.n	8007b68 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007ab2:	f023 030c 	bic.w	r3, r3, #12
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	6851      	ldr	r1, [r2, #4]
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	68d2      	ldr	r2, [r2, #12]
 8007abe:	4311      	orrs	r1, r2
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	6912      	ldr	r2, [r2, #16]
 8007ac4:	4311      	orrs	r1, r2
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	6992      	ldr	r2, [r2, #24]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	431a      	orrs	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff fe21 	bl	8007720 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff fe2e 	bl	8007746 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007aea:	f107 0308 	add.w	r3, r7, #8
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff fd0c 	bl	800750c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a1f      	ldr	r2, [pc, #124]	; (8007b74 <LL_USART_Init+0xe8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d102      	bne.n	8007b02 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	61bb      	str	r3, [r7, #24]
 8007b00:	e021      	b.n	8007b46 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a1c      	ldr	r2, [pc, #112]	; (8007b78 <LL_USART_Init+0xec>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d102      	bne.n	8007b10 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	61bb      	str	r3, [r7, #24]
 8007b0e:	e01a      	b.n	8007b46 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a1a      	ldr	r2, [pc, #104]	; (8007b7c <LL_USART_Init+0xf0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d102      	bne.n	8007b1e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	61bb      	str	r3, [r7, #24]
 8007b1c:	e013      	b.n	8007b46 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a17      	ldr	r2, [pc, #92]	; (8007b80 <LL_USART_Init+0xf4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d102      	bne.n	8007b2c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	61bb      	str	r3, [r7, #24]
 8007b2a:	e00c      	b.n	8007b46 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a15      	ldr	r2, [pc, #84]	; (8007b84 <LL_USART_Init+0xf8>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d102      	bne.n	8007b3a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	61bb      	str	r3, [r7, #24]
 8007b38:	e005      	b.n	8007b46 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a12      	ldr	r2, [pc, #72]	; (8007b88 <LL_USART_Init+0xfc>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d101      	bne.n	8007b46 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00d      	beq.n	8007b68 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d009      	beq.n	8007b68 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8007b54:	2300      	movs	r3, #0
 8007b56:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	699a      	ldr	r2, [r3, #24]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	69b9      	ldr	r1, [r7, #24]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff fe02 	bl	800776c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007b68:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3720      	adds	r7, #32
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	40011000 	.word	0x40011000
 8007b78:	40004400 	.word	0x40004400
 8007b7c:	40004800 	.word	0x40004800
 8007b80:	40011400 	.word	0x40011400
 8007b84:	40004c00 	.word	0x40004c00
 8007b88:	40005000 	.word	0x40005000

08007b8c <LL_USART_IsActiveFlag_TXE>:
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9c:	2b80      	cmp	r3, #128	; 0x80
 8007b9e:	bf0c      	ite	eq
 8007ba0:	2301      	moveq	r3, #1
 8007ba2:	2300      	movne	r3, #0
 8007ba4:	b2db      	uxtb	r3, r3
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b083      	sub	sp, #12
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007bbe:	78fa      	ldrb	r2, [r7, #3]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	605a      	str	r2, [r3, #4]
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <initSerialLine>:
void clearBuffer();
unsigned short update_crc(unsigned char *data_blk_ptr, unsigned short data_blk_size);
void writePacket(SerialLine *serialLine, uint8_t packet[], int length);

void initSerialLine(SerialLine *serialLine, uint8_t id, uint8_t* dataStructurePtr, size_t dataStructureSize, USART_TypeDef* usart)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	607a      	str	r2, [r7, #4]
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	72fb      	strb	r3, [r7, #11]
	(serialLine)->id = id;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	7afa      	ldrb	r2, [r7, #11]
 8007be4:	701a      	strb	r2, [r3, #0]
	(serialLine)->dataStructurePtr = dataStructurePtr;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	609a      	str	r2, [r3, #8]
	(serialLine)->dataStructSize = dataStructureSize;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	605a      	str	r2, [r3, #4]
	(serialLine)->usart = usart;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	60da      	str	r2, [r3, #12]
	(serialLine)->nominalPacketCnt = 0;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	611a      	str	r2, [r3, #16]
	(serialLine)->state = HEADER_1;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	615a      	str	r2, [r3, #20]
	(serialLine)->trialCnt = 0;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	(serialLine)->nominalTransmitCnt = 0;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
}
 8007c14:	bf00      	nop
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <pushPacket>:

int pushPacket(SerialLine *serialLine, uint8_t packet[], int length)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
	for(int i=0; i<length; i++)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	617b      	str	r3, [r7, #20]
 8007c30:	e013      	b.n	8007c5a <pushPacket+0x3a>
	{
		serialLine->test = i;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		if(pushByte(serialLine, packet[i]))
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	4413      	add	r3, r2
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	4619      	mov	r1, r3
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 f811 	bl	8007c6c <pushByte>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <pushPacket+0x34>
		{
			return 1;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e007      	b.n	8007c64 <pushPacket+0x44>
	for(int i=0; i<length; i++)
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	3301      	adds	r3, #1
 8007c58:	617b      	str	r3, [r7, #20]
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	dbe7      	blt.n	8007c32 <pushPacket+0x12>
		}
	}

	return 0;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <pushByte>:

int pushByte(SerialLine *serialLine, uint8_t byte)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
	switch (serialLine->state)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	2b0a      	cmp	r3, #10
 8007c7e:	f200 81c8 	bhi.w	8008012 <pushByte+0x3a6>
 8007c82:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <pushByte+0x1c>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007cb5 	.word	0x08007cb5
 8007c8c:	08007ce1 	.word	0x08007ce1
 8007c90:	08007d07 	.word	0x08007d07
 8007c94:	08007d25 	.word	0x08007d25
 8007c98:	08007d43 	.word	0x08007d43
 8007c9c:	08007d55 	.word	0x08007d55
 8007ca0:	08007d67 	.word	0x08007d67
 8007ca4:	08007da9 	.word	0x08007da9
 8007ca8:	08007dcd 	.word	0x08007dcd
 8007cac:	08007df3 	.word	0x08007df3
 8007cb0:	08007e05 	.word	0x08007e05
	{
	case HEADER_1:
	{
		clearBuffer(serialLine);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fabd 	bl	8008234 <clearBuffer>
		if (byte == 0xFF)
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	2bff      	cmp	r3, #255	; 0xff
 8007cbe:	f040 81a3 	bne.w	8008008 <pushByte+0x39c>
		{
			bufferPush(serialLine, 0xFF);
 8007cc2:	21ff      	movs	r1, #255	; 0xff
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f9d2 	bl	800806e <bufferPush>
			serialLine->trialCnt++;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
			serialLine->state = HEADER_2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	615a      	str	r2, [r3, #20]
		}
		break;
 8007cde:	e193      	b.n	8008008 <pushByte+0x39c>
	}
	case HEADER_2:
	{
		if (byte == 0xFF)
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	2bff      	cmp	r3, #255	; 0xff
 8007ce4:	d107      	bne.n	8007cf6 <pushByte+0x8a>
		{
			bufferPush(serialLine, 0xFF);
 8007ce6:	21ff      	movs	r1, #255	; 0xff
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f9c0 	bl	800806e <bufferPush>
			serialLine->state = HEADER_3;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	615a      	str	r2, [r3, #20]
		else
		{
			serialLine->failByte = byte;
			serialLine->state = HEADER_1;
		}
		break;
 8007cf4:	e18d      	b.n	8008012 <pushByte+0x3a6>
			serialLine->failByte = byte;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	78fa      	ldrb	r2, [r7, #3]
 8007cfa:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
			serialLine->state = HEADER_1;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	615a      	str	r2, [r3, #20]
		break;
 8007d04:	e185      	b.n	8008012 <pushByte+0x3a6>
	}
	case HEADER_3:
	{
		if (byte == 0xFD)
 8007d06:	78fb      	ldrb	r3, [r7, #3]
 8007d08:	2bfd      	cmp	r3, #253	; 0xfd
 8007d0a:	d107      	bne.n	8007d1c <pushByte+0xb0>
		{
			bufferPush(serialLine, 0xFD);
 8007d0c:	21fd      	movs	r1, #253	; 0xfd
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f9ad 	bl	800806e <bufferPush>
			serialLine->state = RESERVED;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2203      	movs	r2, #3
 8007d18:	615a      	str	r2, [r3, #20]
		}
		else
		{
			serialLine->state = HEADER_1;
		}
		break;
 8007d1a:	e17a      	b.n	8008012 <pushByte+0x3a6>
			serialLine->state = HEADER_1;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	615a      	str	r2, [r3, #20]
		break;
 8007d22:	e176      	b.n	8008012 <pushByte+0x3a6>
	}
	case RESERVED:
	{
		if (byte == 0x00)
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d107      	bne.n	8007d3a <pushByte+0xce>
		{
			bufferPush(serialLine, 0x00);
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f99e 	bl	800806e <bufferPush>
			serialLine->state = RX_STATE_ID;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2204      	movs	r2, #4
 8007d36:	615a      	str	r2, [r3, #20]
		}
		else
		{
			serialLine->state = HEADER_1;
		}
		break;
 8007d38:	e16b      	b.n	8008012 <pushByte+0x3a6>
			serialLine->state = HEADER_1;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	615a      	str	r2, [r3, #20]
		break;
 8007d40:	e167      	b.n	8008012 <pushByte+0x3a6>
	}
	case RX_STATE_ID:
	{
		bufferPush(serialLine, byte);
 8007d42:	78fb      	ldrb	r3, [r7, #3]
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f991 	bl	800806e <bufferPush>
		serialLine->state = LENGTH_1;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2205      	movs	r2, #5
 8007d50:	615a      	str	r2, [r3, #20]
		break;
 8007d52:	e15e      	b.n	8008012 <pushByte+0x3a6>
	}
	case LENGTH_1:
	{
		bufferPush(serialLine, byte);
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f988 	bl	800806e <bufferPush>
		serialLine->state = LENGTH_2;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2206      	movs	r2, #6
 8007d62:	615a      	str	r2, [r3, #20]
		break;
 8007d64:	e155      	b.n	8008012 <pushByte+0x3a6>
	}
	case LENGTH_2:
	{
		bufferPush(serialLine, byte);
 8007d66:	78fb      	ldrb	r3, [r7, #3]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f97f 	bl	800806e <bufferPush>
		serialLine->length = 256 * serialLine->packetBuffer[6] + serialLine->packetBuffer[5];
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	7f9b      	ldrb	r3, [r3, #30]
 8007d74:	021b      	lsls	r3, r3, #8
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	7f52      	ldrb	r2, [r2, #29]
 8007d7a:	441a      	add	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		if(serialLine->length < 0 ||RX_BUFFER_SIZE-10 < serialLine->length)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	db05      	blt.n	8007d98 <pushByte+0x12c>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8007d92:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8007d96:	dd03      	ble.n	8007da0 <pushByte+0x134>
		{
			serialLine->state = HEADER_1;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	615a      	str	r2, [r3, #20]
		}
		else
		{
			serialLine->state = INSTRUCTION;
		}
		break;
 8007d9e:	e138      	b.n	8008012 <pushByte+0x3a6>
			serialLine->state = INSTRUCTION;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2207      	movs	r2, #7
 8007da4:	615a      	str	r2, [r3, #20]
		break;
 8007da6:	e134      	b.n	8008012 <pushByte+0x3a6>
	}
	case INSTRUCTION:
	{
		bufferPush(serialLine, byte);
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	4619      	mov	r1, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f95e 	bl	800806e <bufferPush>
		if(serialLine->length == 3) serialLine->state = CRC_1;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d103      	bne.n	8007dc4 <pushByte+0x158>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2209      	movs	r2, #9
 8007dc0:	615a      	str	r2, [r3, #20]
		else serialLine->state = PARAMETER;
		break;
 8007dc2:	e126      	b.n	8008012 <pushByte+0x3a6>
		else serialLine->state = PARAMETER;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2208      	movs	r2, #8
 8007dc8:	615a      	str	r2, [r3, #20]
		break;
 8007dca:	e122      	b.n	8008012 <pushByte+0x3a6>
	}
	case PARAMETER:
	{
		bufferPush(serialLine, byte);
 8007dcc:	78fb      	ldrb	r3, [r7, #3]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f94c 	bl	800806e <bufferPush>
		if (serialLine->packetBufferSize > (serialLine->length + 4)) serialLine->state = CRC_1;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8007de2:	3304      	adds	r3, #4
 8007de4:	429a      	cmp	r2, r3
 8007de6:	f340 8111 	ble.w	800800c <pushByte+0x3a0>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2209      	movs	r2, #9
 8007dee:	615a      	str	r2, [r3, #20]
		break;
 8007df0:	e10c      	b.n	800800c <pushByte+0x3a0>
	}
	case CRC_1:
	{
		bufferPush(serialLine, byte);
 8007df2:	78fb      	ldrb	r3, [r7, #3]
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f939 	bl	800806e <bufferPush>
		serialLine->state = CRC_2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	220a      	movs	r2, #10
 8007e00:	615a      	str	r2, [r3, #20]
		break;
 8007e02:	e106      	b.n	8008012 <pushByte+0x3a6>
	}
	case CRC_2:
	{
		bufferPush(serialLine, byte);
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f930 	bl	800806e <bufferPush>

		serialLine->actualCRC = serialLine->packetBuffer[serialLine->packetBufferSize-2] | (serialLine->packetBuffer[serialLine->packetBufferSize-1]<<8);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007e14:	3b02      	subs	r3, #2
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	4413      	add	r3, r2
 8007e1a:	7e1b      	ldrb	r3, [r3, #24]
 8007e1c:	b21a      	sxth	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007e24:	3b01      	subs	r3, #1
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	440b      	add	r3, r1
 8007e2a:	7e1b      	ldrb	r3, [r3, #24]
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	b21b      	sxth	r3, r3
 8007e30:	4313      	orrs	r3, r2
 8007e32:	b21b      	sxth	r3, r3
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
		serialLine->expectedCRC = update_crc(serialLine->packetBuffer, serialLine->packetBufferSize-2);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f103 0218 	add.w	r2, r3, #24
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3b02      	subs	r3, #2
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4610      	mov	r0, r2
 8007e52:	f000 f9a1 	bl	8008198 <update_crc>
 8007e56:	4603      	mov	r3, r0
 8007e58:	461a      	mov	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
		serialLine->state = HEADER_1;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	615a      	str	r2, [r3, #20]

		if(serialLine->expectedCRC == serialLine->actualCRC)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8b3 214c 	ldrh.w	r2, [r3, #332]	; 0x14c
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8007e72:	429a      	cmp	r2, r3
 8007e74:	f040 80cc 	bne.w	8008010 <pushByte+0x3a4>
		{
			serialLine->nominalPacketCnt++;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	1c5a      	adds	r2, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	611a      	str	r2, [r3, #16]
			if(serialLine->id == serialLine->packetBuffer[4])
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	7f1b      	ldrb	r3, [r3, #28]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	f040 80b9 	bne.w	8008002 <pushByte+0x396>
			{
				uint8_t instruction = serialLine->packetBuffer[7];
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	7fdb      	ldrb	r3, [r3, #31]
 8007e94:	75fb      	strb	r3, [r7, #23]

				switch(instruction)
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
 8007e98:	2bde      	cmp	r3, #222	; 0xde
 8007e9a:	f040 80b3 	bne.w	8008004 <pushByte+0x398>
				{
				case 0xDE:
				{
					injectValue(serialLine, &serialLine->packetBuffer[8], serialLine->packetBufferSize-10);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f103 0120 	add.w	r1, r3, #32
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007eaa:	3b0a      	subs	r3, #10
 8007eac:	461a      	mov	r2, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f8fc 	bl	80080ac <injectValue>

					int packetLength=0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	61fb      	str	r3, [r7, #28]

					serialLine->packet[packetLength++] = 0xFF;
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	61fa      	str	r2, [r7, #28]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	22ff      	movs	r2, #255	; 0xff
 8007ec4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0xFF;
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	61fa      	str	r2, [r7, #28]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	22ff      	movs	r2, #255	; 0xff
 8007ed4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0xFD;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	61fa      	str	r2, [r7, #28]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	22fd      	movs	r2, #253	; 0xfd
 8007ee4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0x00;
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	61fa      	str	r2, [r7, #28]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = serialLine->id;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	61fa      	str	r2, [r7, #28]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	7811      	ldrb	r1, [r2, #0]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	4413      	add	r3, r2
 8007f06:	460a      	mov	r2, r1
 8007f08:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0;	//length placeholder. valid value is set by setLength()
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	61fa      	str	r2, [r7, #28]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	4413      	add	r3, r2
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0;	//length placeholder. valid value is set by setLength()
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	61fa      	str	r2, [r7, #28]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	4413      	add	r3, r2
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0X55;
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	61fa      	str	r2, [r7, #28]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	4413      	add	r3, r2
 8007f36:	2255      	movs	r2, #85	; 0x55
 8007f38:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0;//error
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	61fa      	str	r2, [r7, #28]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	4413      	add	r3, r2
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					for(int i=0; i<serialLine->dataStructSize; i++)
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61bb      	str	r3, [r7, #24]
 8007f50:	e00f      	b.n	8007f72 <pushByte+0x306>
					{
						serialLine->packet[packetLength++] = *(serialLine->dataStructurePtr + i);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689a      	ldr	r2, [r3, #8]
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	441a      	add	r2, r3
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	1c59      	adds	r1, r3, #1
 8007f5e:	61f9      	str	r1, [r7, #28]
 8007f60:	7811      	ldrb	r1, [r2, #0]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	4413      	add	r3, r2
 8007f66:	460a      	mov	r2, r1
 8007f68:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					for(int i=0; i<serialLine->dataStructSize; i++)
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	61bb      	str	r3, [r7, #24]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d8ea      	bhi.n	8007f52 <pushByte+0x2e6>
					}

					//set length
					int length = packetLength - 5;
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	3b05      	subs	r3, #5
 8007f80:	613b      	str	r3, [r7, #16]
					serialLine->packet[5] = (length& 0xff);
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
					serialLine->packet[6] = ((length>>8) & 0xff);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	121b      	asrs	r3, r3, #8
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162

					//attach CRC
					unsigned short crc = update_crc(serialLine->packet, packetLength);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8007f9e:	69fa      	ldr	r2, [r7, #28]
 8007fa0:	b292      	uxth	r2, r2
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 f8f7 	bl	8008198 <update_crc>
 8007faa:	4603      	mov	r3, r0
 8007fac:	81fb      	strh	r3, [r7, #14]
					serialLine->packet[packetLength++] = crc& 0xff;
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	61fa      	str	r2, [r7, #28]
 8007fb4:	89fa      	ldrh	r2, [r7, #14]
 8007fb6:	b2d1      	uxtb	r1, r2
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	4413      	add	r3, r2
 8007fbc:	460a      	mov	r2, r1
 8007fbe:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = (crc>>8) & 0xff;
 8007fc2:	89fb      	ldrh	r3, [r7, #14]
 8007fc4:	0a1b      	lsrs	r3, r3, #8
 8007fc6:	b299      	uxth	r1, r3
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	61fa      	str	r2, [r7, #28]
 8007fce:	b2c9      	uxtb	r1, r1
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	460a      	mov	r2, r1
 8007fd6:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->nominalTransmitCnt++;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
					writePacket(serialLine, serialLine->packet, packetLength);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8007fee:	69fa      	ldr	r2, [r7, #28]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f814 	bl	8008020 <writePacket>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8007ff8:	2104      	movs	r1, #4
 8007ffa:	4808      	ldr	r0, [pc, #32]	; (800801c <pushByte+0x3b0>)
 8007ffc:	f7fd faed 	bl	80055da <HAL_GPIO_TogglePin>
					break;
 8008000:	e000      	b.n	8008004 <pushByte+0x398>
				}
				}
			}
 8008002:	bf00      	nop

			return 1;
 8008004:	2301      	movs	r3, #1
 8008006:	e005      	b.n	8008014 <pushByte+0x3a8>
		break;
 8008008:	bf00      	nop
 800800a:	e002      	b.n	8008012 <pushByte+0x3a6>
		break;
 800800c:	bf00      	nop
 800800e:	e000      	b.n	8008012 <pushByte+0x3a6>
		}
		break;
 8008010:	bf00      	nop
	}
	}

	return 0;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3720      	adds	r7, #32
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	40020c00 	.word	0x40020c00

08008020 <writePacket>:

void writePacket(SerialLine *serialLine, uint8_t packet[], int length)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
	for(int i=0; i<length; i++)
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	e014      	b.n	800805c <writePacket+0x3c>
	{
		while(!LL_USART_IsActiveFlag_TXE(serialLine->usart));
 8008032:	bf00      	nop
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff fda7 	bl	8007b8c <LL_USART_IsActiveFlag_TXE>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0f7      	beq.n	8008034 <writePacket+0x14>
		LL_USART_TransmitData8(serialLine->usart, packet[i]);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	68d8      	ldr	r0, [r3, #12]
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	4413      	add	r3, r2
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	4619      	mov	r1, r3
 8008052:	f7ff fdae 	bl	8007bb2 <LL_USART_TransmitData8>
	for(int i=0; i<length; i++)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	3301      	adds	r3, #1
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	429a      	cmp	r2, r3
 8008062:	dbe6      	blt.n	8008032 <writePacket+0x12>
	}
}
 8008064:	bf00      	nop
 8008066:	bf00      	nop
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <bufferPush>:

void bufferPush(SerialLine *serialLine, uint8_t byte)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b082      	sub	sp, #8
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	460b      	mov	r3, r1
 8008078:	70fb      	strb	r3, [r7, #3]
	if(serialLine->packetBufferSize > RX_BUFFER_SIZE-2)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008080:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8008084:	dd02      	ble.n	800808c <bufferPush+0x1e>
	{
		clearBuffer(serialLine);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f8d4 	bl	8008234 <clearBuffer>
	}

	serialLine->packetBuffer[serialLine->packetBufferSize++] = byte;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008092:	1c59      	adds	r1, r3, #1
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	f8c2 1154 	str.w	r1, [r2, #340]	; 0x154
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	4413      	add	r3, r2
 800809e:	78fa      	ldrb	r2, [r7, #3]
 80080a0:	761a      	strb	r2, [r3, #24]
}
 80080a2:	bf00      	nop
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <injectValue>:

void injectValue(SerialLine *serialLine, uint8_t parameter[], int length)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b090      	sub	sp, #64	; 0x40
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
	int state = ADDRESS_1;
 80080b8:	2300      	movs	r3, #0
 80080ba:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint8_t address1;
	int address, size, valueByteIndex = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t valueByteArray[16];

	uint8_t byte;
	for(int i=0; i<length; i++)
 80080c0:	2300      	movs	r3, #0
 80080c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80080c4:	e05c      	b.n	8008180 <injectValue+0xd4>
	{
		byte = parameter[i];
 80080c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	4413      	add	r3, r2
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80080d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d850      	bhi.n	800817a <injectValue+0xce>
 80080d8:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <injectValue+0x34>)
 80080da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080de:	bf00      	nop
 80080e0:	080080f1 	.word	0x080080f1
 80080e4:	080080ff 	.word	0x080080ff
 80080e8:	08008113 	.word	0x08008113
 80080ec:	08008125 	.word	0x08008125

		switch(state)
		{
		case ADDRESS_1:
		{
			address1 = byte;
 80080f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			state = ADDRESS_2;
 80080f8:	2301      	movs	r3, #1
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 80080fc:	e03d      	b.n	800817a <injectValue+0xce>
		}
		case ADDRESS_2:
		{
			address = address1 | (byte<<8);
 80080fe:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008106:	021b      	lsls	r3, r3, #8
 8008108:	4313      	orrs	r3, r2
 800810a:	637b      	str	r3, [r7, #52]	; 0x34
			state = SIZE;
 800810c:	2302      	movs	r3, #2
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 8008110:	e033      	b.n	800817a <injectValue+0xce>
		}
		case SIZE:
		{
			size = byte;
 8008112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008116:	633b      	str	r3, [r7, #48]	; 0x30
			if(size > 16) return;
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	2b10      	cmp	r3, #16
 800811c:	dc35      	bgt.n	800818a <injectValue+0xde>
			state = VALUE;
 800811e:	2303      	movs	r3, #3
 8008120:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 8008122:	e02a      	b.n	800817a <injectValue+0xce>
		}
		case VALUE:
		{
			valueByteArray[valueByteIndex++] = byte;
 8008124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800812a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800812e:	4413      	add	r3, r2
 8008130:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008134:	f803 2c2c 	strb.w	r2, [r3, #-44]
			if(valueByteIndex == size)
 8008138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	429a      	cmp	r2, r3
 800813e:	d11b      	bne.n	8008178 <injectValue+0xcc>
			{
				if((uint8_t*)serialLine->dataStructurePtr + address == NULL || (uint8_t*)serialLine->dataStructurePtr + address + size == NULL) return;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008146:	4413      	add	r3, r2
 8008148:	2b00      	cmp	r3, #0
 800814a:	d020      	beq.n	800818e <injectValue+0xe2>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	689a      	ldr	r2, [r3, #8]
 8008150:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	440b      	add	r3, r1
 8008156:	4413      	add	r3, r2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d018      	beq.n	800818e <injectValue+0xe2>
				//dataChange.address = address;
				//for(int i=0; i<size ; i++) dataChange.data.push_back(valueByteArray[i]);
				//slaveSerialLine->addDataChange(dataChange);

				//printf("injecting to %d\n",address);
				memcpy((uint8_t*)serialLine->dataStructurePtr + address, valueByteArray, size);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	689a      	ldr	r2, [r3, #8]
 8008160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008162:	4413      	add	r3, r2
 8008164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008166:	f107 0114 	add.w	r1, r7, #20
 800816a:	4618      	mov	r0, r3
 800816c:	f000 f894 	bl	8008298 <memcpy>
				valueByteIndex = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	62fb      	str	r3, [r7, #44]	; 0x2c
				state = ADDRESS_1;
 8008174:	2300      	movs	r3, #0
 8008176:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			break;
 8008178:	bf00      	nop
	for(int i=0; i<length; i++)
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	3301      	adds	r3, #1
 800817e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	429a      	cmp	r2, r3
 8008186:	db9e      	blt.n	80080c6 <injectValue+0x1a>
 8008188:	e002      	b.n	8008190 <injectValue+0xe4>
			if(size > 16) return;
 800818a:	bf00      	nop
 800818c:	e000      	b.n	8008190 <injectValue+0xe4>
				if((uint8_t*)serialLine->dataStructurePtr + address == NULL || (uint8_t*)serialLine->dataStructurePtr + address + size == NULL) return;
 800818e:	bf00      	nop
		}
		}
	}
}
 8008190:	3740      	adds	r7, #64	; 0x40
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop

08008198 <update_crc>:
{
	free(serialLine);
}

unsigned short update_crc(unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800819e:	af00      	add	r7, sp, #0
 80081a0:	1d3b      	adds	r3, r7, #4
 80081a2:	6018      	str	r0, [r3, #0]
 80081a4:	460a      	mov	r2, r1
 80081a6:	1cbb      	adds	r3, r7, #2
 80081a8:	801a      	strh	r2, [r3, #0]
	unsigned short crc_accum = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	unsigned short i, j;
	unsigned short crc_table[256] = {
 80081b0:	f107 0308 	add.w	r3, r7, #8
 80081b4:	4a1e      	ldr	r2, [pc, #120]	; (8008230 <update_crc+0x98>)
 80081b6:	4618      	mov	r0, r3
 80081b8:	4611      	mov	r1, r2
 80081ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081be:	461a      	mov	r2, r3
 80081c0:	f000 f86a 	bl	8008298 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 80081c4:	2300      	movs	r3, #0
 80081c6:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
 80081ca:	e023      	b.n	8008214 <update_crc+0x7c>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 80081cc:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80081d0:	0a1b      	lsrs	r3, r3, #8
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 80081d8:	1d39      	adds	r1, r7, #4
 80081da:	6809      	ldr	r1, [r1, #0]
 80081dc:	440b      	add	r3, r1
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	4053      	eors	r3, r2
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	f8a7 320a 	strh.w	r3, [r7, #522]	; 0x20a
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 80081ec:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	b21a      	sxth	r2, r3
 80081f4:	f8b7 120a 	ldrh.w	r1, [r7, #522]	; 0x20a
 80081f8:	f107 0308 	add.w	r3, r7, #8
 80081fc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8008200:	b21b      	sxth	r3, r3
 8008202:	4053      	eors	r3, r2
 8008204:	b21b      	sxth	r3, r3
 8008206:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	for(j = 0; j < data_blk_size; j++)
 800820a:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800820e:	3301      	adds	r3, #1
 8008210:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
 8008214:	1cbb      	adds	r3, r7, #2
 8008216:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	429a      	cmp	r2, r3
 800821e:	d3d5      	bcc.n	80081cc <update_crc+0x34>
	}

	return crc_accum;
 8008220:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
}
 8008224:	4618      	mov	r0, r3
 8008226:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	080082dc 	.word	0x080082dc

08008234 <clearBuffer>:

void clearBuffer(SerialLine *serialLine)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	serialLine->packetBufferSize = 0;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <__libc_init_array>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	4d0d      	ldr	r5, [pc, #52]	; (8008288 <__libc_init_array+0x38>)
 8008254:	4c0d      	ldr	r4, [pc, #52]	; (800828c <__libc_init_array+0x3c>)
 8008256:	1b64      	subs	r4, r4, r5
 8008258:	10a4      	asrs	r4, r4, #2
 800825a:	2600      	movs	r6, #0
 800825c:	42a6      	cmp	r6, r4
 800825e:	d109      	bne.n	8008274 <__libc_init_array+0x24>
 8008260:	4d0b      	ldr	r5, [pc, #44]	; (8008290 <__libc_init_array+0x40>)
 8008262:	4c0c      	ldr	r4, [pc, #48]	; (8008294 <__libc_init_array+0x44>)
 8008264:	f000 f82e 	bl	80082c4 <_init>
 8008268:	1b64      	subs	r4, r4, r5
 800826a:	10a4      	asrs	r4, r4, #2
 800826c:	2600      	movs	r6, #0
 800826e:	42a6      	cmp	r6, r4
 8008270:	d105      	bne.n	800827e <__libc_init_array+0x2e>
 8008272:	bd70      	pop	{r4, r5, r6, pc}
 8008274:	f855 3b04 	ldr.w	r3, [r5], #4
 8008278:	4798      	blx	r3
 800827a:	3601      	adds	r6, #1
 800827c:	e7ee      	b.n	800825c <__libc_init_array+0xc>
 800827e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008282:	4798      	blx	r3
 8008284:	3601      	adds	r6, #1
 8008286:	e7f2      	b.n	800826e <__libc_init_array+0x1e>
 8008288:	0800851c 	.word	0x0800851c
 800828c:	0800851c 	.word	0x0800851c
 8008290:	0800851c 	.word	0x0800851c
 8008294:	08008520 	.word	0x08008520

08008298 <memcpy>:
 8008298:	440a      	add	r2, r1
 800829a:	4291      	cmp	r1, r2
 800829c:	f100 33ff 	add.w	r3, r0, #4294967295
 80082a0:	d100      	bne.n	80082a4 <memcpy+0xc>
 80082a2:	4770      	bx	lr
 80082a4:	b510      	push	{r4, lr}
 80082a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ae:	4291      	cmp	r1, r2
 80082b0:	d1f9      	bne.n	80082a6 <memcpy+0xe>
 80082b2:	bd10      	pop	{r4, pc}

080082b4 <memset>:
 80082b4:	4402      	add	r2, r0
 80082b6:	4603      	mov	r3, r0
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d100      	bne.n	80082be <memset+0xa>
 80082bc:	4770      	bx	lr
 80082be:	f803 1b01 	strb.w	r1, [r3], #1
 80082c2:	e7f9      	b.n	80082b8 <memset+0x4>

080082c4 <_init>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	bf00      	nop
 80082c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ca:	bc08      	pop	{r3}
 80082cc:	469e      	mov	lr, r3
 80082ce:	4770      	bx	lr

080082d0 <_fini>:
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	bf00      	nop
 80082d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d6:	bc08      	pop	{r3}
 80082d8:	469e      	mov	lr, r3
 80082da:	4770      	bx	lr
